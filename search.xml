<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/07/hello-world/"/>
      <url>/2023/06/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>superset</title>
      <link href="/2022/11/14/superset/"/>
      <url>/2022/11/14/superset/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本篇文章仅供参考</p></blockquote><h2 id="一、Superset-环境准备"><a href="#一、Superset-环境准备" class="headerlink" title="一、Superset 环境准备"></a>一、Superset 环境准备</h2><hr><h3 id="1-1、pyenv-安装配置"><a href="#1-1、pyenv-安装配置" class="headerlink" title="1.1、pyenv 安装配置"></a>1.1、pyenv 安装配置</h3><hr><blockquote><p><code>pyenv</code> ： <code>Python</code> 多版本管理器，使用户在系统里安装和管理多个 <code>Python</code> 版本</p></blockquote><blockquote><p>安装依赖环境</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc gcc-c++ zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libpcap-devel xz-devel python-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装<code>git</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装<code>pyenv</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/pyenv/pyenv.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>报错</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">fatal: unable to access <span class="token string">'https://github.com/pyenv/pyenv.git/'</span><span class="token keyword">:</span> TCP connection reset by peer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>解决</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nss curl libcurl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>报错</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">fatal: unable to access <span class="token string">'https://github.com/pyenv/pyenv.git/'</span><span class="token keyword">:</span> Failed connect to github.com:443<span class="token punctuation">;</span> Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>解决</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>配置环境变量</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export PATH="/home/superset/pyenv/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token keyword">echo</span> <span class="token string">'eval "<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>验证<code>pyenv</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2、安装-python3-6"><a href="#1-2、安装-python3-6" class="headerlink" title="1.2、安装 python3.6"></a>1.2、安装 python3.6</h3><hr><blockquote><p><code>pyenv</code> 查看可安装版本<code>python</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv <span class="token function">install</span> --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>pyenv</code>查看已安装版本<code>python</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>superset@lagou122 ~<span class="token punctuation">]</span>$ pyenv versions* system <span class="token punctuation">(</span>set by /home/superset/.pyenv/version<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##系统版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装<code>python3.6.6</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv <span class="token function">install</span> -v 3.6.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>pyenv</code>查看已安装版本<code>python</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>superset@lagou122 ~<span class="token punctuation">]</span>$ pyenv versions* system <span class="token punctuation">(</span>set by /home/superset/.pyenv/version<span class="token punctuation">)</span>  3.6.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3、配置管理python版本"><a href="#1-3、配置管理python版本" class="headerlink" title="1.3、配置管理python版本"></a>1.3、配置管理python版本</h3><hr><blockquote><ul><li>pyenv global <version>  全局配置</version></li><li>pyenv shell<version>  shell配置,之影响档当前会话</version></li><li>pyenv local<version>  当前目录模式</version></li></ul></blockquote><blockquote><p>python 版本全局配置改为 3.6.6</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv global 3.6.6pyenv rehash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>查看<code>python</code>版本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>superset@lagou122 ~<span class="token punctuation">]</span>$ python -VPython 3.6.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>查看<code>python</code>管理器版本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>superset@lagou122 ~<span class="token punctuation">]</span>$ pyenv versions  system* 3.6.6 <span class="token punctuation">(</span>set by /home/superset/.pyenv/version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>恢复<code>python</code>系统版本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv local system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>pyenv</code>管理器卸载安装版本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv uninstall 3.6.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4、安装pyenv-virtualenv插件"><a href="#1-4、安装pyenv-virtualenv插件" class="headerlink" title="1.4、安装pyenv-virtualenv插件"></a>1.4、安装pyenv-virtualenv插件</h3><hr><blockquote><p>克隆插件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>添加环境变量</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv virtualenv-init -<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>检查插件是否添加成功</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv <span class="token function">help</span> virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114121551647.png"></p><h3 id="1-5、创建一个隔离环境"><a href="#1-5、创建一个隔离环境" class="headerlink" title="1.5、创建一个隔离环境"></a>1.5、创建一个隔离环境</h3><hr><pre class="line-numbers language-bash"><code class="language-bash">pyenv virtualenv 3.6.6 myenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114125313238.png"></p><blockquote><p>切换到虚拟环境</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv activate myenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>退出隔离环境</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pyenv deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除隔离环境</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> -f /home/superset/.pyenv/versions/myenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、superSet安装配置-myenv"><a href="#二、superSet安装配置-myenv" class="headerlink" title="二、superSet安装配置(myenv)"></a>二、superSet安装配置(myenv)</h2><hr><h3 id="2-1、安装依赖包"><a href="#2-1、安装依赖包" class="headerlink" title="2.1、安装依赖包"></a>2.1、安装依赖包</h3><hr><blockquote><p>更新<code>python-setuptools</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum upgrade python-setuptools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装依赖包</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel cyrus-sasl-devel openldap-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能遇见的问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114131948714.png"></p><blockquote><p>解决方案</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum -y <span class="token function">install</span> epel-release<span class="token function">sudo</span> yum -y <span class="token function">install</span> python-pip<span class="token function">sudo</span> yum -y <span class="token function">install</span> python-wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、指定国内源更新pip-setuptools"><a href="#2-2、指定国内源更新pip-setuptools" class="headerlink" title="2.2、指定国内源更新pip setuptools"></a>2.2、指定国内源更新<code>pip</code> <code>setuptools</code></h3><pre class="line-numbers language-bahs"><code class="language-bahs">pip install --upgrade setuptools pip -i https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3、安装配置superSet"><a href="#2-3、安装配置superSet" class="headerlink" title="2.3、安装配置superSet"></a>2.3、安装配置superSet</h3><blockquote><p>安装<code>superSet</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> apache-superset -i https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>初始化<code>superSet</code>数据库</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">superset db upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能遇到的错误</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114133755162.png"></p><blockquote><p>解决方案</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> sqlalchemy<span class="token operator">==</span>1.3.24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能遇到的错误</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114133920192.png"></p><blockquote><p>解决方案</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> dataclasses<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>创建管理员用户</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##设置环境变量</span><span class="token function">export</span> FLASK_APP<span class="token operator">=</span>superset<span class="token comment" spellcheck="true">##设置用户名和密码</span>superset fab create-admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114134551895.png"></p><blockquote><p>初始化<code>superset</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">superset init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4、启停服务"><a href="#2-4、启停服务" class="headerlink" title="2.4、启停服务"></a>2.4、启停服务</h3><hr><blockquote><p>安装 <code>gunicorn</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> gunicorn -i https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221114170344885.png"></p><blockquote><p>启动<code>superset</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">gunicorn --workers 5 --timeout 120 --bind lagou122:8787 <span class="token string">"superset.app:create_app()"</span>  --daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>访问</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">lagou122:</span>8787/login/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>停止<code>superset</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/superset/ &amp;&amp; !/awk/{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、连接Kylin"><a href="#三、连接Kylin" class="headerlink" title="三、连接Kylin"></a>三、连接<code>Kylin</code></h2><hr><h3 id="3-1、安装插件"><a href="#3-1、安装插件" class="headerlink" title="3.1、安装插件"></a>3.1、安装插件</h3><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> kylinpy<span class="token operator">==</span>1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2、连接kylin"><a href="#3-2、连接kylin" class="headerlink" title="3.2、连接kylin"></a>3.2、连接kylin</h3><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">kylin:</span>//ADMIN:KYLIN@192.168.8.122:7070/superSet_kylin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3、查询"><a href="#3-3、查询" class="headerlink" title="3.3、查询"></a>3.3、查询</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/superket/image-20221121100452757.png"></p><h2 id="四、连接HIVE"><a href="#四、连接HIVE" class="headerlink" title="四、连接HIVE"></a>四、连接<code>HIVE</code></h2><h3 id="3-1、安装插件-1"><a href="#3-1、安装插件-1" class="headerlink" title="3.1、安装插件"></a>3.1、安装插件</h3><pre class="line-numbers language-SQL"><code class="language-SQL">pip intsall pyhivepip install saslpip install thriftpip install thrift-saslpip install cyrus-sasl-plain <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2、连接HIVE"><a href="#3-2、连接HIVE" class="headerlink" title="3.2、连接HIVE"></a>3.2、连接<code>HIVE</code></h3><pre class="line-numbers language-SQL"><code class="language-SQL">hive://39.98.36.181:10000/ads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3、查询-1"><a href="#3-3、查询-1" class="headerlink" title="3.3、查询"></a>3.3、查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第七周</title>
      <link href="/2022/11/09/homework1029/"/>
      <url>/2022/11/09/homework1029/</url>
      
        <content type="html"><![CDATA[<h2 id="2-创建预分区的表"><a href="#2-创建预分区的表" class="headerlink" title="2. 创建预分区的表"></a>2. 创建预分区的表</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork1029/image-20221109141408051.png" alt="image-20221109141408051"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'person'</span><span class="token punctuation">,</span><span class="token string">'info1'</span><span class="token punctuation">,</span><span class="token string">'info2'</span><span class="token punctuation">,</span>SPLITS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'1000'</span><span class="token punctuation">,</span><span class="token string">'2000'</span><span class="token punctuation">,</span><span class="token string">'3000'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>表分区</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork1029/image-20221109141424396.png" alt="image-20221109141424396"></p><h2 id="3-用java代码，使用kafka-producer-API往kafka-topic中写入数据"><a href="#3-用java代码，使用kafka-producer-API往kafka-topic中写入数据" class="headerlink" title="3. 用java代码，使用kafka producer API往kafka topic中写入数据"></a>3. 用<code>java</code>代码，使用<code>kafka producer API</code>往<code>kafka topic</code>中写入数据</h2><hr><blockquote><p>消息的实体类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 消息发送实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">,</span> String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"userId="</span> <span class="token operator">+</span> userId <span class="token operator">+</span>                <span class="token string">", userName='"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生成这序列化器</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>serialization<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>SerializationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Serializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSerialization</span> <span class="token keyword">implements</span> <span class="token class-name">Serializer</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Integer userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//序列化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>userName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> userName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> length <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerializationException</span><span class="token punctuation">(</span><span class="token string">"数据序列化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生产者</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>producer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>UserSerialization<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>RecordMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Header<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>header<span class="token punctuation">.</span>internals<span class="token punctuation">.</span>RecordHeader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>IntegerSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始链接用到的地址</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span><span class="token string">"lagou121:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> UserSerialization<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装想要发送的消息</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span><span class="token punctuation">(</span>                <span class="token string">"tp_user_01"</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user        <span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主题"</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分区"</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者偏移量"</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-用java代码，使用Kafka-consumer-API从topic中消费数据"><a href="#4-用java代码，使用Kafka-consumer-API从topic中消费数据" class="headerlink" title="4. 用java代码，使用Kafka consumer API从topic中消费数据"></a>4. 用<code>java</code>代码，使用<code>Kafka consumer API</code>从<code>topic</code>中消费数据</h2><hr><blockquote><p>消费者的反序列化器</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>deserializer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Deserializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDeserializer</span> <span class="token keyword">implements</span> <span class="token class-name">Deserializer</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">deserialize</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userId <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userNameLength <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>userNameLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>消费者</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>consumer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>deserializer<span class="token punctuation">.</span>UserDeserializer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecords<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>IntegerDeserializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>IntegerSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"lagou121:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key的反序列化器</span><span class="token comment" spellcheck="true">//        configs.put("key.deserializer",</span><span class="token comment" spellcheck="true">//                "org.apache.kafka.common.serialization.IntegerDeserializer");</span><span class="token comment" spellcheck="true">//// value的反序列化器</span><span class="token comment" spellcheck="true">//        configs.put("value.deserializer",</span><span class="token comment" spellcheck="true">//                "org.apache.kafka.common.serialization.StringDeserializer");</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> UserDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"user_consumer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_OFFSET_RESET_CONFIG<span class="token punctuation">,</span><span class="token string">"earliest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>CLIENT_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"user_consumer_01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">"tp_user_01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费</span><span class="token comment" spellcheck="true">//        while(true){</span><span class="token comment" spellcheck="true">//            ConsumerRecords&lt;Integer, String> consumerRecords = consumer.poll(3_000);</span><span class="token comment" spellcheck="true">//        }</span>        ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> consumerRecords <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>3_000<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumerRecords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-从上面的调度系统中，选择一个调度系统，搭建起来，把之前做的任务调度运行起来。"><a href="#5-从上面的调度系统中，选择一个调度系统，搭建起来，把之前做的任务调度运行起来。" class="headerlink" title="5. 从上面的调度系统中，选择一个调度系统，搭建起来，把之前做的任务调度运行起来。"></a>5. 从上面的调度系统中，选择一个调度系统，搭建起来，把之前做的任务调度运行起来。</h2><hr><blockquote><p>目录</p><p>hive-test-job</p><ul><li><code>hive.hql</code></li><li><code>hive.job</code></li></ul></blockquote><blockquote><p><code>hive.hql</code></p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> dt<span class="token punctuation">,</span>city<span class="token punctuation">,</span>user_num<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> dt <span class="token keyword">order</span> <span class="token keyword">by</span> user_num <span class="token keyword">desc</span><span class="token punctuation">)</span> rn <span class="token keyword">from</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> dt<span class="token punctuation">,</span>city<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> userid<span class="token punctuation">)</span> user_num <span class="token keyword">from</span> ods_user_login_detail <span class="token keyword">group</span> <span class="token keyword">by</span> dt<span class="token punctuation">,</span>city <span class="token punctuation">)</span> <span class="token number">a</span> <span class="token punctuation">)</span><span class="token number">a1</span> <span class="token keyword">where</span> rn <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>hive.job</code></p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">type</span><span class="token operator">=</span>commandcommand<span class="token operator">=</span>$HIVE_HOME<span class="token operator">/</span>bin<span class="token operator">/</span>hive <span class="token operator">-</span><span class="token number">f</span> <span class="token string">"hive.hql"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第六周</title>
      <link href="/2022/10/26/homework1015/"/>
      <url>/2022/10/26/homework1015/</url>
      
        <content type="html"><![CDATA[<h2 id="SparkCore"><a href="#SparkCore" class="headerlink" title="SparkCore"></a>SparkCore</h2><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>sparkcore<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span>DateTime<span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormat<span class="token comment" spellcheck="true">/** * 1. 统计近一周的日活 * 口径: count(distinct userid) */</span>object Adv <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"spark.testing.memory"</span><span class="token punctuation">,</span> <span class="token string">"512000000"</span><span class="token punctuation">)</span>    val sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//读取文件</span>    <span class="token comment" spellcheck="true">//val str: RDD[String] = sc.textFile("hdfs://lagou121:9000/user/hive/warehouse/ods_user_login_detail/dt=2022-10-01")</span>    val str<span class="token operator">:</span> RDD<span class="token punctuation">[</span>String<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"D:\\data2022*.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//</span>    val fields<span class="token operator">:</span> RDD<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>map <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      val fields<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span>      fields    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//需求1：日活   logtime | userid</span>    val adv1RDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> fields<span class="token punctuation">.</span>map <span class="token punctuation">{</span> field <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>     adv1RDD<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token function">getHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//需求2： 城市日活top5 city | logtime | userid</span>    val adv2RDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> fields<span class="token punctuation">.</span>map <span class="token punctuation">{</span> field <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    adv2RDD<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span>day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span>city<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> city <span class="token punctuation">)</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span> day <span class="token punctuation">,</span> <span class="token punctuation">(</span>city <span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">mapValues</span><span class="token punctuation">(</span> buf <span class="token operator">=</span><span class="token operator">></span> buf<span class="token punctuation">.</span>toList<span class="token punctuation">.</span><span class="token function">sortWith</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2 <span class="token operator">></span> _<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkString</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//需求3：次日留存率</span>    <span class="token comment" spellcheck="true">//今日用户登录数</span>    val dayLoginRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> adv1RDD<span class="token punctuation">.</span>distinct<span class="token punctuation">.</span>map <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span> day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    //上日登录用户数</span>    val minusDayRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> adv1RDD<span class="token punctuation">.</span>distinct<span class="token punctuation">.</span>map <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span> day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getMinusHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val dayRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> adv1RDD<span class="token punctuation">.</span>distinct<span class="token punctuation">.</span>map <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span> day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val minusLoginRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> minusDayRDD<span class="token punctuation">.</span><span class="token function">leftOuterJoin</span><span class="token punctuation">(</span>dayRDD<span class="token punctuation">)</span>      <span class="token punctuation">.</span>mapValues <span class="token punctuation">{</span> x <span class="token operator">=</span><span class="token operator">></span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>None<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token function">getPlusHour</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span>    dayLoginRDD<span class="token punctuation">.</span><span class="token function">leftOuterJoin</span><span class="token punctuation">(</span>minusLoginRDD<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span> day<span class="token punctuation">,</span> <span class="token punctuation">(</span> dayCount <span class="token punctuation">,</span> minusDayCount <span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span> day <span class="token punctuation">,</span> dayCount <span class="token punctuation">,</span> minusDayCount<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span>minusDayCount<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> dayCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  def <span class="token function">getHour</span><span class="token punctuation">(</span>str<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token operator">=</span><span class="token punctuation">{</span>    val dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>    val day<span class="token operator">:</span> String <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span>    day  <span class="token punctuation">}</span>  def <span class="token function">getMinusHour</span><span class="token punctuation">(</span>str<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token operator">=</span><span class="token punctuation">{</span>    val dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>    val minusDay<span class="token operator">:</span> String <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span>    minusDay  <span class="token punctuation">}</span>  def <span class="token function">getPlusHour</span><span class="token punctuation">(</span>str<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token operator">=</span><span class="token punctuation">{</span>    val dt<span class="token operator">:</span> DateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> DateTimeFormat<span class="token punctuation">.</span><span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    val plusDay<span class="token operator">:</span> String <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span>    plusDay  <span class="token punctuation">}</span>      sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SparkSql"><a href="#SparkSql" class="headerlink" title="SparkSql"></a>SparkSql</h2><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>sparkSql<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token punctuation">{</span>DataFrame<span class="token punctuation">,</span> Dataset<span class="token punctuation">,</span> SparkSession<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span>DateTimeobject AdvSql <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>userid<span class="token operator">:</span> String<span class="token punctuation">,</span> dt<span class="token operator">:</span> String<span class="token punctuation">,</span>city<span class="token operator">:</span>String<span class="token punctuation">,</span>deviceid<span class="token operator">:</span>String<span class="token punctuation">)</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">.</span>init<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"spark.some.config.option"</span><span class="token punctuation">,</span> <span class="token string">"some-value"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val sc<span class="token operator">=</span>spark<span class="token punctuation">.</span>sparkContext    sc<span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token comment" spellcheck="true">// rdd => ds</span>    val str<span class="token operator">:</span> RDD<span class="token punctuation">[</span>String<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"D:\\data2022*.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  case class Info(userid: String, dt: String,city:String,deviceid:String)</span>    val fields<span class="token operator">:</span> RDD<span class="token punctuation">[</span>Info<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>map <span class="token punctuation">{</span> line <span class="token operator">=</span><span class="token operator">></span>      val fields<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span>      <span class="token function">Info</span><span class="token punctuation">(</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fields</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fields</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    val ds<span class="token operator">:</span> Dataset<span class="token punctuation">[</span>Info<span class="token punctuation">]</span> <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">createDataset</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span>    ds<span class="token punctuation">.</span><span class="token function">createOrReplaceTempView</span><span class="token punctuation">(</span><span class="token string">"ods_user_login_detail"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**    spark.sql(      """        |select        |    dt,        |    count(distinct userid) user_num,        |    count(distinct deviceid) devicenum        |from ods_user_login_detail        |group by dt        |""".stripMargin).show()    println("==================================================")    spark.sql(      """        |select * from (        |    select dt,city,user_num,        |        row_number() over (partition by dt order by user_num desc) rn        |    from (        |        select dt,city,        |            count(distinct userid) user_num        |        from ods_user_login_detail        |        group by dt,city        |    ) a        |)a1        |where        |    rn &lt;= 5        |""".stripMargin).show()    println("==================================================")    **/</span>    spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>      <span class="token string">""</span>"        <span class="token operator">|</span>select dt <span class="token punctuation">,</span> num <span class="token punctuation">,</span> total_num <span class="token punctuation">,</span> num <span class="token operator">/</span> total_num <span class="token function">from</span> <span class="token punctuation">(</span>        <span class="token operator">|</span>    select        <span class="token operator">|</span>    t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>distinct <span class="token keyword">case</span> when t2<span class="token punctuation">.</span>userid is not null then t1<span class="token punctuation">.</span>userid <span class="token keyword">else</span> null end <span class="token punctuation">)</span> num <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>distinct t1<span class="token punctuation">.</span>userid<span class="token punctuation">)</span> total_num        <span class="token operator">|</span>    from ods_user_login_detail t1        <span class="token operator">|</span>    left join ods_user_login_detail t2 on t1<span class="token punctuation">.</span>userid <span class="token operator">=</span> t2<span class="token punctuation">.</span>userid and <span class="token function">date_add</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span>dt        <span class="token operator">|</span>    group by t1<span class="token punctuation">.</span>dt        <span class="token operator">|</span><span class="token punctuation">)</span>tmp        <span class="token operator">|</span><span class="token string">""</span>"<span class="token punctuation">.</span>stripMargin<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  def <span class="token function">getHour</span><span class="token punctuation">(</span>str<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token operator">=</span><span class="token punctuation">{</span>    val dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>    val day<span class="token operator">:</span> String <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span>    day  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第五周</title>
      <link href="/2022/10/02/homework0924/"/>
      <url>/2022/10/02/homework0924/</url>
      
        <content type="html"><![CDATA[<h2 id="1、统计近一周的日活"><a href="#1、统计近一周的日活" class="headerlink" title="1、统计近一周的日活"></a>1、统计近一周的日活</h2><hr><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>     dt<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> userid<span class="token punctuation">)</span> user_num<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> deviceid<span class="token punctuation">)</span> devicenum<span class="token keyword">from</span> ods_user_login_detail <span class="token keyword">group</span> <span class="token keyword">by</span> dt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、统计近一周每天top-5-设备日活的城市名称，及日活数"><a href="#2、统计近一周每天top-5-设备日活的城市名称，及日活数" class="headerlink" title="2、统计近一周每天top 5 设备日活的城市名称，及日活数"></a>2、统计近一周每天top 5 设备日活的城市名称，及日活数</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> dt<span class="token punctuation">,</span>city<span class="token punctuation">,</span>user_num<span class="token punctuation">,</span>        row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> dt <span class="token keyword">order</span> <span class="token keyword">by</span> user_num <span class="token keyword">desc</span><span class="token punctuation">)</span> rn    <span class="token keyword">from</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> dt<span class="token punctuation">,</span>city<span class="token punctuation">,</span>            <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> userid<span class="token punctuation">)</span> user_num           <span class="token keyword">from</span> ods_user_login_detail        <span class="token keyword">group</span> <span class="token keyword">by</span> dt<span class="token punctuation">,</span>city    <span class="token punctuation">)</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token number">a1</span><span class="token keyword">where</span>     rn <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、统计近一周的活跃的次日留存率"><a href="#3、统计近一周的活跃的次日留存率" class="headerlink" title="3、统计近一周的活跃的次日留存率"></a>3、统计近一周的活跃的次日留存率</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> dt <span class="token punctuation">,</span> num <span class="token operator">/</span> total_num <span class="token keyword">from</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>     t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> t2<span class="token punctuation">.</span>userid <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">then</span> t1<span class="token punctuation">.</span>userid <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> num <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> t1<span class="token punctuation">.</span>userid<span class="token punctuation">)</span> total_num    <span class="token keyword">from</span> ods_user_login_detail t1    <span class="token keyword">left</span> <span class="token keyword">join</span> ods_user_login_detail t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>userid <span class="token operator">=</span> t2<span class="token punctuation">.</span>userid <span class="token operator">and</span> date_add<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span>dt    <span class="token keyword">group</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>dt<span class="token punctuation">)</span>tmp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2022/09/26/hadoop-yi/"/>
      <url>/2022/09/26/hadoop-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本篇文章仅供参考</p></blockquote><hr><h2 id="1、Hadoop-简介"><a href="#1、Hadoop-简介" class="headerlink" title="1、Hadoop 简介"></a>1、Hadoop 简介</h2><hr><h3 id="1-1、大数据简介"><a href="#1-1、大数据简介" class="headerlink" title="1.1、大数据简介"></a>1.1、大数据简介</h3><blockquote><p>大数据概念：适合大数据的<strong>分布式存储计算平台</strong></p><p>大数据特点：</p><ul><li>Volume：大量</li><li>Veiocity：高速</li><li>Variety：多样</li><li>Veracity：真实</li><li>Value：低价值</li></ul></blockquote><h3 id="1-1、Hadoop"><a href="#1-1、Hadoop" class="headerlink" title="1.1、Hadoop"></a>1.1、Hadoop</h3><blockquote><p>特点：</p><ol><li>扩容能力</li><li>低成本</li><li>高效率</li><li>可靠性</li></ol><p>版本：</p><ul><li>Apache Hadoop ：开源免费</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据,Hadoop,HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第四周</title>
      <link href="/2022/09/21/homework0917/"/>
      <url>/2022/09/21/homework0917/</url>
      
        <content type="html"><![CDATA[<h2 id="1、JVM类加载机制"><a href="#1、JVM类加载机制" class="headerlink" title="1、JVM类加载机制"></a>1、<code>JVM</code>类加载机制</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220921094712161.png" alt="image-20220921094712161"></p><hr><blockquote><p>概念：一种跨语言的平台，是一种规范，目前支持 100+ 种语言，只要能搞成<code>class</code>文件，就在<code>JVM</code> 上运行。所以只跟<code>class</code>格式文件有关，与 <code>JAVA</code>无关</p></blockquote><h3 id="1-1、常见的JVM实现"><a href="#1-1、常见的JVM实现" class="headerlink" title="1.1、常见的JVM实现"></a>1.1、常见的<code>JVM</code>实现</h3><blockquote><ol><li><code>HotSpot</code>：<code>oracle</code>官方实现的</li><li><code>Jrokit</code>：<code>BEA</code> ，曾经号称世界最快的<code>JVM</code>，后被<code>oracle</code>收购，与<code>HotSpot</code>合并</li><li><code>J9</code>：<code>IBM</code>实现</li><li><code>MicroSoft VM </code>：微软实现</li><li><code>TaoBaoVM</code>：淘宝实现，<code>hotSpot</code>深度定制版</li><li><code>LiqiudVM</code>：直接针对硬件</li><li><code>azul zing</code>：最新垃圾回收的业界标杆，速度非常快，就是很贵！！</li><li>… ….</li></ol></blockquote><h3 id="1-2、类加载-初始化"><a href="#1-2、类加载-初始化" class="headerlink" title="1.2、类加载-初始化"></a>1.2、类加载-初始化</h3><blockquote><p>双亲委派？为啥用双亲委派？</p><ol><li>主要为了安全！</li><li>防止资源浪费</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220921173601269.png" alt="image-20220921173601269"></p><h4 id="1-2-1、loading（加载）"><a href="#1-2-1、loading（加载）" class="headerlink" title="1.2.1、loading（加载）"></a>1.2.1、loading（加载）</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220921155712817.png" alt="image-20220921155712817"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220921160905374.png" alt="image-20220921160905374"></p><blockquote><p> <strong>触发类加载</strong></p><p><code>JVM</code>是<code>lazyloading</code>模式，并没有规定什么时候进行加载，但是严格规定了什么时候进行初始化</p><ol><li>new  , getstatic , putstatic invokestatic 指令， 访问final 变量除外</li><li>java.lang.reflect 对类进行反射调用</li><li>初始化子类的时候，父类先进性初始化</li><li>虚拟机启动的时候，被执行的主类必须进行初始化</li><li>动态语言支持java.lang.invoke.MethodHandle 解析的结果为REF_getstatic , REF_putstatic , REF_invokestatic 的方法句柄时，该类必须进行初始化</li></ol></blockquote><h4 id="1-2-2、Linking（链接）"><a href="#1-2-2、Linking（链接）" class="headerlink" title="1.2.2、Linking（链接）"></a>1.2.2、Linking（链接）</h4><h5 id="1-2-2-1、Verification（校验文件）"><a href="#1-2-2-1、Verification（校验文件）" class="headerlink" title="1.2.2.1、Verification（校验文件）"></a>1.2.2.1、Verification（校验文件）</h5><blockquote><p>验证文件是否复合<code>JVM</code>规定</p></blockquote><h5 id="1-2-2-2、Preparation（class-gt-静态变量赋默认值）"><a href="#1-2-2-2、Preparation（class-gt-静态变量赋默认值）" class="headerlink" title="1.2.2.2、Preparation（class -> 静态变量赋默认值）"></a>1.2.2.2、Preparation（class -&gt; 静态变量赋默认值）</h5><blockquote><p> 静态成员变量赋默认值</p></blockquote><h5 id="1-2-2-3、Resoultion（符号引用-gt-变为直接使用的地址）"><a href="#1-2-2-3、Resoultion（符号引用-gt-变为直接使用的地址）" class="headerlink" title="1.2.2.3、Resoultion（符号引用 -> 变为直接使用的地址）"></a>1.2.2.3、Resoultion（符号引用 -&gt; 变为直接使用的地址）</h5><blockquote><ol><li><p>将类、方法、属性等符号引用解析为直接引用</p><p>常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用</p></li></ol></blockquote><h4 id="1-2-3、Initializing（静态变量赋初始值）"><a href="#1-2-3、Initializing（静态变量赋初始值）" class="headerlink" title="1.2.3、Initializing（静态变量赋初始值）"></a>1.2.3、Initializing（静态变量赋初始值）</h4><blockquote><p>调用类初始化代码</p></blockquote><h2 id="2、java-GC垃圾收集算法"><a href="#2、java-GC垃圾收集算法" class="headerlink" title="2、java GC垃圾收集算法"></a>2、<code>java GC</code>垃圾收集算法</h2><hr><blockquote><p>garbage （垃圾）：没有任何引用指向的一个对象或者一堆对象（一堆对象之间循环引用）</p><p>定位垃圾：</p><ol><li><code>refence count</code>（引用计数）：在对象上标记处这个对象被引用的个数，一堆垃圾，引用计数会失效</li><li><code>Root Searching</code>（根搜索算法）：通过根对象找不到的，都算是垃圾</li><li><code>GC Roots</code>：线程栈变量 ， 静态变量 ， 常量池 ， <code>JNI指针</code></li></ol></blockquote><h3 id="2-1、GC-垃圾收集算法"><a href="#2-1、GC-垃圾收集算法" class="headerlink" title="2.1、GC 垃圾收集算法"></a>2.1、<code>GC</code> 垃圾收集算法</h3><h4 id="2-1-1、Mark-Sweep（标记清除）"><a href="#2-1-1、Mark-Sweep（标记清除）" class="headerlink" title="2.1.1、Mark-Sweep（标记清除）"></a>2.1.1、Mark-Sweep（标记清除）</h4><blockquote><p>缺点：位置不连续，会产生碎片</p></blockquote><h4 id="2-1-2、Copying（拷贝）"><a href="#2-1-2、Copying（拷贝）" class="headerlink" title="2.1.2、Copying（拷贝）"></a>2.1.2、Copying（拷贝）</h4><blockquote><p>没有碎片，但是会浪费空间</p></blockquote><h4 id="2-1-3、Mark-Compact（标记压缩）"><a href="#2-1-3、Mark-Compact（标记压缩）" class="headerlink" title="2.1.3、Mark-Compact（标记压缩）"></a>2.1.3、Mark-Compact（标记压缩）</h4><blockquote><p>没有碎片，效率比copy偏低</p></blockquote><h3 id="2-2、JVM-分代算法"><a href="#2-2、JVM-分代算法" class="headerlink" title="2.2、JVM 分代算法"></a>2.2、<code>JVM</code> 分代算法</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220923142040615.png"></p><blockquote><p><code>new</code> / <code>young</code> ： 新生代 ，`new = Eden + survivor(S0) + survivor(S1) [8:1:1] ``</p><ol><li>``YGC<code>之后，大多数对象会被回收，活着的对象进入 </code>s0`</li><li>再次<code>YGC</code> , <code>Eden </code>和 <code>s0 </code>活着的对象进入<code> s1</code></li><li>再次<code>YGC</code>，活着的对象进入<code>S0</code> </li><li>多次<code>YGC</code>之后一直活着的对象进入 <code>old区</code></li></ol><p><code>old</code>：老生代(装顽固分子)</p><ol><li>老年代满了触发 <code>FGC</code>(<code>FULL GC</code> ) , 触发 <code>STW</code>(内存冻结、应用程序停顿)</li></ol><p><code>PermGen</code> :永久代（1.7） =&gt; <code>MetaSpace </code>：元数据区（1.8+）</p><p>永久代和元数据都是装 Class，永久代可以指定大小限制；元数据区可以设置也可以不设置，无上限（受</p><p>限于物理内存）</p></blockquote><h3 id="2-3、垃圾回收器"><a href="#2-3、垃圾回收器" class="headerlink" title="2.3、垃圾回收器"></a>2.3、垃圾回收器</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220923154704943.png"></p><ol><li><p><strong>Serial 年轻代</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220923160029305.png" alt="image-20220923160029305"></p><blockquote><p>串行形式，会触发<code>STW</code></p></blockquote></li><li><p><strong>Parallel Scavenge 年轻代</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220923160250385.png"></p><blockquote><p>并行形式，会触发<code>STW</code></p></blockquote></li><li><p>ParNew 年轻代</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0917/image-20220923160616256.png"></p><blockquote><p> 配合<code>CMS</code>的并行回收</p></blockquote></li><li><p><strong>Serial Old老年代</strong></p></li><li><p><strong>ParallelOld老年代</strong></p></li><li><p>ConcurrentMarkSweep老年代</p><blockquote><p>并发的，垃圾回收与程序同时进行，降低<code>STW</code>的时间（200ms）,<code>java 8</code>已经过时</p></blockquote></li><li><p>G1(10ms)</p></li><li><p>ZGC(1ms)</p></li><li><p>Shenandoah</p></li><li><p>Epsilon</p></li></ol><h2 id="3、JAVA的并发容器"><a href="#3、JAVA的并发容器" class="headerlink" title="3、JAVA的并发容器"></a>3、JAVA的并发容器</h2><hr><blockquote><p>概念：<code>JDK5.0</code>之后开始提供多种并发类容器替代同步类容器从而改善性能。同步类容器都是串行化的，</p><p>虽然他们实现了线程安全，但是严重降低了并发性（每次只能一个线程访问），在多线环境时，严重降</p><p>低了应用程序的吞吐量</p></blockquote><h3 id="3-1、并发容器"><a href="#3-1、并发容器" class="headerlink" title="3.1、并发容器"></a>3.1、并发容器</h3><blockquote><ul><li>ConcurrentHashMap：线程安全的HashMap</li><li>CopyOnWriteArrayList：线程安全的List</li><li>BlockingQueue：这是一个接口，表示阻塞队列，非常适合用于作为数据共享的通道</li><li>ConcurrentLinkedQueue：高效的非阻塞并发队列，使用链表实现。可以看做一个线程安全的LinkedList。</li><li>ConcurrentSkipList：是一个Map。使用跳表的数据结构进行快速查找。</li></ul></blockquote><h4 id="3-1-1、CopyOnWriteArrayList"><a href="#3-1-1、CopyOnWriteArrayList" class="headerlink" title="3.1.1、CopyOnWriteArrayList"></a>3.1.1、CopyOnWriteArrayList</h4><blockquote><p><code>ArrayList </code>线程不安全，多线程同时修改，可能会丢失数据</p></blockquote><blockquote><p><code>CopyOnWriteArrayList </code>类的所有可变操作（add，set 等等）都是通过创建底层数组的新副本来实现</p><p>的。<strong>当 List 需要被修改的时候，我并不修改原有内容，而是对原有数据进行一次复制，将修改的内容写</strong></p><p><strong>入副本</strong>。写完之后，再将修改完的副本替换原来的数据，这样就可以保证写操作不会影响读操作</p><p>了。</p><p>从<code>CopyOnWriteArrayList</code>的名字就能看出 <code>CopyOnWriteArrayList</code> 是满足 <code>CopyOnWrite</code> 的。所谓 </p><p><code>CopyOnWrite</code> 也就是说：在计算机，如果你想要对一块内存进行修改时，我们不在原有内存块中进行写</p><p>操作，而是将内存拷贝一份，在新的内存中进行写操作，写完之后呢，就将指向原来内存指针指向新的</p><p>内存，原来的内存就可以被回收掉了。</p></blockquote><blockquote><p>读取操作没有任何同步控制和锁操作，理由就是内部数组 <code>array</code> 不会发生修改，只会被另外一个 </p><p><code>array</code> 替换，因此可以保证数据安全。</p></blockquote><blockquote><p><code>CopyOnWriteArrayList</code> 写入操作 <code>add()</code>方法在添加集合的时候加了锁，保证了同步，避免了多线程写</p><p>的时候会 copy 出多个副本出来。</p></blockquote><h4 id="3-1-2、ConcurrentLinkedQueue"><a href="#3-1-2、ConcurrentLinkedQueue" class="headerlink" title="3.1.2、ConcurrentLinkedQueue"></a>3.1.2、ConcurrentLinkedQueue</h4><blockquote><p>Java 提供的线程安全的 <code>Queue</code> 可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是 </p><p><code>BlockingQueue</code>，非阻塞队列的典型例子是 <code>ConcurrentLinkedQueue</code>，在实际应用中要根据实际需要</p><p>选用阻塞队列或者非阻塞队列。 阻<strong>塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现</strong>。</p></blockquote><h4 id="3-1-3、BlockingQueue-接口"><a href="#3-1-3、BlockingQueue-接口" class="headerlink" title="3.1.3、BlockingQueue(接口)"></a>3.1.3、BlockingQueue(接口)</h4><blockquote><p>阻塞队列（<code>BlockingQueue</code>）被广泛使用在“生产者-消费者”问题中，其原因是 <code>BlockingQueue</code> 提供了</p><p>可阻塞的插入和移除的方法。当队列容器已满，生产者线程会被阻塞，直到队列未满；当队列容器为空</p><p>时，消费者线程会被阻塞，直至队列非空时为止。</p></blockquote><blockquote><p><strong>ArrayBlockingQueue</strong></p><p><code>ArrayBlockingQueue</code> 是 <code>BlockingQueue</code> 接口的有界队列实现类，底层采用数组来实现。</p><p><code>ArrayBlockingQueue</code> 一旦创建，容量不能改变。其并发控制采用可重入锁 <code>ReentrantLock</code> ，不管是</p><p>插入操作还是读取操作，都需要获取到锁才能进行操作。当队列容量满时，尝试将元素放入队列将导致</p><p>操作阻塞;尝试从一个空队列中取一个元素也会同样阻塞。</p></blockquote><blockquote><p><strong>LinkedBlockingQueue</strong></p><p><code>LinkedBlockingQueue</code> 底层基于单向链表实现的阻塞队列，可以当做无界队列也可以当做有界队列来</p><p>使用，同样满足 FIFO 的特性，与<code>ArrayBlockingQueue</code>相比起来具有更高的吞吐量，为了防止 </p><p><code>LinkedBlockingQueue</code> 容量迅速增，损耗大量内存。通常在创建 <code>LinkedBlockingQueue</code> 对象时，会</p><p>指定其大小，如果未指定，容量等于 <code>Integer.MAX_VALUE</code> 。</p></blockquote><blockquote><p><strong>PriorityBlockingQueue</strong></p><p><code>PriorityBlockingQueue</code> 是一个支持优先级的无界阻塞队列。默认情况下元素采用自然顺序进行排</p><p>序，也可以通过自定义类实现 <code>compareTo() </code>方法来指定元素排序规则，或者初始化时通过构造器参数 </p><p><code>Comparator</code> 来指定排序规则。</p><p><code>PriorityBlockingQueue</code> 并发控制采用的是可重入锁 <code>ReentrantLock</code>，队列为无界队列</p><p>（<code>ArrayBlockingQueue</code> 是有界队列，<code>LinkedBlockingQueue</code> 也可以通过在构造函数中传入 </p><p>capacity 指定队列最大的容量，但是 <code>PriorityBlockingQueue </code>只能指定初始的队列大小，后面插入元</p><p>素的时候，如果空间不够的话会自动扩容）。</p><p>简单地说，它就是 <code>PriorityQueue</code> 的线程安全版本。不可以插入 null 值，同时，插入队列的对象必须</p><p>是可比较大小的（<code>comparable</code>），否则报 <code>ClassCastException</code> 异常。它的插入操作 <code>put </code>方法不会 </p><p><code>block</code>，因为它是无界队列（<code>take</code> 方法在队列为空的时候会阻塞）。</p></blockquote><h4 id="3-1-4、CopyOnWriteArrayList"><a href="#3-1-4、CopyOnWriteArrayList" class="headerlink" title="3.1.4、CopyOnWriteArrayList"></a>3.1.4、CopyOnWriteArrayList</h4><blockquote><p>读时没影响不加锁，写时加锁，copy一个新list，然后扩展一个新元素，老引用指向新的。</p></blockquote><h4 id="3-1-5、CopyOnWriteArraySet"><a href="#3-1-5、CopyOnWriteArraySet" class="headerlink" title="3.1.5、CopyOnWriteArraySet"></a>3.1.5、CopyOnWriteArraySet</h4><blockquote><p>底层是数组，读时没影响不加锁，写时加锁，copy一个新list，然后扩展一个新元素，老引用指向新的。</p></blockquote><h4 id="3-1-6、ConcurrentSkipListSet"><a href="#3-1-6、ConcurrentSkipListSet" class="headerlink" title="3.1.6、ConcurrentSkipListSet"></a>3.1.6、ConcurrentSkipListSet</h4><blockquote><p>ConcurrentSkipListSet是线程安全的有序的哈希表,其底层用的是跳表，其特点主要在有序上面。</p></blockquote><h4 id="3-1-7、ConcurrentHashMap"><a href="#3-1-7、ConcurrentHashMap" class="headerlink" title="3.1.7、ConcurrentHashMap"></a>3.1.7、ConcurrentHashMap</h4><blockquote><p>ConcurrentHashMap底层用的分段锁，所以其在效率上会有所提升，主要体现在读上面。由于它往里插的时候内部做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的cas的判断，所以他往里插的数据相比HashTable还要低一点。</p></blockquote><h4 id="3-1-8、ConcurrentSkipListMap"><a href="#3-1-8、ConcurrentSkipListMap" class="headerlink" title="3.1.8、ConcurrentSkipListMap"></a>3.1.8、ConcurrentSkipListMap</h4><blockquote><p>ConcurrentSkipListMap是线程安全的有序的哈希表,其底层用的是跳表。其特点主要在有序上面，效率相较ConcurrentHashMap略低。</p></blockquote><h2 id="4、Hive-和-Hbase-的区别"><a href="#4、Hive-和-Hbase-的区别" class="headerlink" title="4、Hive 和 Hbase 的区别"></a>4、Hive 和 Hbase 的区别</h2><hr><blockquote><p><strong>使用方面的区别</strong></p><p>HIve：</p><ul><li>Hive 是一个构建在Hadoop 平台上的数据仓库</li><li>HIve数据存放在HDFS 上</li><li>HIve 数据查询最终转化为MR程序</li></ul><p>Hbase：</p><ul><li>Hbase是一个基于Hadoop平台的NoSql 数据库</li><li>Hbase数据存放在哎Hadoop 上</li><li>Hbase是基于数据库本身的实时查询，并不是运行MR</li></ul></blockquote><blockquote><p>特点的区别</p><p>Hive：</p><ul><li>Hive方便熟悉SQL 的人，快速上手大数据分析</li><li>Hive默认计算殷勤是MR，所以查询时间比较长</li><li>Hive底层计算引擎也可以更换为Spark/Tez</li><li>Hive中的表是逻辑表，只是表的定义，本身不存储和计算，完全依赖于HDFS/MR</li></ul><p>Hbase：</p><ul><li>Hbase 本身不支持SQL ，需要通过集成Phoenix / Hive 才支持SQL</li><li>Hbase基于以及索引Rowkey进行数据查询，所以速度比较快</li><li>Hbase底层基于Scan进行数据扫描，而不是MR</li><li>Hbase中的表是物理表，有独立的物理数据结构，查询时可以将数据加载到内存，提升后续的查询效率</li></ul></blockquote><blockquote><p>局限性的区别</p><p>Hive：</p><ul><li>Hive 目前仅仅支持ORCFile文件格式的数据更新操作，还需要提前开启事务支持</li><li>HIve的运行依赖HDFS进行数据存储，默认依赖MR进行数据计算</li></ul><p>Hbase：</p><ul><li>Hbase本身不支持SQL，需要通过集成Phoenid</li><li>Hbase 的玉兴依赖ZK提供协调服务（配置服务、维护元数据、命名空间服务），依赖HDFS数据存储</li></ul></blockquote><blockquote><p>应用场景的区别</p><p>Hive：</p><ul><li>Hive主要用于构建基于Hadoop平台的数据仓库，离线处理海量数据</li><li>Hive提供完整的SQL 实现，一般用于历史数据的分析、挖掘</li></ul><p>Hbase：</p><ul><li>Hbase适合用于大数据实时查询、海量数据的存储</li><li>Hbse是近实时数据库，支持线上业务的实时查询</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第三周</title>
      <link href="/2022/09/13/homework0910/"/>
      <url>/2022/09/13/homework0910/</url>
      
        <content type="html"><![CDATA[<h2 id="1、异常的常见分类"><a href="#1、异常的常见分类" class="headerlink" title="1、异常的常见分类"></a>1、异常的常见分类</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0910/image-20220913141302369.png" alt="image-20220913141302369"></p><h3 id="1-1、ArithmeticException（算数异常）"><a href="#1-1、ArithmeticException（算数异常）" class="headerlink" title="1.1、ArithmeticException（算数异常）"></a>1.1、ArithmeticException（算数异常）</h3><blockquote><p>算术异常，发生在数字的算术运算时的异常，如一个数字除以 0 就会报这个错。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">double</span> n <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> n <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> 异常<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2、ArrayIndexOutofBoundsException（数组下标越界异常）"><a href="#1-2、ArrayIndexOutofBoundsException（数组下标越界异常）" class="headerlink" title="1.2、ArrayIndexOutofBoundsException（数组下标越界异常）"></a>1.2、ArrayIndexOutofBoundsException（数组下标越界异常）</h3><blockquote><p>数组下标越界异常，发生在访问数组时的异常，如访问一个数组不存在的下标元素</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3、NullPointerException（空指针异常）"><a href="#1-3、NullPointerException（空指针异常）" class="headerlink" title="1.3、NullPointerException（空指针异常）"></a>1.3、NullPointerException（空指针异常）</h3><blockquote><p>空指针异常，操作一个 null 对象的方法或属性时会抛出这个异常</p></blockquote><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> null<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4、ClassCastException（类型转换异常）"><a href="#1-4、ClassCastException（类型转换异常）" class="headerlink" title="1.4、ClassCastException（类型转换异常）"></a>1.4、ClassCastException（类型转换异常）</h3><blockquote><p>类找不到异常，<code>Java</code>开发中经常遇到，即在类路径下不能加载指定的类。</p></blockquote><blockquote><ul><li>对使用的类没有导包</li><li>导包的类不存在</li></ul></blockquote><h3 id="1-5、NumberFormatException（数字格式正常）"><a href="#1-5、NumberFormatException（数字格式正常）" class="headerlink" title="1.5、NumberFormatException（数字格式正常）"></a>1.5、NumberFormatException（数字格式正常）</h3><blockquote><p>类转换异常，将一个不是该类的实例转换成这个类就会抛出这个异常。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、java-垃圾收集器"><a href="#2、java-垃圾收集器" class="headerlink" title="2、java 垃圾收集器"></a>2、java 垃圾收集器</h2><hr><h3 id="2-1、Serial-收集器"><a href="#2-1、Serial-收集器" class="headerlink" title="2.1、Serial 收集器"></a>2.1、Serial 收集器</h3><blockquote><p>垃圾收集器的原始实现，使用单线程。当垃圾收集器运行时，会停止应用程序（通常称为<code>stop the </code></p><p><code>world</code>事件）。适用于能够承受短暂停顿的应用程序。该垃圾收集器占用内存空间比较小，因这是嵌</p><p>入式应用程序的首选垃圾收集器类型。在运行时使用以下命令启用该垃圾收集器：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseSerialGC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2、Parallel-收集器"><a href="#2-2、Parallel-收集器" class="headerlink" title="2.2、Parallel 收集器"></a>2.2、Parallel 收集器</h3><blockquote><p>像 <code>Serial </code>收集器一样，<code>Parallel </code>收集器也使用<code>stop the world</code>方法。这意味着，当垃圾收集器运行</p><p>时，应用程序线程会停止。但是不同的是，<code>Parallel</code> 收集器运行时有多个线程执行垃圾收集操作。这</p><p>种类型的垃圾收集器适用于在多线程和多处理器环境中运行中到大型数据集的应用程序。</p></blockquote><blockquote><p>这是<code> JVM</code> 中的<strong>默认垃圾收集器</strong>，也被称为 <em>吞吐量收集器</em> 。使用该垃圾收集器时可以通过使用各种合适的 </p><p><code>JVM</code> 参数进行调优，例如<strong>吞吐量</strong>、<strong>暂停时间</strong>、<strong>线程数</strong>和<strong>内存占用</strong>。如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>ParallelGCThreads<span class="token operator">=</span><span class="token operator">&lt;</span>N<span class="token operator">></span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxGCPauseMillis<span class="token operator">=</span><span class="token operator">&lt;</span>N<span class="token operator">></span><span class="token operator">-</span>XX<span class="token operator">:</span>GCTimeRatio<span class="token operator">=</span><span class="token operator">&lt;</span>N<span class="token operator">></span><span class="token operator">-</span>Xmx<span class="token operator">&lt;</span>N<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Parallel 收集器</code>可以使用该命令显式启用： <code>java -XX:+UseParallelGC</code> 。使用这个命令，指定在新</p><p>生代中通过多个线程进行垃圾回收，而老年代中的垃圾收集和内存压缩仍使用单个线程完成的。</p><p>还有一个版本的的 <code>Parallel 收集器</code>叫做 <code>Parallel Old GC</code>，它对新生代和老年代都使用多线程，启</p><p>用命令如下：</p><p><code>$ java -XX:+UseParallelOldGC</code></p></blockquote><h3 id="2-3、Concurrent-Mark-Sweep（CMS）收集器"><a href="#2-3、Concurrent-Mark-Sweep（CMS）收集器" class="headerlink" title="2.3、Concurrent Mark Sweep（CMS）收集器"></a>2.3、Concurrent Mark Sweep（CMS）收集器</h3><blockquote><p><code>Concurrent Mark Sweep（CMS）垃圾收集器</code>与应用程序<strong>并行运行</strong>。对于新生代和老年代都使用了多线</p><p>程。在 <code>CMS 垃圾收集器</code>删除无用对象后，不会对存活对象进行内存压缩。该垃圾收集器和应用程序并行</p><p>运行，会降低应用程序的响应时间，<strong>适用于停顿时间较短的应用程序</strong>。<strong>这个收集器在 Java8 已过时</strong>，<strong>并</strong></p><p><strong>在 Java14 中被移除</strong>。如果你仍在使用有这个垃圾收集器的 Java 版本，可以使用如下命令启用：</p><p><code>$ java -XX:+UseConcMarkSweepGC</code></p><p>在 <code>CMS 垃圾收集器</code>使用过程中，<strong>应用程序将暂停两次。</strong>首次暂停发生在标记可直接访问的存活对象时，</p><p>这个暂停被称为 初始标记 。第二次暂停发生在 CMS 收集器结束时期，来修正在并发标记过程中，应用</p><p>程序线程在 <code>CMS 垃圾回收完成后</code>更新对象时被遗漏的对象。这就是所谓的 重新标记 。</p></blockquote><h3 id="2-4、G1-收集器"><a href="#2-4、G1-收集器" class="headerlink" title="2.4、G1 收集器"></a>2.4、G1 收集器</h3><blockquote><p><code>G1 垃圾收集器</code>旨在替代<code> GMS</code>。<code>G1 垃圾收集器</code><strong>具备并行、并发以及增量压缩，且暂停时间较短</strong>。与 </p><p><code>CMS 收集器</code>使用的内存布局不同，<code>G1 收集器</code>将堆内存划分为大小相同的区域，通过多个线程触发全</p><p>局标记阶段。标记阶段完成后，G1 知道哪个区域可能大部分是空的，并首选该区域作为清除/删除阶</p><p>段。</p><p>在 <code>G1 收集器中</code>，一个对象如果大小超过半个区域容量会被认为是一个“大对象” 。这些对象被放置在老年</p><p>代中，在一个被称为<code>humongous region</code>的区域中。 启用 <code>G1 收集器的</code>命令如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseG1GC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5、Epsilon-收集器"><a href="#2-5、Epsilon-收集器" class="headerlink" title="2.5、Epsilon 收集器"></a>2.5、Epsilon 收集器</h3><blockquote><p>该垃圾收集器是在 Java11 中引入的，是一个 no-op （无操作）收集器。它不做任何实际的内存回收，只</p><p>负责管理内存分配。<code>Epsilon</code> 只在当你知道应用程序的确切内存占用情况并且不需要垃圾回收时使用。</p><p>启用命令如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UnlockExperimentalVMOptions <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseEpsilonGC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6、Shenandoah-收集器"><a href="#2-6、Shenandoah-收集器" class="headerlink" title="2.6、Shenandoah 收集器"></a>2.6、Shenandoah 收集器</h3><blockquote><p><code>Shenandoah </code>是在 JDK12 中引入的，是一种 CPU 密集型垃圾收集器。它会进行<strong>内存压缩</strong>，立即删除无用</p><p>对象并释放操作系统的空间。所有的这一切与应用程序线程并行发生。启用命令如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UnlockExperimentalVMOptions <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseShenandoahGC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7、ZGC-收集器"><a href="#2-7、ZGC-收集器" class="headerlink" title="2.7、ZGC 收集器"></a>2.7、ZGC 收集器</h3><blockquote><p><code>ZGC</code> 为<strong>低延迟需要和大量堆空间使用而设计</strong>，允许当垃圾回收器运行时 Java 应用程序继续运行。</p><p><code>ZGC 收集器</code>在 <code>JDK11</code> 引入，在<code> JDK12</code> 改进。在 <code>JDK15</code>，<code>ZGC</code> 和 <code>Shenandoah </code>都被移出了实验</p><p>阶段。启用 <code>ZGC 收集器</code>使用如下命令：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UnlockExperimentalVMOptions <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseZGC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、列举常见的设计模式及原理？"><a href="#4、列举常见的设计模式及原理？" class="headerlink" title="4、列举常见的设计模式及原理？"></a>4、列举常见的设计模式及原理？</h2><hr><blockquote><p> 创建者模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0910/image-20220913160848939.png" alt="image-20220913160848939"></p><blockquote><p>结构型模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0910/image-20220913160924544.png" alt="image-20220913160924544"></p><blockquote><p>行为型模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0910/image-20220913160958954.png" alt="image-20220913160958954"></p><h3 id="4-1、单例模式"><a href="#4-1、单例模式" class="headerlink" title="4.1、单例模式"></a>4.1、单例模式</h3><blockquote><p>单例模式属于创建型模式，解决某个类频繁的创建与销毁。该模式保证了其对象在<code>JVM</code>中只有一个实例</p><p>对象存在。必须保证私有化构造函数，只能有一个实例对象存在。</p><p>优点：</p><ol><li>减少<code>new</code>关键字的使用，降低系统内存的使用频率，同时减轻<code>GC</code>工作</li><li>避免了资源的多重使用</li></ol><p>缺点：</p><ol><li>不可继承，没有接口。</li></ol></blockquote><h4 id="4-1-1、饿汉式"><a href="#4-1-1、饿汉式" class="headerlink" title="4.1.1、饿汉式"></a>4.1.1、饿汉式</h4><blockquote><ul><li><p>优点：没有加锁同步，执行效率高</p></li><li><p>缺点：当类加载时就初始化，没有懒加载，浪费内存。通过<code>classloader 机制</code>避免了多线程的同步</p><p>问题</p></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungrySingleton hSingleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungrySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hSingleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2、懒汉式"><a href="#4-1-2、懒汉式" class="headerlink" title="4.1.2、懒汉式"></a>4.1.2、懒汉式</h4><blockquote><p>实现方式（一）</p><ul><li>优点：实现懒加载，实例化对象是在调用<code>getInstance()</code>后</li><li>缺点：没有加锁 <code>synchronized</code>，多线程下使用存在问题</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现方式（二）</p><ul><li>改进：增加 <code>synchronized</code> 关键字，解决多线程问题</li><li>不足：<code>synchronized</code>锁住了这个对象，每次调用<code>getInstance()</code>都会对对象上锁，这样大大降低了性能，事实上我们只有在第一次<code>instance</code>为空时才需要加锁</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncLazySingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SyncLazySingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SyncLazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SyncLazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncLazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现方式（三）</p><ul><li><p>改进：对<code>instance</code>做了判断，只有当<code>instance</code>为空时才对对象加锁，提升性能</p></li><li><p>不足：依然存在小点问题（无序写入问题），例如：</p><ol><li><p><code>线程1</code>、<code>线程2</code>进入<code>getInstance()</code></p></li><li><p><code>线程1</code>首先进入<code>synchronized</code>线程同步，线程2等待线程1执行完成</p></li><li><p><code>线程1</code>判断<code>instance</code>为空则分配地址内存空间并实例化该类对象</p></li><li><p><code>线程1</code>执行完成退出</p></li><li><p><code>线程2</code>进入<code>synchronized</code>同步，此时<code>instance</code>已被线程1实例化，<code>insatnce</code>不为空，则</p><p>返回<code>线程1</code>创建的<code>instance</code>实例。</p></li></ol></li><li><p>由于<code>JVM</code>无序写入问题，导致线程2有可能返回<code>instance == null</code></p></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncLazySingleton2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SyncLazySingleton2 instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SyncLazySingleton2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SyncLazySingleton2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncLazySingleton2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncLazySingleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3、静态内部类"><a href="#4-1-3、静态内部类" class="headerlink" title="4.1.3、静态内部类"></a>4.1.3、静态内部类</h4><blockquote><ul><li><p>优点：懒加载策略，线程安全。利用<code>classloader</code>加载机制实现初始化时只有一个线程，当</p><p><code>InnerSingleton</code>被加载时，<code>instance</code>不一定被初始化，应为没有调用<code>SingleFactory</code>没</p><p>有被主动调用</p></li><li><p>缺点：如果在构造函数中抛出异常，则将得不到实例</p></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleFactory</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> InnerSingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InnerSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleFactory<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、工厂模式"><a href="#4-2、工厂模式" class="headerlink" title="4.2、工厂模式"></a>4.2、工厂模式</h3><blockquote><p>特点：</p><ul><li>提供一种创建对象的最佳方式，在创建对象时不提供对外暴露创建逻辑，并且通过一个共同的接口来指向新创建的对象</li><li>定义一个创建对象的接口，让子类来决定实例化哪一个具体的工厂类，延迟到子类去执行</li><li>主要解决选择接口的问题</li><li>扩展性高，只增加相应工厂类即可，知道名称即可创建对象，屏蔽具体的实现，调用者只关心接口</li><li>增加需求时，需要增加具体类与工厂实现，导致类个数成倍增加，增加系统复杂度</li><li>只有需要生成复杂类对象时才需要使用工厂模式，且简单工厂模式不属于23种设计模式</li></ul></blockquote><h4 id="4-2-1、简单工厂模式"><a href="#4-2-1、简单工厂模式" class="headerlink" title="4.2.1、简单工厂模式"></a>4.2.1、简单工厂模式</h4><blockquote><p><strong>一个工厂类根据传入的参量决定创建出那一种产品类的实例</strong></p></blockquote><blockquote><p> PersonAction.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>WomanFactory .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WomanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ManFactory.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>PersonFactory 工厂类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> PersonAction <span class="token function">eat</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WomanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"输入类型不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        PersonFactory personFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonAction man <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonAction woman <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        woman<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>（多个工厂方法模式）修改PersonFactory.java如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> PersonAction <span class="token function">manEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> PersonAction <span class="token function">womanEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WomanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>（静态工厂方法模式）修改PersonFactory.java如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PersonAction <span class="token function">manEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">static</span>  PersonAction <span class="token function">womanEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WomanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-、工厂方式模式"><a href="#4-2-2-、工厂方式模式" class="headerlink" title="4.2.2.、工厂方式模式"></a>4.2.2.、工厂方式模式</h4><blockquote><p><strong>工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。</strong></p></blockquote><blockquote><p>PersonAction.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>WomanEat.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WomanEat</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"woman is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ManEat.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManEat</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"man is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Provider.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> PersonAction <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>WomanFactory .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WomanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PersonAction <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WomanEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ManFactory.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PersonAction <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>具体使用</p></blockquote><pre class="line-numbers language-java"><code class="language-java">ManFactory manFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PersonAction action <span class="token operator">=</span> manFactory<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3、抽象工厂模式"><a href="#4-2-3、抽象工厂模式" class="headerlink" title="4.2.3、抽象工厂模式"></a>4.2.3、抽象工厂模式</h4><blockquote><p><strong>抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。</strong></p></blockquote><blockquote><p>LandAnimal.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LandAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>WaterAnimal .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WaterAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Cat .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">LandAnimal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"cat is runing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Dog .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">LandAnimal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"dog is runing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Fish .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">implements</span> <span class="token class-name">WaterAnimal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Fish is swiming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Shark.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shark</span> <span class="token keyword">implements</span> <span class="token class-name">WaterAnimal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Shark is swiming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AbstractFactory .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> LandAnimal <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> LandAnimal <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> WaterAnimal <span class="token function">getFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> WaterAnimal <span class="token function">getShark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AnimalFactory.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> LandAnimal <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> LandAnimal <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> WaterAnimal <span class="token function">getFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> WaterAnimal <span class="token function">getShark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Shark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用方法如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">AnimalFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LandAnimal cat <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LandAnimal dog <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WaterAnimal fish <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WaterAnimal shark <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getShark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fish<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shark<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、建造者模式"><a href="#4-3、建造者模式" class="headerlink" title="4.3、建造者模式"></a>4.3、建造者模式</h3><blockquote><p>在需要生成复杂内部结构时使用，即将多个简单的对象一步一步构建称为一个复杂对象</p></blockquote><h4 id="4-3-1、构建方式（一）"><a href="#4-3-1、构建方式（一）" class="headerlink" title="4.3.1、构建方式（一）"></a>4.3.1、构建方式（一）</h4><blockquote><p> Person.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String born<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", born='"</span> <span class="token operator">+</span> born <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> born<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBorn</span><span class="token punctuation">(</span>String born<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>born <span class="token operator">=</span> born<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>新建构造（builder）类PersonBuilder .java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Person mPerson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PersonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PersonBuilder <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PersonBuilder <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PersonBuilder <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PersonBuilder <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PersonBuilder <span class="token function">setBorn</span><span class="token punctuation">(</span>String born<span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span>born <span class="token operator">=</span> born<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Person <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> mPerson<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mPerson<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        PersonBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"北京市"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setBorn</span><span class="token punctuation">(</span><span class="token string">"厦门"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonBuilder builder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"上海市"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setBorn</span><span class="token punctuation">(</span><span class="token string">"福州"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2、构建方式（二）"><a href="#4-3-2、构建方式（二）" class="headerlink" title="4.3.2、构建方式（二）"></a>4.3.2、构建方式（二）</h4><blockquote><p>新建Person.java类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String born<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", born='"</span> <span class="token operator">+</span> born <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> born<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBorn</span><span class="token punctuation">(</span>String born<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>born <span class="token operator">=</span> born<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Ibuilder.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Ibuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setBorn</span><span class="token punctuation">(</span>String born<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ImplBuilder.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Ibuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Person mPerson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ImplBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBorn</span><span class="token punctuation">(</span>String born<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span><span class="token function">setBorn</span><span class="token punctuation">(</span>born<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Person <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> mPerson<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mPerson<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">ImplBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImplBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setBorn</span><span class="token punctuation">(</span><span class="token string">"武汉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、适配器模式"><a href="#4-4、适配器模式" class="headerlink" title="4.4、适配器模式"></a>4.4、适配器模式</h3><blockquote><p><strong>特点：</strong></p><ul><li>适配器继承或依赖已有的对象，实现想要的目标接口</li><li>消除由于接口不匹配所造成的类的兼容性问题</li><li>类的适配器模式、对象的适配器模式、接口的适配器模式</li><li>提高了类的复用，增加了类的透明度</li></ul></blockquote><h4 id="4-4-1、类的适配器模式"><a href="#4-4-1、类的适配器模式" class="headerlink" title="4.4.1、类的适配器模式"></a>4.4.1、类的适配器模式</h4><blockquote><p><strong>通过实现目标接口，继承原有类，在原有类的基础上增加接口中方法，将一个类转换成满足另一个新接口的类</strong></p></blockquote><blockquote><p><strong>Original.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Original</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"This is Original"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>ExpandInterfacen .java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExpandInterfacen</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>NewAdapter .java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Original</span> <span class="token keyword">implements</span> <span class="token class-name">ExpandInterfacen</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"This is NewAdapter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>    NewAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adapter<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    adapter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2、对象的适配器模式"><a href="#4-4-2、对象的适配器模式" class="headerlink" title="4.4.2、对象的适配器模式"></a>4.4.2、对象的适配器模式</h4><blockquote><p><strong>不继承原有类，而是持有该类实例来实现兼容，将一个对象转换成满足另一个新接口的对象</strong></p></blockquote><blockquote><p><strong>ObjectAdapter.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ExpandInterfacen</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Original mOriginal<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ObjectAdapter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mOriginal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Original</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mOriginal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"This is ObjectAdapter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">ObjectAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adapter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adapter<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3、接口的适配器模式"><a href="#4-4-3、接口的适配器模式" class="headerlink" title="4.4.3、接口的适配器模式"></a>4.4.3、接口的适配器模式</h4><blockquote><p><strong>不希望实现一个接口中所有的方法，可选择一个抽象类实现接口，然后继承该抽象类实现想实现的方法即可</strong></p></blockquote><blockquote><p><strong>ExpandInterfacen.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExpandInterfacen</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>AbstractInterface.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractInterface</span> <span class="token keyword">implements</span> <span class="token class-name">ExpandInterfacen</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Expand.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Expand</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、装饰器模式"><a href="#5、装饰器模式" class="headerlink" title="5、装饰器模式"></a>5、装饰器模式</h2><hr><blockquote><p><strong>特点：装饰类持有原有类或接口的对象，并调用它的方法</strong></p><ul><li>通过一个装饰类对现有类对象动态添加一些功能，同时不改变其结构</li><li>动态添加，动态撤销</li><li>继承的替代方式，继承只能静态添加</li><li>多成装饰产生过多相似对象，复杂且不易排错</li></ul></blockquote><h3 id="5-1、一个装饰类"><a href="#5-1、一个装饰类" class="headerlink" title="5.1、一个装饰类"></a>5.1、一个装饰类</h3><blockquote><p><strong>Person,java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>吃饭Petter.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Petter</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"petter is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>装饰类PetterDecorator.java，饭前洗手，饭后睡觉</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetterDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    Petter mPetter <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PetterDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mPetter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Petter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPetter<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"eating after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"eating before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">Person decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PetterDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decorator<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2、多个装饰类"><a href="#5-2、多个装饰类" class="headerlink" title="5.2、多个装饰类"></a>5.2、多个装饰类</h3><blockquote><p><strong>Component抽象构件——Animal.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>ConcreteComponent 具体构件——Dog.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"dog is sleeping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>ConcreteComponent 具体构件——Fish.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"fish is sleeping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Decorator装饰角色（一般为抽象类）——AbDecoratorAnimal.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbDecoratorAnimal</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Animal mAnimal <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AbDecoratorAnimal</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mAnimal <span class="token operator">=</span> animal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAnimal<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>具体装饰角色——DogDecorator.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbDecoratorAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DogDecorator</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eatBone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"dog eats bone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eatBone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>具体装饰角色——DogDecorator2.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogDecorator2</span> <span class="token keyword">extends</span> <span class="token class-name">AbDecoratorAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DogDecorator2</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"dog is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>具体装饰角色——FishDecorator.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FishDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbDecoratorAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FishDecorator</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"fish is swimming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">Animal dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DogDecorator2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Animal fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FishDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fish<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、代里模式"><a href="#6、代里模式" class="headerlink" title="6、代里模式"></a>6、代里模式</h2><hr><blockquote><p><strong>代理模式：为其他对象提供一个代理以便控制这个对象的访问。</strong></p><p>注意事项：</p><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接</p><p>口。</p><p>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p></blockquote><blockquote><p>解决问题:</p><ul><li>对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问，直接访问会给使用者或者系统结构带来很多麻烦</li><li>租客 —— 中介 —— 房东</li></ul></blockquote><blockquote><p><strong>ProxyInterface.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProxyInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Tenant.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tenant</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyInterface</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tenant</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name <span class="token operator">+</span> <span class="token string">" is buying"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>AgentProxy.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyInterface</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Tenant mTenant<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AgentProxy</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mTenant <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            mTenant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tenant</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mTenant<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">new</span> <span class="token class-name">AgentProxy</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7、原型模式"><a href="#7、原型模式" class="headerlink" title="7、原型模式"></a>7、原型模式</h2><hr><blockquote><p><strong>原型模式：通过复制现有的实例来创建新的实例。</strong></p><p>注意事项：</p><p>用于创建重复的对象，同时又能保证性能。通过对一个类进行实例化来构造新对象，不同的是，原型模</p><p>式是通过拷贝一个现有对象生成新对象的。</p><p>浅拷贝实现 <code>Cloneable</code>，重写 clone()，深拷贝是通过实现 <code>Serializable </code>读取二进制流。</p><ul><li><p><strong>浅复制</strong>：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象</p><p>所指向的。</p></li><li><p><strong>深复制</strong>：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。</p></li></ul></blockquote><blockquote><p>浅复制</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShadowClone</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException<span class="token punctuation">{</span>        ShadowClone clone <span class="token operator">=</span> <span class="token punctuation">(</span>ShadowClone<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clone<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>深复制</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepClone</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ByteArrayOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、备忘录模式"><a href="#8、备忘录模式" class="headerlink" title="8、备忘录模式"></a>8、备忘录模式</h2><hr><blockquote><p><strong>特点：</strong></p><ul><li>提供了一种可以恢复状态的机制</li><li>实现了信息的封装，使得用户不需要关心状态的保存细节</li><li>不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态</li></ul></blockquote><blockquote><p><strong>原始数据类Original.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Original</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Memo <span class="token function">createMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreMemo</span><span class="token punctuation">(</span>Memo memo<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> memo<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>备忘录类Memo.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Memo</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>保存备忘录类SaveMemo.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveMemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Memo mMemo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SaveMemo</span><span class="token punctuation">(</span>Memo memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mMemo <span class="token operator">=</span> memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Memo <span class="token function">getMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMemo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemo</span><span class="token punctuation">(</span>Memo memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mMemo <span class="token operator">=</span> memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>使用方式如下：</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        Original original <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Original</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        original<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>original<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SaveMemo saveMemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaveMemo</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">createMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"修改后的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        original<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>original<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"恢复初始值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        original<span class="token punctuation">.</span><span class="token function">restoreMemo</span><span class="token punctuation">(</span>saveMemo<span class="token punctuation">.</span><span class="token function">getMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>original<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、观察者模式"><a href="#9、观察者模式" class="headerlink" title="9、观察者模式"></a>9、观察者模式</h2><hr><blockquote><p><strong>特点</strong></p><ul><li>类和类之间的关系</li><li>对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</li></ul></blockquote><blockquote><p><strong>Observer.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Observerable1.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Observerable1</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Observerable1 has received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Observerable2.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Observerable2</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Observerable2 has received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Subject.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">opreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>AbstractSubject.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Vector<span class="token operator">&lt;</span>Observer<span class="token operator">></span> mVector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mVector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mVector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enumeration<span class="token operator">&lt;</span>Observer<span class="token operator">></span> enumeration <span class="token operator">=</span> mVector<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Observer observer <span class="token operator">=</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">opreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>RealizeSubject.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealizeSubject</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSubject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">opreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>使用方式如下：</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        Subject sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealizeSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observerable1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observerable2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">opreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、策略模式"><a href="#10、策略模式" class="headerlink" title="10、策略模式"></a>10、策略模式</h2><hr><blockquote><p><strong>特点</strong></p><ul><li>多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护</li><li>在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为</li><li>缺点：策略类会增多，所有策略类都需要对外暴露</li></ul></blockquote><blockquote><p><strong>Function.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Addiction.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Addiction</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Subtraction.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subtraction</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Division.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Division</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Multiplication.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Multiplication</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Execute.java</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Execute</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Function mFunction<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Execute</span><span class="token punctuation">(</span>Function function<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mFunction <span class="token operator">=</span> function<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> mFunction<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用如下</p></blockquote><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>        Execute execute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Addiction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>execute<span class="token punctuation">.</span><span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        execute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>execute<span class="token punctuation">.</span><span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        execute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subtraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>execute<span class="token punctuation">.</span><span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        execute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Multiplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>execute<span class="token punctuation">.</span><span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第二周</title>
      <link href="/2022/09/07/homework0904/"/>
      <url>/2022/09/07/homework0904/</url>
      
        <content type="html"><![CDATA[<h2 id="1、mock数据"><a href="#1、mock数据" class="headerlink" title="1、mock数据"></a>1、mock数据</h2><hr><blockquote><p>实体类：记录流水元素</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户登录日志流水，GenerateData */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">userLoginDetail</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//终端类型</span>    <span class="token keyword">private</span> String platform<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//终端品牌</span>    <span class="token keyword">private</span> String brand<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//终端操作系统版本</span>    <span class="token keyword">private</span> String os_version<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//终端所在区域</span>    <span class="token keyword">private</span> String region<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//app版本号</span>    <span class="token keyword">private</span> String appVersion<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问渠道</span>    <span class="token keyword">private</span> String app_channel<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//网路运营商</span>    <span class="token keyword">private</span> String net_provider<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//网络信号类型</span>    <span class="token keyword">private</span> String net_type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//国家</span>    <span class="token keyword">private</span> String country<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省</span>    <span class="token keyword">private</span> String Province<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//市</span>    <span class="token keyword">private</span> String city<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户等级</span>    <span class="token keyword">private</span> String userType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//登陆时间</span>    <span class="token keyword">private</span> Timestamp logTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户id</span>    <span class="token keyword">private</span> String userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设备id</span>    <span class="token keyword">private</span> String deviceId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//流水号</span>    <span class="token keyword">private</span> String logId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">userLoginDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">userLoginDetail</span><span class="token punctuation">(</span>String platform<span class="token punctuation">,</span> String brand<span class="token punctuation">,</span> String os_version<span class="token punctuation">,</span> String region<span class="token punctuation">,</span> String appVersion<span class="token punctuation">,</span> String app_channel<span class="token punctuation">,</span> String net_provider<span class="token punctuation">,</span> String net_type<span class="token punctuation">,</span> String country<span class="token punctuation">,</span> String province<span class="token punctuation">,</span> String city<span class="token punctuation">,</span> String userType<span class="token punctuation">,</span> Timestamp logTime<span class="token punctuation">,</span> String userId<span class="token punctuation">,</span> String deviceId<span class="token punctuation">,</span> String logId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>platform <span class="token operator">=</span> platform<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>os_version <span class="token operator">=</span> os_version<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>region <span class="token operator">=</span> region<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appVersion <span class="token operator">=</span> appVersion<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app_channel <span class="token operator">=</span> app_channel<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>net_provider <span class="token operator">=</span> net_provider<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>net_type <span class="token operator">=</span> net_type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>        Province <span class="token operator">=</span> province<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userType <span class="token operator">=</span> userType<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logTime <span class="token operator">=</span> logTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deviceId <span class="token operator">=</span> deviceId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logId <span class="token operator">=</span> logId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> platform<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlatform</span><span class="token punctuation">(</span>String platform<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>platform <span class="token operator">=</span> platform<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span>String brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOs_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> os_version<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOs_version</span><span class="token punctuation">(</span>String os_version<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>os_version <span class="token operator">=</span> os_version<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRegion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> region<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRegion</span><span class="token punctuation">(</span>String region<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>region <span class="token operator">=</span> region<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAppVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> appVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAppVersion</span><span class="token punctuation">(</span>String appVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appVersion <span class="token operator">=</span> appVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getApp_channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> app_channel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApp_channel</span><span class="token punctuation">(</span>String app_channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app_channel <span class="token operator">=</span> app_channel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getNet_provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> net_provider<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNet_provider</span><span class="token punctuation">(</span>String net_provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>net_provider <span class="token operator">=</span> net_provider<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getNet_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> net_type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNet_type</span><span class="token punctuation">(</span>String net_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>net_type <span class="token operator">=</span> net_type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> country<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCountry</span><span class="token punctuation">(</span>String country<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Province<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProvince</span><span class="token punctuation">(</span>String province<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Province <span class="token operator">=</span> province<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span>String city<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserType</span><span class="token punctuation">(</span>String userType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userType <span class="token operator">=</span> userType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Timestamp <span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> logTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogTime</span><span class="token punctuation">(</span>Timestamp logTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logTime <span class="token operator">=</span> logTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDeviceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deviceId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeviceId</span><span class="token punctuation">(</span>String deviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deviceId <span class="token operator">=</span> deviceId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> logId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogId</span><span class="token punctuation">(</span>String logId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logId <span class="token operator">=</span> logId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>                platform <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                brand <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                os_version <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                region <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                appVersion <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                app_channel <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                net_provider <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                net_type <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                country <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                Province <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                city <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                userType <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                logTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                userId <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                deviceId <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span>                logId                <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生成数据</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>mockData<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>javafaker<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jsonzou<span class="token punctuation">.</span>jmockdata<span class="token punctuation">.</span>JMockData<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jsonzou<span class="token punctuation">.</span>jmockdata<span class="token punctuation">.</span>MockConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>userLoginDetail<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建者 ： 郝春帅 * 创建时间： 2022-09-04 * 实现功能： 生成测试模拟数据 * * ---->****************&lt;--------* * 修改时间    修改人     修改功能 * *                               * * ---->****************&lt;--------* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">mockData</span> <span class="token punctuation">{</span>    Faker faker <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Faker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span><span class="token string">"zh-Cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MockConfig mockConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mockConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        mockConfig                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludes</span><span class="token punctuation">(</span><span class="token string">"appVersion"</span><span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token string">"Province"</span><span class="token punctuation">,</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"deviceId"</span><span class="token punctuation">,</span><span class="token string">"userId"</span><span class="token punctuation">,</span><span class="token string">"logId"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"platform"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">,</span><span class="token string">"iOS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"brand"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span> <span class="token string">"Redmi_M2012K11AC"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_KNT-AL20"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_ELS-AN00"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 6"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_YAL-AL50"</span> <span class="token punctuation">,</span><span class="token string">"iPhone XS Max"</span> <span class="token punctuation">,</span><span class="token string">"iPhone XS"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_M2002J9E"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_M2011K2C"</span> <span class="token punctuation">,</span><span class="token string">"Redmi_Redmi K30 Pro Zoom Edition"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_Mi 10"</span>                <span class="token punctuation">,</span><span class="token string">"Xiaomi_M2102K1AC"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 11 Pro Max"</span> <span class="token punctuation">,</span><span class="token string">"Redmi_21091116C"</span><span class="token punctuation">,</span><span class="token string">"iPhone XR"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_LYA-AL10"</span> <span class="token punctuation">,</span><span class="token string">"samsung_SM-E5260"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_SCM-W09"</span> <span class="token punctuation">,</span><span class="token string">"iPhone14,2"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_LIO-AN00"</span> <span class="token punctuation">,</span><span class="token string">"OnePlus_MT2110"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_NOP-AN00"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_Redmi K20 Pro Premium Edition"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 12"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_NAM-AL00"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_SPN-AL00"</span>                <span class="token punctuation">,</span><span class="token string">"iPhone14,3"</span> <span class="token punctuation">,</span><span class="token string">"vivo_V2055A"</span> <span class="token punctuation">,</span><span class="token string">"iPhone14,5"</span> <span class="token punctuation">,</span><span class="token string">"iPhone SE (2nd generation)"</span> <span class="token punctuation">,</span><span class="token string">"OPPO_PENM00"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_OXF-AN10"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 7 Plus"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_ELZ-AN10"</span><span class="token punctuation">,</span><span class="token string">"iPhone 6s"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_NOH-AN00"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_JKM-AL00b"</span> <span class="token punctuation">,</span><span class="token string">"vivo_V1962A"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_JKM-AL00"</span> <span class="token punctuation">,</span><span class="token string">"OPPO_PCAM00"</span> <span class="token punctuation">,</span><span class="token string">"vivo_V1922A"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_KOZ-AL00"</span>                <span class="token punctuation">,</span><span class="token string">"iPhone 12 Pro Max"</span> <span class="token punctuation">,</span><span class="token string">"samsung_SM-G7810"</span> <span class="token punctuation">,</span><span class="token string">"vivo_vivo Y66i A"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_TNY-AL00"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_OCE-AN10"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 11"</span> <span class="token punctuation">,</span><span class="token string">"iPhone 12 Pro"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_LYA-AL00"</span>                <span class="token punctuation">,</span><span class="token string">"Xiaomi_M2102K1C"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_VOG-AL10"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_LND-AL30"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_TEL-AN10"</span> <span class="token punctuation">,</span><span class="token string">"vivo_V1981A"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_2201123C"</span> <span class="token punctuation">,</span><span class="token string">"Redmi_M2012K11AC"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_TAS-AN00"</span>                <span class="token punctuation">,</span><span class="token string">"HONOR_MXW-AN00"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_Redmi K20 Pro"</span> <span class="token punctuation">,</span><span class="token string">"vivo_V2012A"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_AQM-AL10"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_HJC-AN90"</span> <span class="token punctuation">,</span><span class="token string">"realme_RMX2202"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_PCT-AL10"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_HMA-AL00"</span>                <span class="token punctuation">,</span><span class="token string">"HUAWEI_ALP-AL00"</span><span class="token punctuation">,</span><span class="token string">"HONOR_LRA-AL00"</span><span class="token punctuation">,</span><span class="token string">"HONOR_BMH-AN10"</span> <span class="token punctuation">,</span><span class="token string">"HUAWEI_JEF-AN20"</span><span class="token punctuation">,</span><span class="token string">"HONOR_NTN-AN20"</span> <span class="token punctuation">,</span><span class="token string">"Redmi_M2012K11C"</span><span class="token punctuation">,</span><span class="token string">"vivo_V2047A"</span> <span class="token punctuation">,</span><span class="token string">"iPad Pro 12.9"</span><span class="token punctuation">,</span><span class="token string">"OnePlus_ONEPLUS A5010"</span><span class="token punctuation">,</span><span class="token string">"iPhone X"</span><span class="token punctuation">,</span><span class="token string">"Xiaomi_M2102J2SC"</span><span class="token punctuation">,</span><span class="token string">"HONOR_HLK-AL00"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_LIO-AL00"</span><span class="token punctuation">,</span><span class="token string">"HONOR_OXF-AN00"</span> <span class="token punctuation">,</span><span class="token string">"HONOR_LSA-AN00"</span> <span class="token punctuation">,</span><span class="token string">"OnePlus_LE2121"</span>                <span class="token punctuation">,</span><span class="token string">"Redmi_22011211C"</span><span class="token punctuation">,</span><span class="token string">"Newman_2022N13"</span> <span class="token punctuation">,</span><span class="token string">"Xiaomi_MI 8"</span><span class="token punctuation">,</span><span class="token string">"Redmi_M2004J7BC"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_TET-AN00"</span> <span class="token punctuation">,</span><span class="token string">"OnePlus_NE2210"</span><span class="token punctuation">,</span><span class="token string">"OPPO_OPPO A83"</span><span class="token punctuation">,</span><span class="token string">"Redmi_M2007J17C"</span><span class="token punctuation">,</span><span class="token string">"Xiaomi_MIX 2S"</span><span class="token punctuation">,</span><span class="token string">"HUAWEI_OCE-AN50"</span> <span class="token punctuation">,</span><span class="token string">"OPPO_PEFM00"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"os_version"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span> <span class="token string">"android31"</span> <span class="token punctuation">,</span><span class="token string">"android26"</span> <span class="token punctuation">,</span><span class="token string">"android29"</span> <span class="token punctuation">,</span><span class="token string">"iOS12.5.4"</span><span class="token punctuation">,</span><span class="token string">"iOS14.5.1"</span>                <span class="token punctuation">,</span><span class="token string">"iOS14.6"</span><span class="token punctuation">,</span><span class="token string">"iOS15.6"</span><span class="token punctuation">,</span><span class="token string">"iOS15.4"</span><span class="token punctuation">,</span><span class="token string">"iOS15.1.1"</span>  <span class="token punctuation">,</span><span class="token string">"android30"</span> <span class="token punctuation">,</span><span class="token string">"iOS15.6.1"</span><span class="token punctuation">,</span><span class="token string">"iOS15.5"</span> <span class="token punctuation">,</span><span class="token string">"iOS15.4.1"</span><span class="token punctuation">,</span><span class="token string">"android28"</span> <span class="token punctuation">,</span><span class="token string">"iOS15.3.1"</span> <span class="token punctuation">,</span><span class="token string">"android25"</span> <span class="token punctuation">,</span><span class="token string">"iOS14.8"</span>                <span class="token punctuation">,</span><span class="token string">"iOS14.4"</span> <span class="token punctuation">,</span><span class="token string">"iOS14.2"</span><span class="token punctuation">,</span><span class="token string">"iOS14.2.1"</span><span class="token punctuation">,</span><span class="token string">"iOS13.6.1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"region"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span><span class="token string">"zh-CN"</span><span class="token punctuation">,</span><span class="token string">"zh-Hans-CN"</span><span class="token punctuation">,</span><span class="token string">"en-NG"</span><span class="token punctuation">,</span><span class="token string">"en-NG"</span><span class="token punctuation">,</span><span class="token string">"zh-Hans"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"app_channel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span> <span class="token string">"XMshop"</span><span class="token punctuation">,</span><span class="token string">"huawsc"</span><span class="token punctuation">,</span><span class="token string">"App Store"</span><span class="token punctuation">,</span><span class="token string">"sanxingsc"</span><span class="token punctuation">,</span><span class="token string">"Oshop"</span><span class="token punctuation">,</span><span class="token string">"Vshop"</span><span class="token punctuation">,</span><span class="token string">"TX04"</span><span class="token punctuation">,</span><span class="token string">"yingyb"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"net_provider"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span><span class="token string">"中国联通"</span><span class="token punctuation">,</span><span class="token string">"中国电信"</span><span class="token punctuation">,</span><span class="token string">"CMCC"</span><span class="token punctuation">,</span><span class="token string">"中国移动"</span><span class="token punctuation">,</span><span class="token string">"China Unicom"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"net_type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span><span class="token string">"4G"</span><span class="token punctuation">,</span><span class="token string">"5G"</span><span class="token punctuation">,</span><span class="token string">"wifi"</span><span class="token punctuation">,</span><span class="token string">"unkonw"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"userType"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringSeed</span><span class="token punctuation">(</span><span class="token string">"vip"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"logTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeRange</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateRange</span><span class="token punctuation">(</span><span class="token string">"20220904"</span><span class="token punctuation">,</span><span class="token string">"20220905"</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mockData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        PrintStream file <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                userLoginDetail mock <span class="token operator">=</span> JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>userLoginDetail<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mockConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setAppVersion</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">city</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setDeviceId</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">crypto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">phoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mock<span class="token punctuation">.</span><span class="token function">setLogId</span><span class="token punctuation">(</span>faker<span class="token punctuation">.</span><span class="token function">internet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                file<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> file <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数据地址：<a href="https://shimo.im/files/913JVgO6lZilg03E/">https://shimo.im/files/913JVgO6lZilg03E/</a></p></blockquote><pre class="line-numbers language-txt"><code class="language-txt">iOS|Newman_2022N13|android30|en-NG|0.60|Vshop|中国电信|5G|Switzerland|山西省|太原|vip|1662221154476|17878213764|d281890b79782b8e83054ee57e876101|f951cd1c413545b9a6f79b66df9965f5android|HUAWEI_TAS-AN00|iOS15.4.1|zh-CN|0.3.4|yingyb|中国联通|5G|Cambodia|天津市|北海|vip|1662276841541|15966359867|559f0ec69e0b4e856c528ca4aa254bcf|7e4d35d74a8d487db44d4a6d8ca64838android|HONOR_PCT-AL10|android26|en-NG|0.10|Vshop|中国联通|unkonw|Jordan|海南省|盘锦| |1662292005446|17872222811|a7f707a766ff4940f6bab646ec69a30a|7a859f9ce5234ca5bc14cb763ded285fiOS|Xiaomi_M2011K2C|android29|zh-Hans-CN|2.1|Oshop|China Unicom|4G|Iran (Islamic Republic of)|香港|海门|vip|1662222394905|17357993664|4093ea99d9576a81bc41ae9a89764f1a|a9c4432194e5457ca48776404e976114android|HONOR_AQM-AL10|iOS14.6|zh-CN|9.6.8|TX04|中国电信|5G|Ireland|北京市|嘉峪关|vip|1662300853203|14723300482|d9b39afc3bb2b46b9db501294061126e|f31aa4d78faf4b2b8c1e2389d61676beandroid|HUAWEI_SCM-W09|android30|en-NG|6.6.9|huawsc|CMCC|4G|Mozambique|陕西省|淄博|vip|1662256984693|17336199220|811a3689217de381e1056617ac59daa9|9506fc1cab554956a15542a0287dc7c4iOS|iPhone 6|iOS12.5.4|zh-Hans|0.75|TX04|China Unicom|5G|Burkina Faso|甘肃省|章丘| |1662227456772|17339892893|fe36e9821860dd060bf3f3c5bd0fb878|bfee5e5d740a4ab2ba4a7b9436d3b477iOS|iPhone 11 Pro Max|android26|en-NG|5.83|Oshop|中国电信|unkonw|Norway|江苏省|大连| |1662233546660|17873295575|acd1e1da1463b193ad7114e0950a40b3|012a228baad146568163ac807c9064c7android|Redmi_Redmi K30 Pro Zoom Edition|iOS13.6.1|zh-Hans|7.9.5|yingyb|中国移动|4G|Sri Lanka|江苏省|招远| |1662290312792|15393604383|b0ea4899a80847d8f5d065af0ca1063b|f9cf9fca0d474e408b91b50e579708e1iOS|Xiaomi_Redmi K20 Pro|iOS15.4|en-NG|4.2.6|Oshop|CMCC|5G|Thailand|福建省|赤峰|vip|1662245453716|17565857311|85b598e07d2e4c037b937cb54c8f1898|e454c289613a4b488c34e97112739638iOS|HUAWEI_NAM-AL00|iOS15.1.1|zh-Hans|4.13|TX04|中国移动|wifi|Ghana|宁夏|长春|vip|1662247316901|14789825256|6192b4400760117cba4a99b5abccef1c|e3b2ca48d6754be2be40a510ac862cbfiOS|HONOR_TNY-AL00|iOS15.5|en-NG|9.9|sanxingsc|中国联通|5G|Rwanda|吉林省|聊城| |1662237974087|17531570742|cac1adf700c099f80b55e6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、递归需要满足的条件"><a href="#2、递归需要满足的条件" class="headerlink" title="2、递归需要满足的条件"></a>2、递归需要满足的条件</h2><hr><blockquote><ol><li>存在边界，当满足某个条件时，递归便不再继续</li><li>每次递归之后，数据规模一直在减小</li></ol></blockquote><h2 id="3、递归和分治的区别"><a href="#3、递归和分治的区别" class="headerlink" title="3、递归和分治的区别"></a>3、递归和分治的区别</h2><hr><p>递归和分治本身就不是同一种东西，递归是敲代码的技巧之一，分治是算法的思想之一。</p><h2 id="4、常见算法复杂度分析及举例"><a href="#4、常见算法复杂度分析及举例" class="headerlink" title="4、常见算法复杂度分析及举例"></a>4、常见算法复杂度分析及举例</h2><hr><blockquote><p>大O表示法（Big O）：算法对于<strong>数据规模 n</strong> 的复杂度（时间复杂度、空间复杂度）</p><ul><li>时间复杂度：估算程序指令的执行次数（执行时间）</li><li>空间复杂度：估计所需占用的存储空间（内存空间）</li></ul><p>大O 表示法的规则：</p><ul><li>忽略<strong>常数、系数、低阶</strong></li><li>注意：大O 表示法仅仅是一种粗略、近似的模型，是一种估算；</li></ul></blockquote><h3 id="4-1、时间复杂度"><a href="#4-1、时间复杂度" class="headerlink" title="4.1、时间复杂度"></a>4.1、时间复杂度</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0904/image-20220907171440545.png" alt="image-20220907171440545"></p><blockquote><p>时间复杂度的优先级：</p><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O (n2) &lt; O(n3) &lt; O (2^n)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0904/image-20220907171905904.png" alt="image-20220907171905904"></p><h3 id="4-2、空间复杂度"><a href="#4-2、空间复杂度" class="headerlink" title="4.2、空间复杂度"></a>4.2、空间复杂度</h3><blockquote><p>空间复杂度：算法执行时占用的内存空间（栈内存）</p></blockquote><h3 id="4-3、冒泡排序"><a href="#4-3、冒泡排序" class="headerlink" title="4.3、冒泡排序"></a>4.3、冒泡排序</h3><blockquote><p>时间复杂度： O(N^2)</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、选择排序"><a href="#4-4、选择排序" class="headerlink" title="4.4、选择排序"></a>4.4、选择排序</h3><blockquote><p>时间复杂度： O(N^2)</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总共要经过 N-1 轮比较</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每轮需要比较的次数 N-i</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 记录目前能找到的最小值元素的下标</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将找到的最小值和i位置所在的值进行交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、JAVA实现单链表"><a href="#5、JAVA实现单链表" class="headerlink" title="5、JAVA实现单链表"></a>5、JAVA实现单链表</h2><hr><blockquote><p>节点</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 单链表的节点类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//名字</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指向下一个节点</span>    <span class="token keyword">private</span> Node next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setNext</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Node <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>单链表</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>packBean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignleLinkedList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SignleLinkedList sll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">"node1"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">"node2"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span><span class="token string">"node2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">modNode</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token string">"node1-mod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sll<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建头节点</span>    <span class="token keyword">private</span> Node head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">"head-node"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在链表尾部插入节点     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到链表尾部</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span>  temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在尾部插入节点</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据传入的值，删除对应name 的节点     * @param name     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//条件匹配，找到想要删除的节点</span>                temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到想要删除的节点！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点的name 为 modName     * @param name 需要修改的节点 的name的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modNode</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String modName<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>modName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到想要修改的节点！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 遍历链表     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid的使用教程</title>
      <link href="/2022/09/05/javaio/"/>
      <url>/2022/09/05/javaio/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p> 本篇文章仅供参考</p></blockquote><hr><h2 id="1、IO流的基本分类"><a href="#1、IO流的基本分类" class="headerlink" title="1、IO流的基本分类"></a>1、<code>IO</code>流的基本分类</h2><hr><blockquote><p>读写单位：</p><ol><li>字节流</li><li>字符流</li></ol><p>读写方向：</p><ol><li>输入流</li><li>输出流</li></ol><p>读写角色：</p><ol><li>节点流</li><li>处理流</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/javaIo/image-20220907090626901.png" alt="image-20220907090626901"></p><h2 id="2、体系结构"><a href="#2、体系结构" class="headerlink" title="2、体系结构"></a>2、体系结构</h2><hr><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>访问文件</td><td>FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>访问数组</td><td>ByteArrayInputStream</td><td>ByteArrayOutStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td>访问管道</td><td>PipedInputStream</td><td>PipedOutputStream</td><td>PipedReader</td><td>PipedWriter</td></tr><tr><td>访问字符串</td><td>——</td><td>——</td><td>StringReader</td><td>StringWriter</td></tr><tr><td>缓冲流</td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转换流</td><td>——</td><td>——</td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>对象流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td>——</td><td>——</td></tr><tr><td></td><td>FileterInputStream</td><td>FileterOutputStream</td><td>FileterReader</td><td>FileterWriter</td></tr><tr><td>打印流</td><td>——</td><td>PrintStream</td><td>——</td><td>PrintWriter</td></tr><tr><td>推回输入流</td><td>PushbackInputStream</td><td>——</td><td>PushbackReader</td><td>——</td></tr><tr><td>特殊流</td><td>DataInputStream</td><td>DataOutputStream</td><td></td><td></td></tr></tbody></table><h2 id="3、相关流的详解"><a href="#3、相关流的详解" class="headerlink" title="3、相关流的详解"></a>3、相关流的详解</h2><hr><h3 id="3-1、FileWriter类（重点）"><a href="#3-1、FileWriter类（重点）" class="headerlink" title="3.1、FileWriter类（重点）"></a>3.1、FileWriter类（重点）</h3><blockquote><p>基本概念：将文本内容写入到文本文件中</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileWriter(String name)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>FileWriter(String name , boolean append)</td><td>以追加的方式根据参数指定的文件名构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字符</td></tr><tr><td>void write(char[] buf. int off,int len)</td><td>将指定字符数组中从偏移量off 开始的len个字符写入此文件输出流</td></tr><tr><td>void write(char[] cbuf)</td><td>将cbuf.length个字符从字符数组写入此文件输出流</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象，并释放所有资源</td></tr></tbody></table><h3 id="3-2、FileReader类（重点）"><a href="#3-2、FileReader类（重点）" class="headerlink" title="3.2、FileReader类（重点）"></a>3.2、FileReader类（重点）</h3><blockquote><p>基本概念：主要用于将文本文件读取文本数据内容</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileReader(String Reader)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>int read()</td><td>读取单个字符的数据并返回，返回-1标识读取到末尾</td></tr><tr><td>int read(char[] buff , int off , len)</td><td>从输入流中最多将len个字符读取到数组中，返回读取到的字符个数，返回-1表示读取到末尾</td></tr><tr><td>int read(char[] buff)</td><td>从输入流中最多将buff.length个字符读取到数组中，返回读取到的字符个数，返回-1表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭对象流，并释放所有资源</td></tr></tbody></table><h3 id="3-3、FileOutputStream类（重点）"><a href="#3-3、FileOutputStream类（重点）" class="headerlink" title="3.3、FileOutputStream类（重点）"></a>3.3、FileOutputStream类（重点）</h3><blockquote><p>基本概念：主要用于将图像类的原始字节流写入到输出流中</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileOutputStream( Stream name)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>FileOutputStream(Stream name,boolean append)</td><td>以追加的形式根据参数指定的文件名构造对象</td></tr><tr><td>void write(int b)</td><td>将指定字节写入此文件输出流</td></tr><tr><td>void write(byte[] b, int off,int len)</td><td>将指定字节数组中从off 开始的len个字节写入到此文件输出流中</td></tr><tr><td>void write(byte [])</td><td>将指定字节数组中byte.length个字节写入到此文件输出流中</td></tr><tr><td>void flush()</td><td>刷新此输出流并强制写出任何缓冲的输出字节</td></tr><tr><td>void close()</td><td>关闭对象流并释放有关资源</td></tr></tbody></table><h3 id="3-4、FileInputStream类（重点）"><a href="#3-4、FileInputStream类（重点）" class="headerlink" title="3.4、FileInputStream类（重点）"></a>3.4、FileInputStream类（重点）</h3><blockquote><p>基本概念：主要用于从输入流中以字节流的方式读取图像类数据</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileInputStream(String name)</td><td>根据参数指定的文件构造对象</td></tr><tr><td>int read()</td><td>从输入流中读取单个字节的数据并返回，返回-1表示读取到末尾</td></tr><tr><td>int read(byte[] b ,int off ,in len)</td><td>从此输入流中将最多len个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td></tr><tr><td>int read(byte[])</td><td>从此输入流中将byte.length个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭对象流并释放有关资源</td></tr><tr><td>int available()</td><td>获取输入流所关联文件的大小</td></tr></tbody></table><h3 id="3-5、BufferedOutputStream类（重点）"><a href="#3-5、BufferedOutputStream类（重点）" class="headerlink" title="3.5、BufferedOutputStream类（重点）"></a>3.5、BufferedOutputStream类（重点）</h3><blockquote><p>基本概念：缓冲输出流，此时不用为写入的每个字节调用底层系统</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedOutputStream(OutputStream out)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>BufferedOutputStream(OutputStream out,int size)</td><td>根据参数指定的引用和缓冲区大小构造对象</td></tr><tr><td>void write(int b)</td><td>写入单个字节</td></tr><tr><td>void write(byte[] b , int off , int len)</td><td>写入字节数组中的一部分数据</td></tr><tr><td>void write(byte[])</td><td>写入参数指定的整个字节数组</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-6、BufferedInputStream类（重点）"><a href="#3-6、BufferedInputStream类（重点）" class="headerlink" title="3.6、BufferedInputStream类（重点）"></a>3.6、BufferedInputStream类（重点）</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedInputStream(InputStream in)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>BufferedInputStream(InputStream in , int size)</td><td>根据参数指定的引用和缓冲区的大小构造对象</td></tr><tr><td>int read()</td><td>读取单个字节</td></tr><tr><td>int read(byte[] b , int off , int len)</td><td>读取len  个字节</td></tr><tr><td>int read(byte[] b)</td><td>读取b.length个字节</td></tr><tr><td>void close()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-7、BufferedWriter类（重点）"><a href="#3-7、BufferedWriter类（重点）" class="headerlink" title="3.7、BufferedWriter类（重点）"></a>3.7、BufferedWriter类（重点）</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedWriter(Writer out)</td><td>根据参数指定的引用构造文件</td></tr><tr><td>BufferedWriter(Writer out , int size)</td><td>根据参数指定的文件和缓冲区大小构造对象</td></tr><tr><td>void writer(int c)</td><td>写入单个字符到输出流中</td></tr><tr><td>void writer(char[] cbuf,int off,int size)</td><td>将字符数组cbuff 中从下标off开始的len个字符写入到输出流中</td></tr><tr><td>void writer(char[] cbuf)</td><td>将字符数组cbuf 中所有内容写入到输出流中</td></tr><tr><td>void write(String s , int off , int len)</td><td>将参数S中从下标off 开始的len个字符写入到输出流中</td></tr><tr><td>void write(String str)</td><td>将参数指定的字符串写入到输出流中</td></tr><tr><td>void newLine()</td><td>用于写入分隔符到输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void colse()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-8、BufferedReader类（重点）"><a href="#3-8、BufferedReader类（重点）" class="headerlink" title="3.8、BufferedReader类（重点）"></a>3.8、BufferedReader类（重点）</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedReader(Reader in)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>BufferedReader(Reader in , int size)</td><td>根据参数指定的引用和缓冲区大小构造对象</td></tr><tr><td>int read()</td><td>从输入流读取单个字符，读到末尾则返回-1，否则返回实际读取到的内容</td></tr><tr><td>int read(char[] cbuf,int off,int len)</td><td>从输入流中读取len 个字符放到数组cbuf 中off 开始的位置上，若读取到末尾则返回-1</td></tr><tr><td>int read(char[] cbuf)</td><td>从输入流中读满整个数组cbuf</td></tr><tr><td>String readLine()</td><td>读取一行字符串并返回，返回null表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-9、PrintStream类（重点）"><a href="#3-9、PrintStream类（重点）" class="headerlink" title="3.9、PrintStream类（重点）"></a>3.9、PrintStream类（重点）</h3><blockquote><p>基本概念：方便打印各种数据内容</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>PrintStream(OutputStream out)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>void print(String s)</td><td>用于将参数指定的内容打印出来</td></tr><tr><td>void pintln(String s)</td><td>用于打印字符串后并终止该行</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-10、PrintWriter类（重点）"><a href="#3-10、PrintWriter类（重点）" class="headerlink" title="3.10、PrintWriter类（重点）"></a>3.10、PrintWriter类（重点）</h3><blockquote><p>基本概念：将对象的格式化形式打印到文本输流</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>PrintWriter(Writer)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>void print(String s)</td><td>用于将参数指定的内容打印出来</td></tr><tr><td>void pintln(String s)</td><td>用于打印字符串后并终止该行</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放所有资源</td></tr></tbody></table><h3 id="3-11、DataOutputStream类（重点）"><a href="#3-11、DataOutputStream类（重点）" class="headerlink" title="3.11、DataOutputStream类（重点）"></a>3.11、DataOutputStream类（重点）</h3><blockquote><p>基本概念：主要用于以适当的方式将基本数据类型写入到输出流中</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DataOutputStream(OutputStream out)</td><td>根据参数指定的引用构造对象，OutputStream 是一个抽象类，实参需要传递子类对象</td></tr><tr><td>void write(int v)</td><td>用于将参数指定的整数一次性写入输出流，有些写入高字节</td></tr><tr><td>void write(  )</td><td>关闭流对象，并释放所有资源</td></tr></tbody></table><h3 id="3-12、DataInputStream类（重点）"><a href="#3-12、DataInputStream类（重点）" class="headerlink" title="3.12、DataInputStream类（重点）"></a>3.12、DataInputStream类（重点）</h3><blockquote><p>基本概念：主要用于从输入流中读取基本类型的数据</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DataInputStream(InputStream in )</td><td>根据参数指定的引用构造对象，InputStream 是一个抽象类，实参需要传递子类对象</td></tr><tr><td>void readInt()</td><td>用于从输入流中一次读取一个整数数据并返回</td></tr><tr><td>void close()</td><td>关闭流对象，并释放所有资源</td></tr></tbody></table><h3 id="3-13、ObjectOutputStream类（重点）"><a href="#3-13、ObjectOutputStream类（重点）" class="headerlink" title="3.13、ObjectOutputStream类（重点）"></a>3.13、ObjectOutputStream类（重点）</h3><blockquote><ul><li><p>基本概念：主要用于将一个对象的所有内容整体写到输出流中</p></li><li><p>只能支持<code>Java.io.Serializable</code> 接口对象写入流中</p></li><li><p>类通过<code>Java.io.Serializable</code>接口以启用序列化功能</p></li><li><p>所谓序列化主要指将一个对象需要存储的相关信息有效组织成字节序列的转化过程</p></li></ul></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectOutputStream (OutputStream out)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>void writeObject(Object obj)</td><td>用于将参数指定的对象整体写入到输出流中</td></tr><tr><td>void close()</td><td>关闭输出流并释放有关资源</td></tr></tbody></table><h3 id="3-14、ObjectInputStream类（重点）"><a href="#3-14、ObjectInputStream类（重点）" class="headerlink" title="3.14、ObjectInputStream类（重点）"></a>3.14、ObjectInputStream类（重点）</h3><blockquote><ul><li>基本概念：主要用于从输入流中一次性将对象整体读出来</li><li>所谓反序列化指将有效组织的字节序列恢复为一个对象及有关信息的转化过程</li></ul></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectInputStream(InputStream in )</td><td>根据参数指定的引用构造对象</td></tr><tr><td>Object readObject()</td><td>主要用于从输入流中读取一个对象并返回，无法通过返回对象确定是否读到文件末尾</td></tr><tr><td>void close()</td><td>关闭输出流并释放有关资源</td></tr></tbody></table><h3 id="3-15、RandomAccessFile类（重点）"><a href="#3-15、RandomAccessFile类（重点）" class="headerlink" title="3.15、RandomAccessFile类（重点）"></a>3.15、RandomAccessFile类（重点）</h3><blockquote><p>基本概念：支持对随机访问文件的读写操作</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>RandomAccessFile(String name , String  mode)</td><td>根据参数指定的名称和模式构对象<br>r：以只读方式打开<br>rw：打开用来读取和写入<br>rwd：打开用来读取和写入，同步文件内容的更新<br>rws：打开用来读取和写入，同步文件内容的和元数据的更新</td></tr><tr><td>int read()</td><td>读取单个字节的数据</td></tr><tr><td>void seek(long pos)</td><td>用于设置从此文件的开头开始测量的文件指针偏移量</td></tr><tr><td>void write(int b)</td><td>将参数指定的单个字节写入</td></tr><tr><td>void close()</td><td>关闭流对象释放有关资源</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> io </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 的使用教程</title>
      <link href="/2022/09/01/javaarray/"/>
      <url>/2022/09/01/javaarray/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私教第一周</title>
      <link href="/2022/08/29/homework0827/"/>
      <url>/2022/08/29/homework0827/</url>
      
        <content type="html"><![CDATA[<h2 id="1、CAP定理"><a href="#1、CAP定理" class="headerlink" title="1、CAP定理"></a>1、<code>CAP</code>定理</h2><hr><h3 id="1-1、CAP原则"><a href="#1-1、CAP原则" class="headerlink" title="1.1、CAP原则"></a>1.1、<code>CAP</code>原则</h3><p><code>CAP </code>定理又称<code>CAP</code>原则，指的是在一个分布式系统中，<code>Consistency</code>（<strong>一致性</strong>）、 <code>Availability</code>（<strong>可用</strong></p><p><strong>性</strong>）、<code>Partition tolerance</code>（<strong>分区容错性</strong>），<strong>最多只能同时三个特性中的两个，三者不可兼得</strong>：</p><blockquote><ul><li><strong>Consistency</strong>（<strong>一致性</strong>）：即更新操作成功并返回客户端后，<strong>所有节点在同一时间的数据完全一致，这就是分布式的一致性</strong>。</li><li><strong>Availability</strong>（<strong>可用性</strong>）：即服务一直可用，而且是正常响应时间。</li><li><strong>Partition</strong> <strong>tolerance</strong>（<strong>分区容错性</strong>）：即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。</li></ul></blockquote><h3 id="1-2、CAP限制"><a href="#1-2、CAP限制" class="headerlink" title="1.2、CAP限制"></a>1.2、<code>CAP</code>限制</h3><p><strong>CAP三个特性只能满足其中两个，那么取舍的策略就共有三种</strong>：</p><blockquote><ul><li><p><strong>CA without P：</strong>如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但</p><p>放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违</p><p>背分布式系统设计的初衷的。</p></li><li><p><strong>CP without A：</strong>如果不要求A（可用），相当于每个请求都需要在服务器之间保持强一致，而P（分</p><p>区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消</p><p>息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。设计成<code>CP</code></p><p>的系统其实不少，<strong>最典型的就是分布式数据库，如Redis、HBase等</strong>。对于这些分布式数据库来说，</p><p>数据的一致性是最基本的要求，因为如果连这个标准都达不到，那么直接采用关系型数据库就好，没</p><p>必要再浪费资源来部署分布式数据库。</p></li><li><p><strong>AP wihtout C：</strong>要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联</p><p>系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。典型的应</p><p>用就如某米的抢购手机场景，可能前几秒你浏览商品的时候页面提示是有库存的，当你选择完商品准</p><p>备下单的时候，系统提示你下单失败，商品已售完。这其实就是先在 <strong>A</strong>（<strong>可用性</strong>）方面保证系统可以</p><p>正常的服务，然后在数据的一致性方面做了些牺牲，虽然多少会影响一些用户体验，但也不至于造成</p><p>用户购物流程的严重阻塞。</p></li></ul></blockquote><h2 id="2、主流索引算法以及原理"><a href="#2、主流索引算法以及原理" class="headerlink" title="2、主流索引算法以及原理"></a>2、主流索引算法以及原理</h2><hr><h3 id="2-1、线性查找"><a href="#2-1、线性查找" class="headerlink" title="2.1、线性查找"></a>2.1、线性查找</h3><p>线性查找就是最简单的查找算法，在一个数组或者链表从头到尾遍历查找，时间复杂度是<code>o(n)</code></p><h3 id="2-2、二分查找"><a href="#2-2、二分查找" class="headerlink" title="2.2、二分查找"></a>2.2、二分查找</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830123914692.png" alt="二分查找"></p><p>二分法相比于线性查找时间复杂度降低到了<code>o(logn)</code>级别，但是添加了一些限制</p><blockquote><ul><li>必须是数组，支持随机访问</li><li>数组中元素必须是有序的</li></ul></blockquote><h3 id="2-3、二叉搜索树"><a href="#2-3、二叉搜索树" class="headerlink" title="2.3、二叉搜索树"></a>2.3、二叉搜索树</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830124040813.png" alt="二分搜索树"></p><p>二分法的<strong>缺点就是必须支持随机访问</strong>，但是对于数组而言如果进行插入操作的话时间复杂度是<code>o(n)</code>级别；二</p><p>分搜索树就是结合了二分法和链表的优势实现的，二分搜索树有如下特点：</p><blockquote><ul><li>二分搜索树是<strong>满二叉树</strong></li><li>二分搜索树中任一节点<strong>大于左子树的所有节点、小于右子树的所有节点</strong></li><li>搜索、插入、删除的时间复杂度是<code>o(logn)</code>级别的</li></ul></blockquote><h3 id="2-4、平衡二叉树"><a href="#2-4、平衡二叉树" class="headerlink" title="2.4、平衡二叉树"></a>2.4、平衡二叉树</h3><p>平衡二叉树本质上还是二分搜索树，只不过平衡二叉树约束了左子树和右子树的高度，比如红黑树要求任意节</p><p>点左右子树的高度差不能超过<code>1</code></p><p>二分搜索树在左右子树极不平衡的情况下会退化成链表，平衡二叉树就是为了解决此问题的</p><h3 id="2-5、B树"><a href="#2-5、B树" class="headerlink" title="2.5、B树"></a>2.5、B树</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830130108273.png"></p><p>B树是类似于图中这样的树，它是结合了线性查找和二分搜索树的特点而来的：<strong>每个节点可以存储多个多项</strong></p><p><strong>内容，每一项同时包含索引和数据</strong></p><p><strong>备注</strong>：普通的二叉树或B树每个节点存储的就是整数，这个整数既是节点的数据也是节点用来索引/排序的标</p><p>记；但是在真正的场景中如<code>MySQL</code>中，一项数据包括很多内容而索引可能只是其中一项。</p><h3 id="2-6、B-树"><a href="#2-6、B-树" class="headerlink" title="2.6、B+树"></a>2.6、B+树</h3><p><code>B</code>树同样存在问题，就是在范围查找时非常困难</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830130459545.png"></p><blockquote><ul><li><code>B+</code>树和<code>B</code>树的区别在于</li><li>上层只存储索引而不存储数据</li></ul></blockquote><h4 id="2-6-1、B-树索引原理"><a href="#2-6-1、B-树索引原理" class="headerlink" title="2.6.1、B+树索引原理"></a>2.6.1、B+树索引原理</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830130727337.png"></p><p>上图就是一棵 <code>B+</code> 树，阶数为 3，根节点中的关键字 1、18、35 分别是子节点（1，8，14），（18，24，</p><p>31）和（35，41，53）中的<strong>最小值</strong>。每一层父节点的关键字都会出现在下一层的子节点的关键字中，因此<strong>在</strong></p><p><strong>叶子节点中包括了所有的关键字信息</strong>，并且每一个叶子节点都有一个指向下一个节点的指针，这样就形</p><p>成了一个<strong>链表</strong>。</p><blockquote><p>比如，我们想要查找关键字 16，B+ 树会自顶向下逐层进行查找：</p><ol><li>与根节点的关键字 (1，18，35) 进行比较，16 在 1 和 18 之间，得到指针 P1（指向磁盘块 2）</li><li>找到磁盘块 2，关键字为（1，8，14），因为 16 大于 14，所以得到指针 P3（指向磁盘块 7）</li><li>找到磁盘块 7，关键字为（14，16，17），然后我们找到了关键字 16，所以可以找到关键字 16 所对应的数据。</li></ol></blockquote><p>整个过程一共进行了 3 次 <code>I/O </code>操作，看起来 <code>B+ </code>树和 <code>B </code>树的查询过程差不多，但是 <code>B+</code> 树和 <code>B </code>树有个根本的</p><p>差异在于，<code>B+ </code>树的中间节点并不直接存储数据。这样的好处都有什么呢？</p><blockquote><ol><li><p><strong>首先，B+ 树查询效率更稳定。</strong>因为 <code>B+ </code>树每次只有访问到叶子节点才能找到对应的数据，而在 <code>B </code>树</p><p>中，非叶子节点也会存储数据，这样就会造成查询效率不稳定的情况，有时候访问到了非叶子节点就</p><p>可以找到关键字，而有时需要访问到叶子节点才能找到关键字。</p></li><li><p><strong>B+ 树的查询效率更高</strong>，这是因为通常 <code>B+ </code>树比<code>B</code>树更矮胖（阶数更大，深度更低），查询所需要的磁盘<code> I/O</code> 也会更少。同样的磁盘页大小，<code>B+</code> 树可以存储更多的节点关键字。</p></li></ol></blockquote><p>不仅是对单个关键字的查询上，<strong>在查询范围上，<code>B+</code> 树的效率也比<code> B</code> 树高</strong>。这是因为所有关键字都出现在 </p><p><code>B+ </code>树的叶子节点中，并通过有序链表进行了链接。而在 <code>B</code> 树中则需要通过中序遍历才能完成查询范围的查</p><p>找，效率要低很多。</p><h3 id="2-7、LSM树"><a href="#2-7、LSM树" class="headerlink" title="2.7、LSM树"></a>2.7、<code>LSM</code>树</h3><p><code>LSM</code>树是<code>Log Structured Merge Trees</code>的简称（这里面的日志，不一定是指我们程序的日志，也是指一</p><p>类以时间为其中维度的大批量的树）。在<code>NoSQL</code>数据库中有广泛的应用（比如<code>LevelDB</code>和<code>HBASE</code>等）。严格</p><p>来讲并不是一种索引结构，是一种索引设计的整体架构性的东西。</p><p><code>LSM</code>树适<strong>合的场景是写入的量很大，查询的量比较小，而且经常查询近期的数据，老的数据一般很少查询的</strong></p><p><strong>场景，</strong>比较适合用<code>LSM</code>树。</p><h4 id="2-7-1、LSM的关键思想"><a href="#2-7-1、LSM的关键思想" class="headerlink" title="2.7.1、LSM的关键思想"></a>2.7.1、<code>LSM</code>的关键思想</h4><p><code>Log Structured</code> <strong>采用日志追加的方式,而不是采用随机写,追加采用顺序写,所以性能好</strong>。另一个重要的思想</p><p>是<code>Merge Trees</code> , 数据写入的时候,先写入到内存的树中,可以是红黑树,也可能是<code>B+</code>树,有的采用跳表的内存</p><p>数据结构。当内存中的树大小达到一定规模后，将内存中的树和磁盘中的树进行合并，这就是合并树的来源。</p><p>数据开始写入到内存的时候，如果突然断电，或者系统异常，会导致数据丢失，为了防止数据丢失，采用</p><p><code>WAL</code>(<code>Write Ahead Log</code> 预写日志技术）将数据第一时间写入到磁盘文件中，由于是顺序写，所以性能上不</p><p>用担心。在发生异常的时候，可以通过<code>WAL</code>文件进行数据恢复。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830133520739.png"></p><p>如上图所示，<code>LSM</code>树，<strong>整体由内存部分数据结构和磁盘上的两类文件组成</strong>。内存中的数据结构为<code>memtable</code>和</p><p><code>immutable Memtable</code>两部分组成，前一个可读可写，后一个是只读的，它们两是一样的数据结构。</p><p><code>immutable Memtable</code> 由于是只读的，可以在刷入到磁盘的时候不用加锁，提升性能。</p><p>那么数据是如何读写的那？</p><blockquote><p><strong>写数据</strong>：</p><ol><li><p>写请求来之后，写入到<code>WAL</code>中和内存的<code>memtable</code>中，<code>memtable</code>可以是红黑树或跳表等。</p></li><li><p>如果<code>memtable</code>满了，就新申请内存构建一个新的<code>memtable</code>，且将原来的<code>memtable</code>转为只读的<code>immutable memtable</code>，适当时机刷到磁盘中，保存为一个<code>SStable</code>文件。</p></li><li><p>刷新到磁盘之后，就可以对<code>WAL</code>日志进行截断，这样防止<code>WAL</code>日志的无限扩大的问题。</p></li><li><p><code>immutable memtable</code> 保存到磁盘中，如果直接和磁盘上的文件进行合并，因为内存中的数据少，</p><p>磁盘中的很大，合并的数据很少，却占用了大量的IO磁盘，这肯定不行。所以像<code>LevelDB</code>采用延迟</p><p>合并的方式，每层满了之后，都会和下一层进行滚动合并。</p></li></ol><p><strong>读数据</strong>：</p><ol><li><p>读数据的时候，先从内存中的<code>memtable</code>中读取。</p></li><li><p>如果没有，则到<code>immutable memtable</code>中读取。</p></li><li><p>如果仍然未查询到数据，则到缓存中读取，缓存里面包括数据缓存和索引缓存。</p></li><li><p>如果仍然没有找到，则从<code>Level 0</code>层开始查找，由于<code>Level 0</code>层的SSTable没有合并，所以数据是有重合的，所以每个<code>SSTable</code>都需要查找，<code>Level 0</code>层的只有4MB（level DB）中，所以也比较快。</p></li><li><p>如果<code>Level 0</code> 层，没有找到数据，则下沉到下一层<code>Level 1</code>层继续查找，一层以及以后层次</p><p><code>SSTABLE</code>文件是不重合的，所以可以通过快速定位到<code>SSTable</code>文件中，进行查找，找到了或所有的</p><p>层都查找完毕后返回。</p></li></ol></blockquote><h4 id="2-7-2、SSTable"><a href="#2-7-2、SSTable" class="headerlink" title="2.7.2、SSTable"></a>2.7.2、<code>SSTable</code></h4><p><code>SSTable</code> 即<code>Sorted String Table </code>，听着蛮高大上，其实就<strong>是排序的有序键值对集合</strong>，是存储在文件中的</p><p>结构。我们保存哈希表为磁盘文件中，为了提升查询速度，一般还保存一个<strong>索引文件</strong>，保存<code>key</code>和<code>offset</code>的</p><p>位置，通过<code>key</code>快速获得<code>offset</code>，再打开文件，直接定位到<code>offset</code>位置。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830135003684.png"></p><p><strong>但是哈希表没有顺序的，访问不同的key时候需要随机的磁盘访问，而且哈希表冲突的时候，需要复杂的处理</strong></p><p><strong>逻辑，还无法支持范围查询。</strong></p><p>此结构<strong>将数据部分和索引部分分离，在查询的时候，不需要将整个SSTable文件都读入到内存中</strong>。而是先读入</p><p>索引部分，可以通过<strong>布隆过滤，快速判断要查的key是否存在</strong>，如果不存在，就不用再读数据部分了。</p><p>索引部分的<code>Index Block</code>记录采用<code>key</code>:<code>offset</code>:<code>size</code>形式，<code>key</code>为每个<code>Data Block </code>最小的<code>key</code>，<code>offset</code></p><p>记录<code>Data Block</code>的起始位置，<code>size</code>为每个<code>Data Block</code>的大小。每个<code>Data Block</code>采用顺序存储的方式，我</p><p>们可以方便进行二分查找。</p><h4 id="2-7-3、索引加速"><a href="#2-7-3、索引加速" class="headerlink" title="2.7.3、索引加速"></a>2.7.3、索引加速</h4><p>如果每次都从 <code>SSTable </code>中加载数据都需要从磁盘读取数据，性能比较差。<strong>所以<code>LevelDB</code>中设计了内存的缓存</strong></p><p>**区。缓存区包括两个部分,一部分为最近使用的<code>Index Block</code>，另一个部分为<code>Data Block</code>**，这样如果我们搜</p><p>索的索引和数据都在内存中，就不用从磁盘中读取，提升了查询性能。</p><h4 id="2-7-4、Level中SSTable的合并"><a href="#2-7-4、Level中SSTable的合并" class="headerlink" title="2.7.4、Level中SSTable的合并"></a>2.7.4、<code>Level</code>中<code>SSTable</code>的合并</h4><p>首先为什么需要<code>SSTable</code>合并那，那是因为，随着数据的增大，写的<code>SSTable</code>文件越来越多，而且随着对</p><p><code>key</code>的更新和删除，这种需要删除的数据越来越多，为了减少文件数量和清理无效数据，就需要进行</p><p><code>compact</code>，即将多个<code>SSTable</code>文件合并成一个<code>SSTable</code>文件。</p><p><code>SSTable</code> 按照分层滚动合并的方式，<code>Level DB</code> 的<code>Level 0</code>层最多只能保存4个<code>SSTable</code>,当<code>Level 0</code>层满了</p><p>之后，我们就将它们进行多路归并，合并后的文件就是<code>Level 1</code>层的有序<code>SSTable</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220830135711968.png"></p><p>除Level 0 层，<code>SSTable</code>层的<code>key</code>的范围是不交叉的，这样查询的时候，就可以通过二分查找的方式进行快速</p><p>查找了。<code>Level 1 </code>层的<code>SSTable </code>就会<code>从Level 1 </code>层中轮询的方式选择一个<code>SSTable</code>去和<code>Level 2 </code>层在此</p><p><code>SSTable</code> 的<code>key</code> 范围内的<code>SSTable</code>进行文件合并，为了防止合并的占用的<code>IO</code>比较多，所以在生成<code>SSTable</code></p><p>的会判断此文件和下一层多少个<code>SSTable</code>有<code>key</code>的重合，如果超过10个就停止写入，生成新的<code>SSTable</code> 文</p><p>件。这样每次合并<code>SSTable</code>文件消耗的<code>IO</code>也不至于太多。</p><blockquote><p> 合并的过程中，老的<code>SSTable</code>文件，是不能删除的，所以就会同时存在老的<code>SSTable</code>文件和新的</p><p><code>SSTable</code>文件，导致同一份数据因为被<code>compaction</code>，数据最多可能膨胀到原来的2倍。</p><p>不过数据会膨胀，由于在<code>compaction</code>过程中，有可能同一份数据不断随着<code>compaction</code>过程向更高层重</p><p>复写入，有多少层有可能就写入多少次，<code>IO</code>几倍量的增加。</p></blockquote><h3 id="3、Hash索引"><a href="#3、Hash索引" class="headerlink" title="3、Hash索引"></a>3、<code>Hash</code>索引</h3><p><strong>一句话概括<code>hash</code>:在有限的范围内表达无限的场景，这就是<code>hash</code></strong></p><p>我们在一个停了上千辆的停车场中，找到来自四川上牌登记的车，我们只需要通过车牌开头的各个省行政区划</p><p>分的简称就能找到那些车属于成都上牌登记，那么我们要找到来自成都的车，只需要找到简称川并且第二个字</p><p>符是A开头的车辆。相比通过内容简介链接地址的方式，<strong>我们通过截取内容的固定部分，来将不同的车牌进行</strong></p><p>**分门别类的方式，这就是一种<code>hash</code>**，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220831130035813.png"></p><h4 id="3-1、Hash冲突"><a href="#3-1、Hash冲突" class="headerlink" title="3.1、Hash冲突"></a>3.1、<code>Hash</code>冲突</h4><p><strong>多个不同的值通过算出了同一个<code>hash</code>值被称之为<code>hash</code>冲突</strong>。</p><p>当我们要查找id=6的数据，只需要用6%4=2作为下标遍历下标为2这个槽的元素中id=6的值。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220831132905853.png"></p><h4 id="3-2、Hash索引的缺点"><a href="#3-2、Hash索引的缺点" class="headerlink" title="3.2、Hash索引的缺点"></a>3.2、<code>Hash</code>索引的缺点</h4><blockquote><ul><li>查询性能受<code>hash</code>冲突率影响，性能不稳定</li><li>只能通过<strong>等值匹配</strong>的方式查询，不能范围查询</li><li>结构存储上没有顺序，查询时<strong>排序</strong>无法支持</li></ul></blockquote><h3 id="4、GeoHash索引"><a href="#4、GeoHash索引" class="headerlink" title="4、GeoHash索引"></a>4、<code>GeoHash</code>索引</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220831142152073.png"></p><blockquote><ol><li>从横向上将整个方形纸分为左右两份，<strong>左侧部分为标记为 0</strong>， <strong>右侧部分标记为 1</strong>；</li><li>再将红点所在的部分划分为左右两块，再对红点位置做同样的标识，最后得出红点在横向上的标识为 10;</li><li>在纵向上对方形纸做同样的划分，左侧标识为0，右侧标识为 1，得出红点位置在纵向上的标识为 01;</li><li>将横向标识和纵向标识合并，规则为 纵向在奇数位，横向在偶数位 (也可纵横相反，但要在整个系统内保持一致)，得出红点在方形纸上的标识为 1001;</li></ol></blockquote><p>只标记一个方格显得看不出什么规律，如果我们把这些都空格都标识后会发现 被划分在角落里的四个方格会</p><p>有同样的前缀，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/homeWork0827/image-20220831142447672.png"></p><h2 id="3、分布式系统存在的问题"><a href="#3、分布式系统存在的问题" class="headerlink" title="3、分布式系统存在的问题"></a>3、分布式系统存在的问题</h2><hr><h3 id="3-1、节点故障与部分失效"><a href="#3-1、节点故障与部分失效" class="headerlink" title="3.1、节点故障与部分失效"></a>3.1、节点故障与部分失效</h3><p>分布式系统某个节点故障，具有不确定性</p><h3 id="3-2、网络问题"><a href="#3-2、网络问题" class="headerlink" title="3.2、网络问题"></a>3.2、网络问题</h3><blockquote><ol><li>失或者相应丢失</li><li>请求过载需要排队等待</li><li>目标进程假死停止相应</li><li>目标节点宕机</li></ol></blockquote><h3 id="3-3、时钟问题"><a href="#3-3、时钟问题" class="headerlink" title="3.3、时钟问题"></a>3.3、时钟问题</h3><blockquote><ol><li>时间戳的事件</li><li>依赖时间戳的事务</li><li>依赖系统时间的程序将出错</li></ol></blockquote><h3 id="3-4、拜占庭故障"><a href="#3-4、拜占庭故障" class="headerlink" title="3.4、拜占庭故障"></a>3.4、拜占庭故障</h3><p>在不信任的环境中达成共识的问题</p><h2 id="4、事务的隔离级别"><a href="#4、事务的隔离级别" class="headerlink" title="4、事务的隔离级别"></a>4、事务的隔离级别</h2><hr><p>事务的隔离级别有4种，由低到高分别为<code>Read uncommitted </code>、<code>Read committed </code>、<code>Repeatable read </code>、</p><p><code>Serializable </code>。事物的并发操作中可能存在脏读，不可重复读，幻读：</p><blockquote><ul><li><p>**Read uncommitted(读未提交)**：如果一个事务已经开始写数据，则另外一个事务不允许同时进行</p><p>写操作，但允许其他事务读此行数据，该隔离级别可以通过“排他写锁”，但是不排斥读线程实现。这</p><p>样就避免了更新丢失，却可能出现脏读，也就是说事务B读取到了事务A未提交的数据。<strong>解决了更新</strong></p><p><strong>丢失，但还是可能会出现脏读</strong></p></li><li><p>**Read committed(读提交)**：如果是一个读事务(线程)，则允许其他事务读写，如果是写事务将会禁</p><p>止其他事务访问该行数据，该隔离级别避免了脏读，但是可能出现不可重复读。<strong>事务A事先读取了数</strong></p><p><strong>据，事务B紧接着更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变</strong>。</p><p><strong>解决了更新丢失和脏读问题</strong></p></li><li><p>**Repeatable read(可重复读取)**：可重复读取是指在一个事务内，多次读同一个数据，在这个事务还</p><p>没结束时，其他事务不能访问该数据(包括了读写)，这样就可以在同一个事务内两次读到的数据是一</p><p>样的，因此称为是可重复读隔离级别，读取数据的事务将会禁止写事务(但允许读事务)，写事务则禁</p><p>止任何其他事务(包括了读写)，<strong>这样避免了不可重复读和脏读，但是有时可能会出现幻读</strong>。(读取数据</p><p>的事务)可以通过“共享读锁”和“排他写锁”实现。</p><ul><li><p><strong>共享读锁</strong>：共享锁的意义在于加了共享锁，其他会话就不能加排他锁，除非共享锁移除或释</p><p>放。读的时候加上共享锁。注意，共享锁的特点是不一定要显式释放，一个会话A加了共享</p><p>锁，会话B也可以加共享锁，那么共享锁就转移到了会话B，相当于会话A的共享锁已经释</p><p>放。锁是只有一把的。</p></li><li><p><strong>排他写锁</strong>：加上排他锁，其他会话不能再加排他锁，除非显式释放。在修改记录的时候使用，所以也叫写锁</p></li></ul><p><strong>解决了更新丢失、脏读、不可重复读、但是还会出现幻读</strong></p></li><li><p>**Serializable(可序化)**：提供严格的事务隔离，它要求事务序列化执行，事务只能一个接着一个地执</p><p>行，但不能并发执行，如果仅仅通过“行级锁”是无法实现序列化的，必须通过其他机制保证新插入的</p><p>数据不会被执行查询操作的事务访问到。序列化是最高的事务隔离级别，同时代价也是最高的，性能</p><p>很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻读</p><p><strong>解决了更新丢失、脏读、不可重复读、幻读(虚读)</strong></p></li></ul></blockquote><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>Read uncommitted(读未提交)</strong></td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>Read committed(读提交)</strong></td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>Repeatable read(可重复读取)</strong></td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>Serializable(可序化)</strong></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="5、用shell统计Q1内容第三列出现的数量"><a href="#5、用shell统计Q1内容第三列出现的数量" class="headerlink" title="5、用shell统计Q1内容第三列出现的数量"></a>5、用<code>shell</code>统计<code>Q1</code>内容第三列出现的数量</h2><blockquote><p><code>Q1</code>文档内容</p></blockquote><pre class="line-numbers language-tex"><code class="language-tex">Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 user 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.35Safari/537.36  HTTP/1.0 center 183.136.216.34Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 user 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.31Safari/537.36  HTTP/1.0 list 183.136.216.32Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 user 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.35Safari/537.36  HTTP/1.0 center 183.136.216.34Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 home 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.31Safari/537.36  HTTP/1.0 list 183.136.216.32Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 user 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.35Safari/537.36  HTTP/1.0 center 183.136.216.34Chrome/91.0.4472.101 HTTP/2.0 news 183.136.216.35Safari/537.36  HTTP/1.0 user 183.136.216.35Chrome/91.0.4472.101 HTTP/2.0 accout 183.136.216.31Safari/537.36  HTTP/1.0 list 183.136.216.32备注：数据以空格分割，共四列，分别是浏览器版本 http协议，页面名称，IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><pre class="line-numbers language-awk"><code class="language-awk">#!/bin/awk -f#运行前BEGIN{    printf "type\tnum\n"}#运行中{    a[$3]++}#运行后END {    for(i in a)print i "\t" a[i]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行脚本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -f sum.awk sum.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'BEGIN{printf "type\tnum\n"}{a[<span class="token variable">$3</span>]++}END{for(i in a)print i "\t" a[i]}'</span> sum.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> homeWork教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的使用教程（三）</title>
      <link href="/2022/08/24/linux-san/"/>
      <url>/2022/08/24/linux-san/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><blockquote><p>本篇文章仅供参考</p></blockquote><hr><h2 id="十七、使用Ansible服务实现自动化运维"><a href="#十七、使用Ansible服务实现自动化运维" class="headerlink" title="十七、使用Ansible服务实现自动化运维"></a>十七、使用<code>Ansible</code>服务实现自动化运维</h2><hr><h3 id="17-1、Ansible介绍与安装"><a href="#17-1、Ansible介绍与安装" class="headerlink" title="17.1、Ansible介绍与安装"></a>17.1、<code>Ansible</code>介绍与安装</h3><p><code>Ansible</code>目前是运维自动化工具中最简单、容易上手的一款优秀软件，能够用来管理各种资源。用户可以使</p><p>用<code>Ansible</code>自动部署应用程序，以此实现IT基础架构的全面部署。例如，借助于<code>Ansible</code>，我们可以轻松地</p><p>对服务器进行初始化配置、安全基线配置，以及进行更新和打补丁操作。相较于<code>Chef</code>、<code>Puppet</code>、</p><p><code>SaltStack</code>等C/S（客户端/服务器）架构的自动化工具来讲，尽管<code>Ansible</code>的性能并不是最好的，但由于它</p><p>基于SSH远程会话协议，不需要客户端程序，只要知道受管主机的账号密码，就能直接用SSH协议进行远程控</p><p>制</p><blockquote><p><code> Ansible</code>服务专用术语对照表因此使用起来优势明显。</p></blockquote><table><thead><tr><th>术语</th><th>中文叫法</th><th>含义</th></tr></thead><tbody><tr><td>Control node</td><td>控制节点</td><td>指的是安装了Ansible服务的主机，也被称为Ansible控制端，主要是用来发布运行任务、调用功能模块，对其他主机进行批量控制。</td></tr><tr><td>Managed nodes</td><td>受控节点</td><td>指的是被Ansible服务所管理的主机，也被称为受控主机或客户端，是模块<a href="https://www.linuxcool.com/">命令</a>的被执行对象。</td></tr><tr><td>Inventory</td><td>主机清单</td><td>指的是受控节点的列表，可以是IP地址、主机名称或者域名。</td></tr><tr><td>Modules</td><td>模块</td><td>指的是上文提到的特定功能代码，默认自带有上千款功能模块，在Ansible Galaxy有超多可供选择。</td></tr><tr><td>Task</td><td>任务</td><td>指的是Ansible客户端上面要被执行的操作。</td></tr><tr><td>Playbook</td><td>剧本</td><td>指的是通过YAML语言编写的可重复执行的任务列表，把常做的操作写入到剧本文件中，下次可以直接重复执行一遍。</td></tr><tr><td>Roles</td><td>角色</td><td>从Ansible 1.2版本开始引入的新特性，用于结构化的组织Playbook，通过调用角色实现一连串的功能。</td></tr></tbody></table><blockquote><p><strong>第1步：</strong>在“虚拟机设置”界面中，将“网络适配器”的“网络连接”选项调整为“桥接模式”，并将系统的网卡设</p><p>置成“<code>Automatic</code>（<code>DHCP</code>）”模式，如图17-1及图17-2所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825083422868.png" alt="图17-1 将“网络连接”设置为“桥接模式”"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825083441177.png" alt="图17-2 将网卡设置为“Automatic（DHCP）”模式"></p><p>在大多数情况下，只要把虚拟机设置成桥接模式，且<code>Linux</code>系统的网卡信息与物理机相同，然后再重启网络</p><p>服务，就可以连接外部网络了。如果不放心，可以通过ping命令进行测试。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up ens160 </span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 www.linuxprobe.com</span>PING www.linuxprobe.com.w.kunlunno.com <span class="token punctuation">(</span>124.95.157.160<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>124.95.157.160<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>53 time<span class="token operator">=</span>17.1 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>124.95.157.160<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>53 time<span class="token operator">=</span>15.6 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>124.95.157.160<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>53 time<span class="token operator">=</span>16.8 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>124.95.157.160<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>53 time<span class="token operator">=</span>17.5 ms--- www.linuxprobe.com.w.kunlunno.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 10msrtt min/avg/max/mdev <span class="token operator">=</span> 15.598/16.732/17.452/0.708 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步：</strong>在原有软件仓库配置的下方，追加<code>EPEL</code>扩展软件包安装源的信息。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/yum.repos.d/rhel.repo</span><span class="token punctuation">[</span>BaseOS<span class="token punctuation">]</span>name<span class="token operator">=</span>BaseOSbaseurl<span class="token operator">=</span>file:///media/cdrom/BaseOSenabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span class="token punctuation">[</span>AppStream<span class="token punctuation">]</span>name<span class="token operator">=</span>AppStreambaseurl<span class="token operator">=</span>file:///media/cdrom/AppStreamenabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span class="token punctuation">[</span>EPEL<span class="token punctuation">]</span>name<span class="token operator">=</span>EPELbaseurl<span class="token operator">=</span>https://dl.fedoraproject.org/pub/epel/8/Everything/x86_64/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步：</strong>安装！</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y ansible</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕后，<code>Ansible</code>服务便默认已经启动。使用<code>--version</code>参数可以看到<code>Ansible</code>服务的版本及配置信</p><p>息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible --version</span>ansible 2.9.18  config <span class="token function">file</span> <span class="token operator">=</span> /etc/ansible/ansible.cfg  configured module search path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/root/.ansible/plugins/modules'</span>, <span class="token string">'/usr/share/ansible/plugins/modules'</span><span class="token punctuation">]</span>  ansible python module location <span class="token operator">=</span> /usr/lib/python3.6/site-packages/ansible  executable location <span class="token operator">=</span> /usr/bin/ansible  python version <span class="token operator">=</span> 3.6.8 <span class="token punctuation">(</span>default, Jan 11 2019, 02:17:16<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC 8.2.1 20180905 <span class="token punctuation">(</span>Red Hat 8.2.1-3<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-2、设置主机清单"><a href="#17-2、设置主机清单" class="headerlink" title="17.2、设置主机清单"></a>17.2、设置主机清单</h3><p>在初次使用<code>Ansible</code>服务时，大家可能会遇到这种情况：参数明明已经修改了，但却不生效。这是因为</p><p><code>Ansible</code>服务的主配置文件存在优先级的顺序关系，默认存放在<code>/etc/ansible</code>目录中的主配置文件优先级</p><p>最低。如果在当前目录或用户家目录中也存放着一份主配置文件，则以当前目录或用户家目录中的主配置文件</p><p>为主。同时存在多个<code>Ansible</code>服务主配置文件时，具体优先级顺序如表所示。</p><blockquote><p><code>Ansible</code>服务主配置文件优先级顺序</p></blockquote><table><thead><tr><th>优先级</th><th>文件位置</th></tr></thead><tbody><tr><td>高</td><td>./ansible.cfg</td></tr><tr><td>中</td><td>~/.ansible.cfg</td></tr><tr><td>低</td><td>/etc/ansible/ansible.cfg</td></tr></tbody></table><p>例如，要管理5台主机，对应的IP地址如表所示。</p><table><thead><tr><th>操作系统</th><th>IP地址</th><th>功能用途</th></tr></thead><tbody><tr><td>RHEL 8</td><td>192.168.10.20</td><td>dev</td></tr><tr><td>RHEL 8</td><td>192.168.10.21</td><td>test</td></tr><tr><td>RHEL 8</td><td>192.168.10.22</td><td>prod</td></tr><tr><td>RHEL 8</td><td>192.168.10.23</td><td>prod</td></tr><tr><td>RHEL 8</td><td>192.168.10.24</td><td>balancers</td></tr></tbody></table><p>首先需要说明的是，受管主机的系统默认使用<code>RHEL 8</code>，这是为了避免大家在准备实验机阶段产生歧义而给出</p><p>的建议值，也可以用其他<code>Linux</code>系统。主机清单文件<code>/etc/ansible/hosts</code>中默认存在大量的注释信息，建</p><p>议全部删除，然后替换成实验信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/hosts</span>192.168.10.20192.168.10.21192.168.10.22192.168.10.23192.168.10.24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了增加实验难度，“通吃”生产环境中的常见需求，我们又为这5台主机分别规划了功能用途，有开发机</p><p>（<code>dev</code>）、测试机（<code>test</code>）、产品机（<code>prod</code>）（两台）和负载均衡机（<code>balancers</code>）。在对主机进行分组</p><p>标注后，后期在管理时就方便多了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/hosts</span><span class="token punctuation">[</span>dev<span class="token punctuation">]</span>192.168.10.20<span class="token punctuation">[</span>test<span class="token punctuation">]</span>192.168.10.21<span class="token punctuation">[</span>prod<span class="token punctuation">]</span>192.168.10.22192.168.10.23<span class="token punctuation">[</span>balancers<span class="token punctuation">]</span>192.168.10.24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主机清单文件在修改后会立即生效，一般使用“<code>ansible-inventory --graph</code>”命令以结构化的方式显示出受</p><p>管主机的信息。因为我们对受管主机进行了分组，因此这种方式非常便于我们的阅读。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-inventory --graph</span>@all:  <span class="token operator">|</span>--@balancers:  <span class="token operator">|</span>  <span class="token operator">|</span>--192.168.10.24  <span class="token operator">|</span>--@dev:  <span class="token operator">|</span>  <span class="token operator">|</span>--192.168.10.20  <span class="token operator">|</span>--@prod:  <span class="token operator">|</span>  <span class="token operator">|</span>--192.168.10.22  <span class="token operator">|</span>  <span class="token operator">|</span>--192.168.10.23  <span class="token operator">|</span>--@test:  <span class="token operator">|</span>  <span class="token operator">|</span>--192.168.10.21  <span class="token operator">|</span>--@ungrouped:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常的第一次<code>SSH</code>远程连接过程是这样的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:QRW1wrqdwN0PI2bsUvBlW5XOIpBjE+ujCB8yiCqjMQQ.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: 此处应输入管理员密码后回车确认Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast login: Mon Mar 29 06:30:15 2021<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Ansible</code>服务已经对此有了解决办法，那就是使用如表所示的变量。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ansible_ssh_host</td><td>受管主机名</td></tr><tr><td>ansible_ssh_port</td><td>端口号</td></tr><tr><td>ansible_ssh_user</td><td>默认账号</td></tr><tr><td>ansible_ssh_pass</td><td>默认密码</td></tr><tr><td>ansible_shell_type</td><td>Shell终端类型</td></tr></tbody></table><p>用户只需要将对应的变量及信息填写到主机清单文件中，在执行任务时便会自动对账号和密码进行匹配，而不</p><p>用每次重复输入它们。继续修改主机清单文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/hosts</span><span class="token punctuation">[</span>dev<span class="token punctuation">]</span>192.168.10.20<span class="token punctuation">[</span>test<span class="token punctuation">]</span>192.168.10.21<span class="token punctuation">[</span>prod<span class="token punctuation">]</span>192.168.10.22192.168.10.23<span class="token punctuation">[</span>balancers<span class="token punctuation">]</span>192.168.10.24<span class="token punctuation">[</span>all:vars<span class="token punctuation">]</span>ansible_user<span class="token operator">=</span>rootansible_password<span class="token operator">=</span>redhat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还剩最后一步。将<code>Ansible</code>主配置文件中的第71行设置成默认不需要SSH协议的指纹验证，以及将第107行设</p><p>置成默认执行剧本时所使用的管理员名称为<code>root</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/ansible.cfg</span>6970 <span class="token comment" spellcheck="true"># uncomment this to disable SSH key host checking</span>71 host_key_checking <span class="token operator">=</span> False72………………省略部分输出信息………………104105 <span class="token comment" spellcheck="true"># default user to use for playbooks if user is not specified</span>106 <span class="token comment" spellcheck="true"># (/usr/bin/ansible will use current user as default)</span>107 remote_user <span class="token operator">=</span> root108<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不需要重启服务，在以上操作完全搞定后就可以开始后面的实验了。由于刚才是将<code>Ansible</code>服务器设置成了</p><p>桥接及<code>DHCP</code>模式，现在请同学们自行将网络适配器修改回“仅主机模式”（见图17-3）以及192.168.10.10/24</p><p>的<code>IP</code>地址。在修改完成后重启网卡，然后自行在主机之间执行<code>ping</code>操作。保证主机之间的网络能够互通是</p><p>后续实验的基石。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>ens160: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.10.10  netmask 255.255.255.0  broadcast 192.168.10.255        inet6 fe80::d0bb:17c8:880d:e719  prefixlen 64  scopeid 0x20        ether 00:0c:29:7d:27:bf  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 32  bytes 5134 <span class="token punctuation">(</span>5.0 KiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 43  bytes 4845 <span class="token punctuation">(</span>4.7 KiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825085113979.png" alt="图17-3 将虚拟机网卡改回仅主机模式"></p><h3 id="17-3、运行临时命令"><a href="#17-3、运行临时命令" class="headerlink" title="17.3、运行临时命令"></a>17.3、运行临时命令</h3><blockquote><p> <code>Ansible</code>服务常用模块名称及作用</p><p>使用“<code>ansible-doc</code>模块名称”的命令格式自行查询，或是使用<code>ansibe-doc -l</code>命令列出所有的模块信息</p><p>以供选择。</p></blockquote><table><thead><tr><th>模块名称</th><th>模块作用</th></tr></thead><tbody><tr><td>ping</td><td>检查受管节点主机网络是否能够联通。</td></tr><tr><td>yum</td><td>安装、更新及卸载软件包。</td></tr><tr><td>yum_repository</td><td>管理主机的软件仓库配置文件。</td></tr><tr><td>template</td><td>复制模板文件到受管节点主机。</td></tr><tr><td>copy</td><td>新建、修改及复制文件。</td></tr><tr><td>user</td><td>创建、修改及删除用户。</td></tr><tr><td>group</td><td>创建、修改及删除用户组。</td></tr><tr><td>service</td><td>启动、关闭及查看服务状态。</td></tr><tr><td>get_url</td><td>从网络中下载文件。</td></tr><tr><td>file</td><td>设置文件权限及创建快捷方式。</td></tr><tr><td>cron</td><td>添加、修改及删除计划任务。</td></tr><tr><td>command</td><td>直接执行用户指定的命令。</td></tr><tr><td>shell</td><td>直接执行用户指定的命令（支持特殊字符）。</td></tr><tr><td>debug</td><td>输出调试或报错信息。</td></tr><tr><td>mount</td><td>挂载硬盘设备文件。</td></tr><tr><td>filesystem</td><td>格式化硬盘设备文件。</td></tr><tr><td>lineinfile</td><td>通过正则表达式修改文件内容。</td></tr><tr><td>setup</td><td>收集受管节点主机上的系统及变量信息。</td></tr><tr><td>firewalld</td><td>添加、修改及删除防火墙策略。</td></tr><tr><td>lvg</td><td>管理主机的物理卷及卷组设备。</td></tr><tr><td>lvol</td><td>管理主机的逻辑卷设备。</td></tr></tbody></table><p>在<code>Ansible</code>服务中，<code>ansible</code>是用于执行临时任务的命令，也就在是执行后即结束（与剧本文件的可重复执</p><p>行不同）。在使用<code>ansible</code>命令时，必须指明受管主机的信息，如果已经设置过主机清单文件</p><p>（<code>/etc/ansible/hosts</code>），则可以使用<code>all</code>参数来指代全体受管主机，或是用<code>dev</code>、<code>test</code>等主机组名称来</p><p>指代某一组的主机。</p><p><code>ansible</code>命令常用的语法格式为“<code>ansible</code>受管主机节点<code> -m</code>模块名称[<code>-a</code>模块参数]”，常见的参数如表所示。</p><p>其中，<code>-a</code>是要传递给模块的参数，只有功能极其简单的模块才不需要额外参数，所以大多情况下<code>-m</code>与<code>-a</code>参</p><p>数都会同时出现。</p><blockquote><p> <code>ansible</code>命令常用参数</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-k</td><td>手动输入SSH协议密码</td></tr><tr><td>-i</td><td>指定主机清单文件</td></tr><tr><td>-m</td><td>指定要使用的模块名</td></tr><tr><td>-M</td><td>指定要使用的模块路径</td></tr><tr><td>-S</td><td>使用su命令</td></tr><tr><td>-T</td><td>设置SSH协议连接超时时间</td></tr><tr><td>-a</td><td>设置传递给模块的参数</td></tr><tr><td>–version</td><td>查看版本信息</td></tr><tr><td>-h</td><td>帮助信息</td></tr></tbody></table><p>如果想实现某个功能，但是却不知道用什么模块，又或者是知道了模块名称，但不清楚模块具体的作用，则建</p><p>议使用<code>ansible-doc</code>命令进行查找。例如，列举出当前<code>Ansible</code>服务所支持的所有模块信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc -l </span>a10_server                                           Manage A10 Networks AX/SoftAX/Thunder/v<span class="token punctuation">..</span>.a10_server_axapi3                                    Manage A10 Networks AX/SoftAX/Thunder/v<span class="token punctuation">..</span>.           a10_service_group                                    Manage A10 Networks AX/SoftAX/Thunder/v<span class="token punctuation">..</span>.a10_virtual_server                                   Manage A10 Networks AX/SoftAX/Thunder/v<span class="token punctuation">..</span>.aci_aaa_user                                         Manage AAA <span class="token function">users</span> <span class="token punctuation">(</span>aaa:User<span class="token punctuation">)</span>                                              aci_aaa_user_certificate                             Manage AAA user certificates <span class="token punctuation">(</span>aaa:User<span class="token punctuation">..</span>.                        aci_access_port_block_to_access_port                 Manage port blocks of Fabric interface <span class="token punctuation">..</span>.aci_access_port_to_interface_policy_leaf_profile     Manage Fabric interface policy leaf pro<span class="token punctuation">..</span>.aci_access_sub_port_block_to_access_port             Manage sub port blocks of Fabric interf<span class="token punctuation">..</span>.aci_aep                                              Manage attachable Access Entity Profile<span class="token punctuation">..</span>.aci_aep_to_domain                                    Bind AEPs to Physical or Virtual Domain<span class="token punctuation">..</span>.   aci_bd_subnet                                        Manage Subnets <span class="token punctuation">(</span>fv:Subnet<span class="token punctuation">)</span>                 ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下，很难通过名称来判别一个模块的作用，要么是参考模块后面的介绍信息，要么是平时多学多练，</p><p>进行积累。例如，接下来随机查看一个模块的详细信息。<code>ansible-doc</code>命令会在屏幕上显示出这个模块的作</p><p>用、可用参数及实例等信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc a10_server</span><span class="token operator">></span> A10_SERVER    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/network/a10/a10_server.py<span class="token punctuation">)</span>     Manage SLB <span class="token punctuation">(</span>Server Load Balancer<span class="token punctuation">)</span> server objects on A10 Networks devices via aXAPIv2.  * This module is maintained by The Ansible Community………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在17.2节，已经成功地将受管主机的IP地址填写到主机清单文件中，接下来小试牛刀，检查一下这些主机的网</p><p>络连通性。<code>ping</code>模块用于进行简单的网络测试（类似于常用的<code>ping</code>命令）。可以使用<code>ansible</code>命令直接针</p><p>对所有主机调用<code>ping</code>模块，不需要增加额外的参数，返回值若为<code>SUCCESS</code>，则表示主机当前在线。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible all -m ping</span>192.168.10.20 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> false,    <span class="token string">"ping"</span><span class="token keyword">:</span> <span class="token string">"pong"</span><span class="token punctuation">}</span>192.168.10.21 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> false,    <span class="token string">"ping"</span><span class="token keyword">:</span> <span class="token string">"pong"</span><span class="token punctuation">}</span>192.168.10.22 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> false,    <span class="token string">"ping"</span><span class="token keyword">:</span> <span class="token string">"pong"</span><span class="token punctuation">}</span>192.168.10.23 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> false,    <span class="token string">"ping"</span><span class="token keyword">:</span> <span class="token string">"pong"</span><span class="token punctuation">}</span>192.168.10.24 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> false,    <span class="token string">"ping"</span><span class="token keyword">:</span> <span class="token string">"pong"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用<code>-m</code>参数直接指定模块名称之外，还可以用<code>-a</code>参数将参数传递给模块，让模块的功能更高级，更好地</p><p>满足当前生产的需求。例如，<code>yum_repository</code>模块的作用是管理主机的软件仓库，能够添加、修改及删除软</p><p>件仓库的配置信息，参数相对比较复杂。遇到这种情况时，建议先用<code>ansible-doc</code>命令对其进行了解。尤其</p><p>是下面的<code>EXAMPLES</code>结构段会有该模块的实例，对用户来说有非常高的参考价值。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc yum_repository</span><span class="token operator">></span> YUM_REPOSITORY    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/packaging<span class="token operator">></span>        Add or remove YUM repositories <span class="token keyword">in</span> RPM-based Linux        distributions. If you wish to update an existing repository        definition use <span class="token punctuation">[</span>ini_file<span class="token punctuation">]</span> instead.  * This module is maintained by The Ansible Core Team……………………省略部分输出信息………………EXAMPLES:- name: Add repository  yum_repository:    name: epel    description: EPEL YUM repo    baseurl: https://download.fedoraproject.org/pub/epel/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/- name: Add multiple repositories into the same <span class="token function">file</span> <span class="token punctuation">(</span>1/2<span class="token punctuation">)</span>  yum_repository:    name: epel    description: EPEL YUM repo    file: external_repos    baseurl: https://download.fedoraproject.org/pub/epel/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/    gpgcheck: no- name: Add multiple repositories into the same <span class="token function">file</span> <span class="token punctuation">(</span>2/2<span class="token punctuation">)</span>  yum_repository:    name: rpmforge    description: RPMforge YUM repo    file: external_repos    baseurl: http://apt.sw.be/redhat/el7/en/<span class="token variable">$basearch</span>/rpmforge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>还好，参数并不是很多，而且与此前学过的<code>/etc/yum.repos.d/</code>目录中的配置文件基本相似。现在，想</p><p>为主机清单中的所有服务器新增一个如表所示的软件仓库，该怎么操作呢？</p></blockquote><blockquote><p> 新增软件仓库信息</p></blockquote><table><thead><tr><th>仓库名称</th><th>EX294_BASE</th></tr></thead><tbody><tr><td>仓库描述</td><td>EX294 base software</td></tr><tr><td>仓库地址</td><td>file:///media/cdrom/BaseOS</td></tr><tr><td>GPG签名</td><td>启用</td></tr><tr><td>GPG密钥文件</td><td>file:///media/cdrom/RPM-GPG-KEY-redhat-release</td></tr></tbody></table><p>我们可以对照着<code>EXAMPLE</code>实例段，逐一对应填写需求值和参数，其标准格式是在<code>-a</code>参数后接整体参数（用单</p><p>引号圈起），而各个参数字段的值则用双引号圈起。这是最严谨的写法。在执行下述命令后如果出现</p><p><code>CHANGED字样</code>，则表示修改已经成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible all -m yum_repository -a 'name="EX294_BASE" description="EX294 base software" baseurl="file:///media/cdrom/BaseOS" gpgcheck=yes enabled=1 gpgkey="file:///media/cdrom/RPM-GPG-KEY-redhat-release"'</span>192.168.10.20 <span class="token operator">|</span> CHANGED <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> true,    <span class="token string">"repo"</span><span class="token keyword">:</span> <span class="token string">"EX294_BASE"</span>,    <span class="token string">"state"</span><span class="token keyword">:</span> <span class="token string">"present"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令执行成功后，可以到主机清单中的任意机器上查看新建成功的软件仓库配置文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/yum.repos.d/EX294_BASE.repo </span><span class="token punctuation">[</span>EX294_BASE<span class="token punctuation">]</span>baseurl <span class="token operator">=</span> file:///media/cdrom/BaseOSenabled <span class="token operator">=</span> 1gpgcheck <span class="token operator">=</span> 1gpgkey <span class="token operator">=</span> file:///media/cdrom/RPM-GPG-KEY-redhat-releasename <span class="token operator">=</span> EX294 base software<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-4、剧本文件实践"><a href="#17-4、剧本文件实践" class="headerlink" title="17.4、剧本文件实践"></a>17.4、剧本文件实践</h3><p><code>Ansible</code>服务的剧本（<code>playbook</code>）文件采用<code>YAML</code>语言编写，具有强制性的格式规范，它通过空格将不同信</p><p>息分组，因此有时会因一两个空格错位而导致报错。大家在使用时要万分小心。<code>YAML</code>文件的开头需要先写3</p><p>个减号（—），多个分组的信息需要间隔一致才能执行，而且上下也要对齐，后缀名一般为<code>.yml</code>。剧本文件</p><p>在执行后，会在屏幕上输出运行界面，内容会根据工作的不同而变化。<strong>在运行界面中，绿色表示成功，黄色表</strong></p><p><strong>示执行成功并进行了修改，而红色则表示执行失败。</strong></p><blockquote><p>剧本文件的结构由4部分组成，分别是<code>target</code>、<code>variable</code>、<code>task</code>、<code>handler</code>，其各自的作用如下:</p><ul><li><strong>target</strong>：用于定义要执行剧本的主机范围。</li><li><strong>variable</strong>：用于定义剧本执行时要用到的变量。</li><li><strong>task</strong>：用于定义将在远程主机上执行的任务列表。</li><li><strong>handler</strong>：用于定义执行完成后需要调用的后续任务。</li></ul></blockquote><p><code>YAML</code>语言编写的<code>Ansible</code>剧本文件会按照从上到下的顺序自动运行，其形式类似于第5章介绍的<code>Shell</code>脚本</p><p>但格式有严格的要求。例如，创建一个名为<code>packages.yml</code>的剧本，让<code>dev</code>、<code>test</code>和<code>prod</code>组的主机可以自动</p><p>安装数据库软件，并且将<code>dev</code>组主机的软件更新至最新。</p><blockquote><p>安装和更新软件需要使用<code>yum</code>模块。先看一下帮助信息中的示例吧</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc yum</span><span class="token operator">></span> YUM    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/packaging/os/yum.py<span class="token punctuation">)</span>        Installs, upgrade, downgrades, removes, and lists packages and        <span class="token function">groups</span> with the `yum' package manager. This module only works        on Python 2. If you require Python 3 support see the <span class="token punctuation">[</span>dnf<span class="token punctuation">]</span>        module.  * This module is maintained by The Ansible Core Team  * note: This module has a corresponding action plugin.………………省略部分输出信息………………EXAMPLES:- name: <span class="token function">install</span> the latest version of Apache  yum:    name: httpd    state: latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置<code>Ansible</code>剧本文件时，<code>ansible-doc</code>命令提供的帮助信息真是好用。在知道<code>yum</code>模块的使用方法和格</p><p>式后，就可以开始编写剧本了。初次编写剧本文件时，请务必看准<strong>格式，模块及<code>play</code>（动作）格式也要上下</strong></p><p><strong>对齐</strong>，否则会出现“参数一模一样，但不能执行”的情况。</p><blockquote><p>一个剧本正确的写法应该是</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim packages.yml</span>---- name: 安装软件包  hosts: dev,test,prod  tasks:          - name: one            yum:                    name: mariadb                    state: latest<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>name</code>字段表示此项<code>play</code>（动作）的名字，用于在执行过程中提示用户执行到了哪一步，以及帮助管</p><p>理员在日后阅读时能想起这段代码的作用。大家可以在<code>name</code>字段自行命名，没有任何限制。<code>hosts</code>字段表示</p><p>要在哪些主机上执行该剧本，多个主机组之间用逗号间隔；如果需要对全部主机进行操作，则使用<code>all</code>参</p><p>数。<code>tasks</code>字段用于定义要执行的任务，每个任务都要有一个独立的<code>name</code>字段进行命名，并且每个任务的</p><p><code>name</code>字段和模块名称都要严格上下对齐，参数要单独缩进。</p><blockquote><p>而错误的剧本文件是下面这样的</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim packages.yml</span>---- name: 安装软件包  hosts: dev,test,prod  tasks:          - name: one            yum:            name: mariadb            state: latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在编写<code>Ansible</code>剧本文件时，<code>RHEL 8</code>系统自带的<code>Vim</code>编辑器具有自动缩进功能，这可以给我们提供很多</p><p>帮助。在确认无误后就可以用<code>ansible-playbook</code>命令运行这个剧本文件了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-playbook packages.yml </span>PLAY <span class="token punctuation">[</span>安装软件包<span class="token punctuation">]</span> *******************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> **************************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>one<span class="token punctuation">]</span> **************************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>PLAY RECAP **************************************************************************192.168.10.20  <span class="token keyword">:</span> ok<span class="token operator">=</span>2   changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.21  <span class="token keyword">:</span> ok<span class="token operator">=</span>2   changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.22  <span class="token keyword">:</span> ok<span class="token operator">=</span>2   changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.23  <span class="token keyword">:</span> ok<span class="token operator">=</span>2   changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行成功后，我们主要观察最下方的输出信息。其中，<code>ok</code>和<code>changed</code>表示执行及修改成功。如遇到</p><p><code>unreachable</code>或<code>failed</code>大于0的情况，建议手动检查剧本是否在所有主机中都正确运行了，以及有无安装失</p><p>败的情况。在正确执行过<code>packages.yml</code>文件后，随机切换到<code>dev</code>、<code>test</code>、<code>prod</code>组中的任意一台主机上，再</p><p>次安装<code>mariadb</code>软件包，此时会提示该服务已经存在。这说明刚才的操作一切顺利！</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install mariadb</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Last metadata expiration check: 1:05:53 ago on Thu 15 Apr 2021 08:29:11 AM CST.Package mariadb-3:10.3.11-1.module+el8+2765+cfa4f87b.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-5、创建以及使用角色"><a href="#17-5、创建以及使用角色" class="headerlink" title="17.5、创建以及使用角色"></a>17.5、创建以及使用角色</h3><p>在日常编写剧本时，会存在剧本越来越长的情况，这不利于进行阅读和维护，而且还无法让其他剧本灵活地调</p><p>用其中的功能代码。角色（<code>role</code>）这一功能则是自<code>Ansible 1.2</code>版本开始引入的新特性，用于层次性、结构</p><p>化地组织剧本。角色功能分别把变量、文件、任务、模块及处理器配置放在各个独立的目录中，然后对其进行</p><p>便捷加载。简单来说，角色功能是把常用的一些功能“类模块化”，然后在用的时候加载即可。</p><p>角色的好处就在于<strong>将剧本组织成了一个简洁的、可重复调用的抽象对象，使得用户把注意力放到剧本的宏观大</strong></p><p><strong>局上，统筹各个关键性任务，只有在需要时才去深入了解细节。</strong>角色的获取有3种方法，分别是<strong>加载系统内置</strong></p><p><strong>角色</strong>、<strong>从外部环境获取角色</strong>以及<strong>自行创建角色</strong>。</p><h4 id="17-5-1、加载系统内置角色"><a href="#17-5-1、加载系统内置角色" class="headerlink" title="17.5.1、加载系统内置角色"></a>17.5.1、加载系统内置角色</h4><p>在使用<code>RHEL</code>系统的内置角色时，我们不需要联网就能实现。用户只需要配置好软件仓库的配置文件，然后安</p><p>装包含系统角色的软件包<code>rhel-system-roles</code>，随后便可以在系统中找到它们了，然后就能够使用剧本文件</p><p>调用角色了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y rhel-system-roles</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Last metadata expiration check: 1:06:26 ago on Tue 13 Apr 2021 07:22:03 AM CST.Dependencies resolved.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Package                  Arch          Version          Repository        Size<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Installing: rhel-system-roles        noarch        1.0-5.el8        AppStream        127 kTransaction Summary<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Install  1 Package………………省略部分输出信息………………  Installed:  rhel-system-roles-1.0-5.el8.noarch                                            Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完毕后，使用<code>ansible-galaxy list</code>命令查看<code>RHEL 8</code>系统中有哪些自带的角色可用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy list</span><span class="token comment" spellcheck="true"># /usr/share/ansible/roles</span>- linux-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># /etc/ansible/roles</span><span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: - the configured path /root/.ansible/roles does not exist.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code> ansible</code>系统角色描述</p></blockquote><table><thead><tr><th>角色名称</th><th>作用</th></tr></thead><tbody><tr><td>rhel-system-roles.kdump</td><td>配置kdump崩溃恢复服务</td></tr><tr><td>rhel-system-roles.network</td><td>配置网络接口</td></tr><tr><td>rhel-system-roles.selinux</td><td>配置SELinux策略及模式</td></tr><tr><td>rhel-system-roles.timesync</td><td>配置网络时间协议</td></tr><tr><td>rhel-system-roles.postfix</td><td>配置邮件传输服务</td></tr><tr><td>rhel-system-roles.firewall</td><td>配置防火墙服务</td></tr><tr><td>rhel-system-roles.tuned</td><td>配置系统调优选项</td></tr></tbody></table><p>以<code>rhel-system-roles.timesync</code>角色为例，它用于设置系统的时间和<code>NTP</code>服务，让主机能够同步准确的时</p><p>间信息。剧本模板文件存放在<code>/usr/share/doc/rhel-system-roles/</code>目录中，可以复制过来修改使用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /usr/share/doc/rhel-system-roles/timesync/example-timesync-playbook.yml timesync.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>NTP</code>服务器主要用于同步计算机的时间，可以提供高精度的时间校准服务，帮助计算机校对系统时钟。在复</p><p>制来的剧本模板文件中，删除掉多余的代码，将<code>NTP</code>服务器的地址填写到<code>timesync_ntp_servers</code>变量的</p><p><code>hostname</code>字段中即可。该变量的参数含义如表所示。稍后<code>timesync</code>角色就会自动为用户配置参数信息了。</p><blockquote><p><code> timesync_ntp_servers</code>变量参数含义</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>hostname</td><td>NTP服务器主机名</td></tr><tr><td>iburst</td><td>启用快速同步</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim timesync.yml </span>---- hosts: all  vars:    timesync_ntp_servers:      - hostname: pool.ntp.org        iburst: <span class="token function">yes</span>  roles:    - rhel-system-roles.timesync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-5-2、从外部获取角色"><a href="#17-5-2、从外部获取角色" class="headerlink" title="17.5.2、从外部获取角色"></a>17.5.2、从外部获取角色</h4><p><code>Ansible Galaxy</code>是<code>Ansible</code>的一个官方社区，用于共享角色和功能代码，用户可以在网站自由地共享和下</p><p>载<code>Ansible</code>角色。该社区是管理和使用角色的不二之选。</p><p>在图17-4所示的<code>Ansible Galaxy</code>官网中，左侧有3个功能选项，分别是首页（<code>Home</code>）、搜索（<code>Search</code>）以</p><p>及社区（<code>Community</code>）。单击<code>Search</code>按钮进入到搜索界面，这里以<code>nginx</code>服务为例进行搜索，即可找到</p><p><code>Nginx</code>官方发布的角色信息，如图17-5所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825094820600.png" alt="图 17-4 Ansible Galaxy 官网首页"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825094837843.png" alt="图17-5 搜索界面中找到nginx角色信息"></p><blockquote><p><code>Ansible Galaxy </code>官网首页：<a href="https://galaxy.ansible.com/">https://galaxy.ansible.com</a></p></blockquote><p>当单击<code>nginx</code>角色进入到详情页面后，会显示这个项目的软件版本、评分、下载次数等信息。在</p><p><code>Installation</code>字段可以看到相应的安装方式，如图17-6所示。在保持虚拟机能够连接外网的前</p><p>提下，可以按这个页面提示的命令进行安装。</p><p>这时，如果需要使用这个角色，可以在虚拟机联网的状态下直接按照“<code>ansible-galaxy install</code>角色名</p><p>称”的命令格式自动获取</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825095011807.png" alt="图17-6 nginx角色详情页"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy install nginxinc.nginx</span>- downloading role <span class="token string">'nginx'</span>, owned by nginxinc- downloading role from https://github.com/nginxinc/ansible-role-nginx/archive/0.19.1.tar.gz- extracting nginxinc.nginx to /etc/ansible/roles/nginxinc.nginx- nginxinc.nginx <span class="token punctuation">(</span>0.19.1<span class="token punctuation">)</span> was installed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完毕后，再次查看系统中已有的角色，便可找到<code>nginx</code>角色信息了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy list</span><span class="token comment" spellcheck="true"># /etc/ansible/roles</span>- nginxinc.nginx, 0.19.1<span class="token comment" spellcheck="true"># /usr/share/ansible/roles</span>- linux-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里还存在两种特殊情况：</p><ul><li><strong>在国内访问<code>Ansible Galaxy</code>官网时可能存在不稳定的情况，导致访问不了或者网速较慢。</strong></li><li><strong>某位作者是将作品上传到了自己的网站，或者除<code>Ansible Galaxy</code>官网以外的其他平台。</strong></li></ul></blockquote><p>在这两种情况下，就不能再用“<code>ansible-galaxy install</code>角色名称”的命令直接加载了，而是需要手动先编</p><p>写一个<code>YAML</code>语言格式的文件，指明网址链接和角色名称，然后再用<code>-r</code>参数进行加载。</p><p>例如，刘遄老师在套网站（<a href="http://www.linuxprobe.com)上传了一个名为`nginx_core`的角色软件包(一个用于对/">www.linuxprobe.com）上传了一个名为`nginx_core`的角色软件包（一个用于对</a></p><p><code>nginx</code>网站进行保护的插件）。这时需要编写如下所示的一个<code>yml</code>配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat nginx.yml</span>---- src: https://www.linuxprobe.com/Software/nginxinc-nginx_core-0.3.0.tar.gz  name: nginx-core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>随后使用<code>ansible-galaxy</code>命令的<code>-r</code>参数加载这个文件，即可查看到新角色信息了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy install -r nginx.yml</span>- downloading role from https://www.linuxprobe.com/nginxinc-nginx_core-0.3.0.tar.gz- extracting nginx to /etc/ansible/roles/nginx- nginx was installed successfully<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy list</span><span class="token comment" spellcheck="true"># /etc/ansible/roles</span>- nginx-core, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- nginxinc.nginx, 0.19.1<span class="token comment" spellcheck="true"># /usr/share/ansible/roles</span>- linux-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- linux-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.kdump, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.network, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.postfix, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.selinux, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span>- rhel-system-roles.timesync, <span class="token punctuation">(</span>unknown version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-5-3、创建新的角色"><a href="#17-5-3、创建新的角色" class="headerlink" title="17.5.3、创建新的角色"></a>17.5.3、创建新的角色</h4><p>创建一个名为<code>apache</code>的新角色，它能够帮助我们自动安装、运行<code>httpd</code>网站服务，设置防火墙的允许规则，</p><p>以及根据每个主机生成独立的<code>index.html</code>首页文件。用户在调用这个角色后能享受到“一条龙”的网站部署服</p><p>务。</p><p>在<code>Ansible</code>的主配置文件中，第68行定义的是角色保存路径。如果用户新建的角色信息不在规定的目录内，</p><p>则无法使用<code>ansible-galaxy list</code>命令找到。因此需要手动填写新角色的目录路径，或是进</p><p>入<code>/etc/ansible/roles</code>目录内再进行创建。为了避免后期角色信息过于分散导致不好管理，我们还是决定</p><p>在默认目录下进行创建，不再修改。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe roles<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/ansible.cfg</span> 66  67 <span class="token comment" spellcheck="true"># additional paths to search for roles in, colon separated</span> 68 <span class="token comment" spellcheck="true">#roles_path    = /etc/ansible/roles</span> 69 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>ansible-galaxy</code>命令后面跟一个<code>init</code>参数，创建一个新的角色信息，且建立成功后便会在当前目录下生</p><p>成出一个新的目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/ansible/roles</span><span class="token punctuation">[</span>root@linuxprobe roles<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-galaxy init apache</span>- Role apache was created successfully<span class="token punctuation">[</span>root@linuxprobe roles<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>apache nginx nginxinc.nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的<code>apache</code>即是角色名称，也是用于存在角色信息的目录名称。切换到该目录下，查看它的结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe roles<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd apache</span><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>defaults  files  handlers  meta  README.md  tasks  templates  tests  vars<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Ansible</code>角色目录结构及含义</p></blockquote><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>defaults</td><td>包含角色变量的默认值（优先级低）。</td></tr><tr><td>files</td><td>包含角色执行tasks任务时做引用的静态文件。</td></tr><tr><td>handlers</td><td>包含角色的处理程序定义。</td></tr><tr><td>meta</td><td>包含角色的作者、许可证、频台和依赖关系等信息。</td></tr><tr><td>tasks</td><td>包含角色所执行的任务。</td></tr><tr><td>templates</td><td>包含角色任务所使用的Jinja2模板。</td></tr><tr><td>tests</td><td>包含用于测试角色的剧本文件。</td></tr><tr><td>vars</td><td>包含角色变量的默认值（优先级高）。</td></tr></tbody></table><blockquote><p> 下面准备创建新角色。</p></blockquote><blockquote><p><strong>第1步</strong>：打开用于定义角色任务的<code>tasks/main.yml</code>文件。在该文件中不需要定义要执行的主机组列表，</p><p>因为后面会单独编写剧本进行调用，此时应先对<code>apache</code>角色能做的事情（任务）有一个明确的思路，在</p><p>调用角色后<code>yml</code>文件会按照从上到下的顺序自动执行：</p><p><strong>任务1</strong>：安装httpd网站服务。</p><p><strong>任务2</strong>：运行httpd网站服务，并加入到开机启动项中。</p><p><strong>任务3</strong>：配置防火墙，使其放行HTTP协议。</p><p><strong>任务4</strong>：根据每台主机的变量值，生成不同的主页文件。</p></blockquote><blockquote><p>先写出第一个任务。使用<code>yum</code>模块安装httpd网站服务程序（注意格式）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim tasks/main.yml</span>---- name: one  yum:          name: httpd          state: latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：使用<code>service</code>模块启动<code>httpd</code>网站服务程序，并加入到启动项中，保证能够一直为用户提供服</p><p>务。在初次使用模块前，先用<code>ansible-doc</code>命令查看一下帮助和实例信息。由于篇幅的限制，这里对信</p><p>息进行了删减，仅保留了有用的内容。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc service</span><span class="token operator">></span> SERVICE    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/system/service.py<span class="token punctuation">)</span>        Controls services on remote hosts. Supported init systems        include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.        For Windows targets, use the <span class="token punctuation">[</span>win_service<span class="token punctuation">]</span> module instead.  * This module is maintained by The Ansible Core Team  * note: This module has a corresponding action plugin.………………省略部分输出信息………………EXAMPLES:- name: Start <span class="token function">service</span> httpd, <span class="token keyword">if</span> not started  service:    name: httpd    state: started- name: Enable <span class="token function">service</span> httpd, and not <span class="token function">touch</span> the state  service:    name: httpd    enabled: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真幸运，默认的<code>EXAMPLES示</code>例使用的就是<code>httpd</code>网站服务。通过输出信息可得知，启动服务为“state: </p><p>started”参数，而加入到开机启动项则是“enabled: yes”参数。继续编写</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim tasks/main.yml</span>---- name: one  yum:          name: httpd          state: latest- name: two  service:          name: httpd          state: started          enabled: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：配置防火墙的允许策略，让其他主机可以正常访问。在配置防火墙时，需要使用<code>firewalld</code></p><p>模块。同样也是先看一下帮助示例</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe defaults<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc firewalld</span><span class="token operator">></span> FIREWALLD    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/system/firewalld.py<span class="token punctuation">)</span>        This module allows <span class="token keyword">for</span> addition or deletion of services and        ports <span class="token punctuation">(</span>either TCP or UDP<span class="token punctuation">)</span> <span class="token keyword">in</span> either running or permanent        firewalld rules.  * This module is maintained by The Ansible CommunityOPTIONS <span class="token punctuation">(</span><span class="token operator">=</span> is mandatory<span class="token punctuation">)</span>:EXAMPLES:- firewalld:    service: https    permanent: <span class="token function">yes</span>    state: enabled- firewalld:    port: 8081/tcp    permanent: <span class="token function">yes</span>    state: disabled    immediate: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依据输出信息可得知，在<code>firewalld</code>模块设置防火墙策略时，指定协议名称为“<code>service: http</code>”参数，放行</p><p>该协议为“<code>state: enabled</code>”参数，设置为永久生效为“<code>permanent: yes</code>”参数，当前立即生效</p><p>为“<code>immediate: yes</code>”参数。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim tasks/main.yml</span>---- name: one  yum:          name: httpd          state: latest- name: two  service:          name: httpd          state: started          enabled: <span class="token function">yes</span>- name: three  firewalld:          service: http          permanent: <span class="token function">yes</span>          state: enabled          immediate: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：让每台主机显示的主页文件均不相同。在使用<code>Ansible</code>的常规模块时，都是采用“查询版主示例</p><p>并模仿”的方式搞定的，这里为了增加难度，我们再提出个新需求，<strong>即能否让每台主机上运行的httpd网</strong></p><p><strong>站服务都能显示不同的内容呢？例如显示当前服务器的主机名及IP地址。这就要用到template模块及</strong></p><p><strong>Jinja2技术了。</strong></p><p>我们依然使用<code>ansible-doc</code>命令来查询<code>template</code>模块的使用方法。示例部分依然大有帮助</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc template</span><span class="token operator">></span> TEMPLATE    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/files/template.<span class="token operator">></span>        Templates are processed by the L<span class="token punctuation">(</span>Jinja2 templating        language,http://jinja.pocoo.org/docs/<span class="token punctuation">)</span>. Documentation on the        template formatting can be found <span class="token keyword">in</span> the L<span class="token punctuation">(</span>Template Designer        Documentation,http://jinja.pocoo.org/docs/templates/<span class="token punctuation">)</span>.        Additional variables listed below can be used <span class="token keyword">in</span> templates.        `ansible_managed<span class="token string">' (configurable via the `defaults'</span> section of        `ansible.cfg<span class="token string">') contains a string which can be used to describe        the template name, host, modification time of the template        file and the owner uid. `template_host'</span> contains the node name        of the template<span class="token string">'s machine. `template_uid'</span> is the numeric user        <span class="token function">id</span> of the owner. `template_path<span class="token string">' is the path of the template.        `template_fullpath'</span> is the absolute path of the template.        `template_destpath<span class="token string">' is the path of the template on the remote        system (added in 2.8). `template_run_date'</span> is the <span class="token function">date</span> that        the template was rendered.  * This module is maintained by The Ansible Core Team  * note: This module has a corresponding action plugin.………………省略部分输出信息………………EXAMPLES:- name: Template a <span class="token function">file</span> to /etc/files.conf  template:    src: /mytemplates/foo.j2    dest: /etc/file.conf    owner: bin    group: wheel    mode: <span class="token string">'0644'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>template</code>模块的输出信息中可得知，这是一个用于复制文件模板的模块，能够把文件从<code>Ansible</code>服务器复</p><p>制到受管主机上。其中，<code>src</code>参数用于定义本地文件的路径，<code>dest</code>参数用于定义复制到受管主机的文件路</p><p>径，而<code>owner</code>、<code>group</code>、<code>mode</code>参数可选择性地设置文件归属及权限信息。</p><p>正常来说，我们可以直接复制文件的操作，受管主机上会获取到一个与<code>Ansible</code>服务器上的文件一模一样的</p><p>文件。但有时候，我们想让每台客户端根据自身系统的情况产生不同的文件信息，这就需要用到<code>Jinja2</code>技</p><p>术了，<code>Jinja2</code>格式的模板文件后缀是.j2。继续编写</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim tasks/main.yml</span>---- name: one  yum:          name: httpd          state: latest- name: two  service:          name: httpd          state: started          enabled: <span class="token function">yes</span>- name: three  firewalld:          service: http          permanent: <span class="token function">yes</span>          state: enabled          immediate: <span class="token function">yes</span>- name: four  template:          src: index.html.j2          dest: /var/www/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Jinja2</code>是<code>Python</code>语言中一个被广泛使用的模板引擎，最初的设计思想源自<code>Django</code>的模块引擎。<code>Jinja2</code>基</p><p>于此发展了其语法和一系列强大的功能，能够让受管主机根据自身变量产生出不同的文件内容。换句话说，正</p><p>常情况下的复制操作会让新旧文件一模一样，但在使用<code>Jinja2</code>技术时，不是在原始文件中直接写入文件内</p><p>容，而是写入一系列的变量名称。在使用<code>template</code>模块进行复制的过程中，由<code>Ansible</code>服务负责在受管主机</p><p>上收集这些变量名称所对应的值，然后再逐一填写到目标文件中，从而让每台主机的文件都根据自身系统的情</p><p>况独立生成。</p><p>例如，想要让每个网站的输出信息值为“<code>Welcome to</code>主机名<code>on</code>主机地址”，也就是用每个主机自己独有的名称</p><p>和IP地址来替换文本中的内容，这样就有趣太多了。这个实验的难点在于查询到对应的变量名称、主机名及地</p><p>址所对应的值保存在哪里？可以用<code>setup</code>模块进行查询。</p><pre><code>[root@linuxprobe apache]# ansible-doc setup&gt; SETUP    (/usr/lib/python3.6/site-packages/ansible/modules/system/setup.py)        This module is automatically called by playbooks to gather        useful variables about remote hosts that can be used in        playbooks. It can also be executed directly by        `/usr/bin/ansible' to check what variables are available to a        host. Ansible provides many `facts' about the system,        automatically. This module is also supported for Windows        targets.</code></pre><p><code>setup</code>模块的作用是自动收集受管主机上的变量信息，使用<code>-a</code>参数外加<code>filter</code>命令可以对收集来的信息进</p><p>行二次过滤。相应的语法格式为<code>ansible all -m setup -a</code> ‘<code>filter</code>=”<em>关键词</em>“‘，其中*号是第4章节讲到的</p><p>通配符，用于进行关键词查询。例如，如果想搜索各个主机的名称，可以使用通配符搜索所有包含<code>fqdn</code>关键</p><p>词的变量值信息。</p><p><code>FQDN</code>（<code>Fully Qualified Domain Name</code>，完全限定域名）用于在逻辑上准确表示出主机的位置。<code>FQDN</code>常</p><p>常被作为主机名的完全表达形式，比<code>/etc/hostname</code>文件中定义的主机名更加严谨和准确。通过输出信息可</p><p>得知，<code>ansible_fqdn</code>变量保存有主机名称。随后进行下一步操作</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible all -m setup -a 'filter="*fqdn*"'</span>192.168.10.20 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"ansible_facts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"ansible_fqdn"</span><span class="token keyword">:</span> <span class="token string">"linuxprobe.com"</span>,        <span class="token string">"discovered_interpreter_python"</span><span class="token keyword">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">}</span>,    <span class="token string">"changed"</span><span class="token keyword">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于指定主机地址的变量可以用<code>ip</code>作为关键词进行检索。可以看到，<code>ansible_all_ipv4_addresses</code>变量中</p><p>的值是我们想要的信息。如果想输出<code>IPv6</code>形式的地址，则可用<code>ansible_all_ipv6_addresses</code>变量</p><pre><code>[root@linuxprobe ~]# ansible all -m setup -a 'filter="*ip*"'192.168.10.20 | SUCCESS =&gt; {    "ansible_facts": {        "ansible_all_ipv4_addresses": [            "192.168.10.20",            "192.168.122.1"        ],        "ansible_all_ipv6_addresses": [            "fe80::d0bb:17c8:880d:e719"        ],        "ansible_default_ipv4": {},        "ansible_default_ipv6": {},        "ansible_fips": false,        "discovered_interpreter_python": "/usr/libexec/platform-python"    },    "changed": false}………………省略部分输出信息………………</code></pre><p>在确认了主机名与IP地址所对应的具体变量名称后，在角色所对应的<code>templates</code>目录内新建一个与上面的</p><p><code>template</code>模块参数相同的文件名称（<code>index.html.j2</code>）。<code>Jinja2</code>在调用变量值时，格式为在变量名称的两</p><p>侧格加两个大括号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim templates/index.html.j2</span>Welcome to <span class="token punctuation">{</span><span class="token punctuation">{</span> ansible_fqdn <span class="token punctuation">}</span><span class="token punctuation">}</span> on <span class="token punctuation">{</span><span class="token punctuation">{</span> ansible_all_ipv4_addresses <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进行到这里，任务基本就算完成了。最后要做的就是编写一个用于调用<code>apache</code>角色的<code>yml</code>文件，以及执行</p><p>这个文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe apache<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd ~</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim roles.yml</span>---- name: 调用自建角色  hosts: all  roles:          - apache<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-playbook roles.yml </span>PLAY <span class="token punctuation">[</span>调用自建角色<span class="token punctuation">]</span> **************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> **********************************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>apache <span class="token keyword">:</span> one<span class="token punctuation">]</span> *************************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>apache <span class="token keyword">:</span> two<span class="token punctuation">]</span> *************************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>apache <span class="token keyword">:</span> three<span class="token punctuation">]</span> ***********************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>apache <span class="token keyword">:</span> four<span class="token punctuation">]</span> ***********************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span> changed: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>PLAY RECAP **********************************************************************************192.168.10.20   <span class="token keyword">:</span> ok<span class="token operator">=</span>5   changed<span class="token operator">=</span>4  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.21   <span class="token keyword">:</span> ok<span class="token operator">=</span>5   changed<span class="token operator">=</span>4  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>5   changed<span class="token operator">=</span>4  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.23   <span class="token keyword">:</span> ok<span class="token operator">=</span>5   changed<span class="token operator">=</span>4  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0   192.168.10.24   <span class="token keyword">:</span> ok<span class="token operator">=</span>4   changed<span class="token operator">=</span>4  unreachable<span class="token operator">=</span>0   failed<span class="token operator">=</span>0   skipped<span class="token operator">=</span>0   rescued<span class="token operator">=</span>0   ignored<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完毕后，在浏览器中随机输入几台主机的IP地址，即可访问到包含主机<code>FQDN</code>和<code>IP</code>地址的网页了，如图</p><p>17-7～图17-9所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105529565.png" alt="图17-7 随机访问一台主机节点的网站首页"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105540310.png" alt="图17-8 随机访问一台主机节点的网站首页"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105556834.png" alt="图17-9 随机访问一台主机节点的网站首页"></p><h3 id="17-6、创建和使用逻辑卷"><a href="#17-6、创建和使用逻辑卷" class="headerlink" title="17.6、创建和使用逻辑卷"></a>17.6、创建和使用逻辑卷</h3><blockquote><p>创建一个能批量、自动管理逻辑卷设备的剧本，不但能大大提高硬盘设备的管理效率，而且还能避免手</p><p>动创建带来的错误。例如，我们想在每台受管主机上都创建出一个名为<code>data</code>的逻辑卷设备，大小为</p><p>150MB，归属于<code>research</code>卷组。如果创建成功，则进一步用Ext4文件系统进行格式化操作；如果创建</p><p>失败，则给用户输出一条报错提醒，以便排查原因。</p><p>在这种情况下，使用Ansible剧本要比使用Shell脚本的优势大，原因主要有下面两点：</p><ul><li><strong><code>Ansible</code>模块化的功能让操作更标准，只要在执行过程中无报错，那么便会依据远程主机的系统版本及配置自动做出判断和操作，不用担心因系统变化而导致命令失效的问题。</strong></li><li><strong><code>Ansible</code>服务在执行剧本文件时会进行判断：如果该文件或该设备已经被创建过，或是某个动作（play）已经被执行过，则绝对不会再重复执行；而使用Shell脚本有可能导致设备被重复格式化，导致数据丢失。</strong></li></ul></blockquote><p>首先在<code>prod</code>组的两台主机上分别添加一块硬盘设备，大小为20GB，类型为SCSI，其余选项选择默认值，如</p><p>图17-10～图17-12所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105807981.png" alt="图17-10 添加一块新硬盘"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105821291.png" alt="图17-11 设置硬盘类型"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825105836257.png" alt="图17-12 新硬盘添加完毕"></p><p>通过回忆第7章学习过的逻辑卷的知识，我们应该让剧本文件依次创建物理卷（PV）、卷组（VG）及逻辑卷</p><p>（LV）。需要先使用lvg模块让设备支持逻辑卷技术，然后创建一个名为research的卷组。lvg模块的帮助信息</p><p>如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc lvg</span><span class="token operator">></span> LVG    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/system/lvg.py<span class="token punctuation">)</span>        This module creates, removes or resizes volume groups.  * This module is maintained by The Ansible Community………………省略部分输出信息………………EXAMPLES:- name: Create a volume group on <span class="token function">top</span> of /dev/sda1 with physical extent size <span class="token operator">=</span> 3<span class="token operator">></span>  lvg:    vg: vg.services    pvs: /dev/sda1    pesize: 32- name: Create a volume group on <span class="token function">top</span> of /dev/sdb with physical extent size <span class="token operator">=</span> 12<span class="token operator">></span>  lvg:    vg: vg.services    pvs: /dev/sdb    pesize: 128K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过输出信息可得知，创建<code>PV</code>和<code>VG</code>的<code>lvg</code>模块总共有3个必备参数。其中，<code>vg</code>参数用于定义卷组的名称，</p><p><code>pvs</code>参数用于指定硬盘设备的名称，<code>pesize</code>参数用于确定最终卷组的容量大小（可以用PE个数或容量值进行</p><p>指定）。这样一来，我们先创建出一个由<code>/dev/sdb</code>设备组成的名称为<code>research</code>、大小为150MB的卷组设</p><p>备。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim lv.yml</span>---- name: 创建和使用逻辑卷  hosts: all  tasks:          - name: one            lvg:                    vg: research                    pvs: /dev/sdb                    pesize: 150M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于刚才只在<code>prod</code>组的两台主机上添加了新硬盘设备文件，因此在执行上述操作时其余3台主机会提示未创</p><p>建成功，这属于正常情况。接下来使用<code>lvol</code>模块创建出逻辑卷设备。还是按照惯例，先查看模块的帮助信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc lvol</span><span class="token operator">></span> LVOL    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/system/lvol.py<span class="token punctuation">)</span>        This module creates, removes or resizes logical volumes.  * This module is maintained by The Ansible Community………………省略部分输出信息………………EXAMPLES:- name: Create a logical volume of 512m  lvol:    vg: firefly    lv: <span class="token function">test</span>    size: 512- name: Create a logical volume of 512m with disks /dev/sda and /dev/sdb  lvol:    vg: firefly    lv: <span class="token function">test</span>    size: 512    pvs: /dev/sda,/dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过输出信息可得知，<code>lvol</code>是用于创建逻辑卷设备的模块。其中，<code>vg</code>参数用于指定卷组名称，<code>lv</code>参数用于</p><p>指定逻辑卷名称，<code>size</code>参数则用于指定最终逻辑卷设备的容量大小（不用加单位，默认为MB）。填写好参</p><p>数，创建出一个大小为150MB、归属于research卷组且名称为data的逻辑卷设备</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim lv.yml</span>---- name: 创建和使用逻辑卷  hosts: all  tasks:          - name: one            lvg:                    vg: research                    pvs: /dev/sdb                    pesize: 150M          - name: two            lvol:                    vg: research                    lv: data                    size: 150M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样还不够好，如果还能将创建出的<code>/dev/research/data</code>逻辑卷设备自动用<code>Ext4</code>文件系统进行格式化操</p><p>作，则又能帮助运维管理员减少一些工作量。可使用<code>filesystem</code>模块来完成设备的文件系统格式化操作。该</p><p>模块的帮助信息如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc filesystem</span><span class="token operator">></span> FILESYSTEM    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/system/filesy<span class="token operator">></span>        This module creates a filesystem.  * This module is maintained by The Ansible Community………………省略部分输出信息………………EXAMPLES:- name: Create a ext2 filesystem on /dev/sdb1  filesystem:    fstype: ext2    dev: /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>filesystem</code>模块的参数真是简练，<code>fstype</code>参数用于指定文件系统的格式化类型，<code>dev</code>参数用于指定要格式</p><p>化的设备文件路径。继续编写</p><pre class="line-numbers language-bash"><code class="language-bash">---- name: 创建和使用逻辑卷  hosts: all  tasks:          - name: one            lvg:                    vg: research                    pvs: /dev/sdb                    pesize: 150M          - name: two            lvol:                    vg: research                    lv: data                    size: 150M          - name: three            filesystem:                    fstype: ext4                    dev: /dev/research/data <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先用<code>block</code>操作符将上述的3个模块命令作为一个整体（相当于对这3个模块的执行结果作为一个整体进行</p><p>判断），然后使用<code>rescue</code>操作符进行救援，且只有<code>block</code>块中的模块执行失败后才会调用<code>rescue</code>中的救援</p><p>模块。其中，<code>debug</code>模块的<code>msg</code>参数的作用是，如果<code>block</code>中的模块执行失败，则输出一条信息到屏幕，用</p><p>于提醒用户。完成编写后的剧本是下面这个样子</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim lv.yml</span>---- name: 创建和使用逻辑卷  hosts: all  tasks:          - block:                  - name: one                    lvg:                            vg: research                            pvs: /dev/sdb                            pesize: 150M                  - name: two                    lvol:                            vg: research                            lv: data                            size: 150M                  - name: three                    filesystem:                            fstype: ext4                            dev: /dev/research/data            rescue:                    - debug:                            msg: <span class="token string">"Could not create logical volume of that size"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>YAML</code>语言对格式有着硬性的要求，既然<code>rescue</code>是对<code>block</code>内的模块进行救援的功能代码，因此<code>recue</code>和</p><p><code>block</code>两个操作符必须严格对齐，错开一个空格都会导致剧本执行失败。确认无误后，执行<code>lv.yml</code>剧本文件</p><p>检阅一下效果</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-playbook lv.yml </span>PLAY <span class="token punctuation">[</span>创建和使用逻辑卷<span class="token punctuation">]</span> *********************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *********************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>one<span class="token punctuation">]</span> *********************************************************************fatal: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>: FAILED<span class="token operator">!</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">"changed"</span><span class="token keyword">:</span> false, <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Device /dev/sdb not found."</span><span class="token punctuation">}</span>fatal: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>: FAILED<span class="token operator">!</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">"changed"</span><span class="token keyword">:</span> false, <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Device /dev/sdb not found."</span><span class="token punctuation">}</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>fatal: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>: FAILED<span class="token operator">!</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">"changed"</span><span class="token keyword">:</span> false, <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Device /dev/sdb not found."</span><span class="token punctuation">}</span>TASK <span class="token punctuation">[</span>two<span class="token punctuation">]</span> *********************************************************************changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>three<span class="token punctuation">]</span> *********************************************************************changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>debug<span class="token punctuation">]</span> *******************************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Could not create logical volume of that size"</span><span class="token punctuation">}</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Could not create logical volume of that size"</span><span class="token punctuation">}</span>ok: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token string">"msg"</span><span class="token keyword">:</span> <span class="token string">"Could not create logical volume of that size"</span><span class="token punctuation">}</span>PLAY RECAP *********************************************************************192.168.10.20  <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>1  ignored<span class="token operator">=</span>0   192.168.10.21  <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>1  ignored<span class="token operator">=</span>0   192.168.10.22  <span class="token keyword">:</span> ok<span class="token operator">=</span>4  changed<span class="token operator">=</span>3  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.23  <span class="token keyword">:</span> ok<span class="token operator">=</span>4  changed<span class="token operator">=</span>3  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.24  <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>1  ignored<span class="token operator">=</span>0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在剧本运行完毕后的执行记录（<code>PLAY RECAP</code>）中可以很清晰地看到只有192.168.10.22及192.168.10.23这</p><p>两台<code>prod</code>组中的主机执行成功了，其余3台主机均触发了<code>rescue</code>功能。登录到任意一台<code>prod</code>组的主机上，</p><p>找到新建的逻辑卷设备信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvdisplay </span>  --- Logical volume ---  LV Path                /dev/research/data  LV Name                data  VG Name                research  LV UUID                EOUliC-tbkk-kOJR-8NaH-O9XQ-ijrK-TgEYGj  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> linuxprobe.com, 2021-04-23 11:00:21 +0800  LV Status              available  <span class="token comment" spellcheck="true"># open                 0</span>  LV Size                5.00 GiB  Current LE             1  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:2………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-7、判断主机组名"><a href="#17-7、判断主机组名" class="headerlink" title="17.7、判断主机组名"></a>17.7、判断主机组名</h3><p>在上面的剧本实验中，我们可以让不同的主机根据自身不同的变量信息而生成出独特的网站主页文件，但却无</p><p>法对某个主机组进行针对性的操作。其实，在每个客户端中都会有一个名为<code>inventory_hostname</code>的变量，</p><p>用于定义每台主机所对应的<code>Ansible</code>服务的主机组名称，也就是<code>/etc/ansible/hosts</code>文件中所对应的分组</p><p>信息，例如<code>dev</code>、<code>test</code>、<code>prod</code>、<code>balancers</code>。</p><p><code>inventory_hostname</code>是<code>Ansible</code>服务中的魔法变量，这意味着无法使用<code>setup</code>模块直接进行查询，诸如</p><p><code>ansible all -m setup -a</code> ‘filter=”<em>关键词</em>“‘这样的命令将对它失效。魔法变量需要在执行剧本文件时的</p><p><code>Gathering Facts</code>阶段进行搜集，直接查询是看不到的，<strong>只能在剧本文件中进行调用</strong>。</p><blockquote><p>在获得了存储主机组名称的变量名称后，接下来开始实战。这里的需求如下：</p><ul><li>若主机在<code>dev</code>分组中，则修改<code>/etc/issue</code>文件内容为<code>Development</code>；</li><li>若主机在<code>test</code>分组中，则修改<code>/etc/issue</code>文件内容为<code>Test</code>；</li><li>若主机在<code>prod</code>分组中，则修改<code>/etc/issue</code>文件内容为<code>Production</code>。</li></ul></blockquote><blockquote><p>先查询<code>copy</code>模块的帮助信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc copy</span><span class="token operator">></span> COPY    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/files/copy.py<span class="token punctuation">)</span>        The `copy<span class="token string">' module copies a file from the local or remote        machine to a location on the remote machine. Use the [fetch]        module to copy files from remote locations to the local box.        If you need variable interpolation in copied files, use the        [template] module. Using a variable in the `content'</span> field        will result <span class="token keyword">in</span> unpredictable output. For Windows targets, use        the <span class="token punctuation">[</span>win_copy<span class="token punctuation">]</span> module instead.  * This module is maintained by The Ansible Core Team  * note: This module has a corresponding action plugin.………………省略部分输出信息………………EXAMPLES:- name: Copy <span class="token function">file</span> with owner and permissions  copy:    src: /srv/myfiles/foo.conf    dest: /etc/foo.conf    owner: foo    group: foo    mode: <span class="token string">'0644'</span>- name: Copy using inline content  copy:    content: <span class="token string">'# This file was moved to /etc/other.conf'</span>    dest: /etc/mine.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在输出信息中列举了两种管理文件内容的示例。第一种用于文件的复制行为，第二种是通过<code>content</code>参数定</p><p>义内容，通过<code>dest</code>参数指定新建文件的名称。显然，第二种更加符合当前的实验场景。编写剧本文件如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim issue.yml</span>---- name: 修改文件内容  hosts: all  tasks:          - name: one            copy:                    content: <span class="token string">'Development'</span>                    dest: /etc/issue          - name: two            copy:                    content: <span class="token string">'Test'</span>                    dest: /etc/issue          - name: three            copy:                    content: <span class="token string">'Production'</span>                    dest: /etc/issue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果按照这种顺序执行下去，每一台主机的<code>/etc/issue</code>文件都会被重复修改3次，最终定格</p><p>在“<code>Production</code>”字样，这显然缺少了一些东西。我们应该依据<code>inventory_hostname</code>变量中的值进行判断。</p><p>若主机为<code>dev</code>组，则执行第一个动作；若主机为<code>test</code>组，则执行第二个动作；若主机为<code>prod</code>组，则执行第</p><p>三个动作。因此，要进行3次判断。</p><blockquote><p> <code>when</code>是用于判断的语法，我们将其用在每个动作的下方进行判断，使得只有在满足条件才会执行</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim issue.yml</span>---- name: 修改文件内容  hosts: all  tasks:          - name: one            copy:                    content: <span class="token string">'Development'</span>                    dest: /etc/issue            when: <span class="token string">"inventory_hostname in groups.dev"</span>          - name: two            copy:                    content: <span class="token string">'Test'</span>                    dest: /etc/issue            when: <span class="token string">"inventory_hostname in groups.test"</span>          - name: three            copy:                    content: <span class="token string">'Production'</span>                    dest: /etc/issue            when: <span class="token string">"inventory_hostname in groups.prod"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行剧本文件，在过程中可清晰地看到由于<code>when</code>语法的作用，未在指定主机组中的主机将被跳过</p><p>（<code>skipping</code>）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-playbook issue.yml </span>PLAY <span class="token punctuation">[</span>修改文件内容<span class="token punctuation">]</span> ************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> ********************************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>one<span class="token punctuation">]</span> ********************************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span> skipping: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>two<span class="token punctuation">]</span> ********************************************************************************skipping: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.25<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>three<span class="token punctuation">]</span> ******************************************************************************skipping: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>PLAY RECAP ********************************************************************************192.168.10.20   <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>2  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.21   <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>2  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>2  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.23   <span class="token keyword">:</span> ok<span class="token operator">=</span>2  changed<span class="token operator">=</span>1  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>2  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0 192.168.10.24   <span class="token keyword">:</span> ok<span class="token operator">=</span>1  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>3  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录到<code>dev</code>组的192.168.10.20主机上，查看文件内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/issue </span>Development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>登录到<code>test</code>组的192.168.10.21主机上，查看文件内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/issue </span>Test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>登录到<code>prod</code>组的192.168.10.22/23主机上，查看文件内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/issue </span>Production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="17-8、管理文件属性"><a href="#17-8、管理文件属性" class="headerlink" title="17.8、管理文件属性"></a>17.8、管理文件属性</h3><blockquote><p><code>Ansible</code>服务将常用的文件管理功能都合并到了<code>file</code>模块中，大家不用再为了寻找模块而“东奔西</p><p>跑”了。先来看一下<code>file</code>模块的帮助信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-doc file</span><span class="token operator">></span> FILE    <span class="token punctuation">(</span>/usr/lib/python3.6/site-packages/ansible/modules/files/file.py<span class="token punctuation">)</span>        Set attributes of files, symlinks or directories.        Alternatively, remove files, symlinks or directories. Many        other modules support the same options as the `file<span class="token string">' module -        including [copy], [template], and [assemble]. For Windows        targets, use the [win_file] module instead.  * This module is maintained by The Ansible Core Team………………省略部分输出信息………………EXAMPLES:- name: Change file ownership, group and permissions  file:    path: /etc/foo.conf    owner: foo    group: foo    mode: '</span>0644<span class="token string">'- name: Create a symbolic link  file:    src: /file/to/link/to    dest: /path/to/symlink    owner: foo    group: foo    state: link- name: Create a directory if it does not exist  file:    path: /etc/some_directory    state: directory    mode: '</span>0755'- name: Remove <span class="token function">file</span> <span class="token punctuation">(</span>delete file<span class="token punctuation">)</span>  file:    path: /etc/foo.txt    state: absent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>path</code>参数定义了文件的路径，<code>owner</code>参数定义了文件所有者，<code>group</code>参数定义了文件所属组，</p><p><code>mode</code>参数定义了文件权限，<code>src</code>参数定义了源文件的路径，<code>dest</code>参数定义了目标文件的路径，</p><p><code>state</code>参数则定义了文件类型。</p><blockquote><p>实验内容：</p><p>请创建出一个名为<code>/linuxprobe</code>的新目录，所有者及所属组均为<code>root</code>管理员身份；</p><p>设置所有者和所属于组拥有对文件的完全控制权，而其他人则只有阅读和执行权限；</p><p>给予<code>SGID</code>特殊权限；</p><p>仅在<code>dev</code>主机组的主机上实施。</p></blockquote><p>第二条要求是算术题，即将权限描述转换为数字表示法，即可读为4、可写为2、可执行为1。大家可以先自行</p><p>默默计算一下答案。此前在编写剧本文件时，<code>hosts</code>参数对应的一直是<code>all</code>，即全体主机，这次需要修改为</p><p>仅对<code>dev</code>主机组成员生效，请小心谨慎。编写模块代码如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim chmod.yml</span>---- name: 管理文件属性  hosts: dev  tasks:          - name: one            file:                    path: /linuxprobe                    state: directory                     owner: root                    group: root                    mode: <span class="token string">'2775'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>临时添加一个需求：请再创建一个名称为<code>/linuxcool</code>的快捷方式文件，指向刚刚建立的<code>/linuxprobe</code>目</p><p>录。这样用户在访问两个目录时就能有相同的内容了。在使用<code>file</code>模块设置快捷方式时，不需要再单独创</p><p>建目标文件，<code>Ansible</code>服务会帮我们完成</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim chmod.yml</span>---- name: 管理文件属性  hosts: dev  tasks:          - name: one            file:                    path: /linuxprobe                    state: directory                     owner: root                    group: root                    mode: <span class="token string">'2775'</span>          - name: two            file:                    src: /linuxprobe                    dest: /linuxcool                    state: <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剧本文件的执行过程如下所示</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-playbook chmod.yml </span>PLAY <span class="token punctuation">[</span>管理文件属性<span class="token punctuation">]</span> ***************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> ***********************************************************ok: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>one<span class="token punctuation">]</span> ***********************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>two<span class="token punctuation">]</span> ***********************************************************************changed: <span class="token punctuation">[</span>192.168.10.20<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.21<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.22<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.23<span class="token punctuation">]</span>skipping: <span class="token punctuation">[</span>192.168.10.24<span class="token punctuation">]</span>PLAY RECAP ***********************************************************************192.168.10.20   <span class="token keyword">:</span> ok<span class="token operator">=</span>3  changed<span class="token operator">=</span>2  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>0  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0   192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>1  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>3  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>1  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>3  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>1  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>3  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0192.168.10.22   <span class="token keyword">:</span> ok<span class="token operator">=</span>1  changed<span class="token operator">=</span>0  unreachable<span class="token operator">=</span>0  failed<span class="token operator">=</span>0  skipped<span class="token operator">=</span>3  rescued<span class="token operator">=</span>0  ignored<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到<code>dev</code>组的主机中，可以看到<code>/linuxprobe</code>目录及<code>/linuxcool</code>的快捷方式均已经被顺利创建</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /linuxprobe</span>drwxrwsr-x. 2 root root 6 Apr 20 09:52 /linuxprobe<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /linuxcool</span>lrwxrwxrwx. 1 root root 11 Apr 20 09:52 /linuxcool -<span class="token operator">></span> /linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-9、管理密码库文件"><a href="#17-9、管理密码库文件" class="headerlink" title="17.9、管理密码库文件"></a>17.9、管理密码库文件</h3><p>自<code>Ansible 1.5</code>版本发布后，<code>vault</code>作为一项新功能进入到了运维人员的视野。<strong>它不仅能对密码、剧本等敏</strong></p><p><strong>感信息进行加密，而且还可以加密变量名称和变量值，从而确保数据不会被他人轻易阅读</strong>。</p><p>使用<code>ansible-vault</code>命令可以实现内容的新建（<code>create</code>）、加密（<code>encrypt</code>）、解密</p><p>（<code>decrypt</code>）、修改密码（<code>rekey</code>）及查看（<code>view</code>）等功能</p><blockquote><p><strong>第1步</strong>：创建出一个名为<code>locker.yml</code>的配置文件，其中保存了两个变量值</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim locker.yml</span>---pw_developer: Imadevpw_manager: Imamgr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第2步：使用<code>ansible-vault</code>命令对文件进行加密。由于需要每次输入密码比较麻烦，因此还应新建一</p><p>个用于保存密码值的文本文件，以便让<code>ansible-vault</code>命令自动调用。为了保证数据的安全性，在新建</p><p>密码文件后将该文件的权限设置为600，确保仅管理员可读可写</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /root/secret.txt</span>whenyouwishuponastar<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 600 /root/secret.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>Ansible</code>服务的主配置文件中，在第140行的<code>vault_password_file</code>参数后指定密码值保存的文件路径，</p><p>准备进行调用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ansible/ansible.cfg</span>137 138 <span class="token comment" spellcheck="true"># If set, configures the path to the Vault password file as an alternative to</span>139 <span class="token comment" spellcheck="true"># specifying --vault-password-file on the command line.</span>140 vault_password_file <span class="token operator">=</span> /root/secret.txt141 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：在设置好密码文件的路径后，<code>Ansible</code>服务便会自动进行加载。用户也就不用在每次加密或解密</p><p>时都重复输入密码了。例如，在加密刚刚创建的<code>locker.yml</code>文件时，只需要使用<code>encrypt</code>参数即可</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-vault encrypt locker.yml</span>Encryption successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>件将使用<code>AES 256</code>加密方式进行加密，也就是意味着密钥有2256种可能。查看到加密后的内容为</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat locker.yml </span><span class="token variable">$ANSIBLE_VAULT</span><span class="token punctuation">;</span>1.1<span class="token punctuation">;</span>AES256386532343138393361383839316638373335333961613437303535303130383136316534393663353432346333346239386334663836643432353434373733310a306662303565633762313232663763383663343162393762626562306435316566653761666636356564363633386264643334303431626664643035316133650a333331393538616130656136653630303239663561663237373733373638623832343030616238656334663366363639616230393432363563363563616137363337396239616334303865663838623363333339396637363061626363383266<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想使用原始密码了呢？也可以使用<code>rekey</code>参数手动对文件进行改密操作，</p><p>同时应结合<code>--ask-vault-pass</code>参数进行修改，否则<code>Ansible</code>服务会因接收不</p><p>到用户输入的旧密码值而拒绝新的密码变更请求</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-vault rekey --ask-vault-pass locker.yml </span>Vault password: 输入旧的密码New Vault password: 输入新的密码Confirm New Vault password: 再输入新的密码Rekey successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：如果想查看和修改加密文件中的内容，该怎么操作呢？对于已经加密过的文件，需要使用</p><p><code>ansible-vault</code>命令的<code>edit</code>参数进行修改，随后用<code>view</code>参数即可查看到修改后的内容。</p><p><code>ansible-vault</code>命令对加密文件的编辑操作默认使用的是Vim编辑器，在修改完毕后请记</p><p>得执行<code>wq</code>操作保存后退出</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-vault edit locker.yml</span>---pw_developer: Imadevpw_manager: Imamgrpw_production: Imaprod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，再用<code>view</code>参数进行查看，便是最新的内容了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ansible-vault view locker.yml</span>Vault password: 输入密码后敲击回车确认--- pw_developer: Imadev pw_manager: Imamgr pw_production: Imaprod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十八、使用MariaDB数据库管理系统"><a href="#十八、使用MariaDB数据库管理系统" class="headerlink" title="十八、使用MariaDB数据库管理系统"></a>十八、使用MariaDB数据库管理系统</h2><hr><h3 id="18-1、初始化maridDB服务"><a href="#18-1、初始化maridDB服务" class="headerlink" title="18.1、初始化maridDB服务"></a>18.1、初始化<code>maridDB</code>服务</h3><blockquote><p>安装</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y mariadb mariadb-server</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将其加入到开机启动项中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start  mariadb </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable mariadb </span>Created symlink /etc/systemd/system/mysql.service → /usr/lib/systemd/system/mariadb.service.Created symlink /etc/systemd/system/mysqld.service → /usr/lib/systemd/system/mariadb.service.Created symlink /etc/systemd/system/multi-user.target.wants/mariadb.service → /usr/lib/systemd/system/mariadb.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在确认<code>mariadb</code>数据库软件程序安装完毕并成功启动后请不要立即使用。为了确保数据库的安全性和正常运转，需要先对数据库程序进行初始化操作。这个初始化操作涉及下面5个步骤：</p><ul><li>设置<code>root</code>管理员在数据库中的密码值（注意，该密码并非<code>root</code>管理员在系统中的密码，这里的密码值默认应该为空，可直接按回车键）。</li><li>设置<code>root</code>管理员在数据库中的专有密码。</li><li>删除匿名用户，并使用<code>root</code>管理员从远程登录数据库，以确保数据库上运行的业务的安全性。</li><li>删除默认的测试数据库，取消测试数据库的一系列访问权限。</li><li>刷新授权列表，让初始化的设定立即生效。</li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql_secure_installation </span>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB      SERVERS IN PRODUCTION USE<span class="token operator">!</span>  PLEASE READ EACH STEP CAREFULLY<span class="token operator">!</span>In order to log into MariaDB to secure it, we<span class="token string">'ll need the currentpassword for the root user.  If you'</span>ve just installed MariaDB, andyou haven<span class="token string">'t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): 输入管理员原始密码，默认为空值，直接回车即可OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] y（设置管理员密码）New password: 输入新的密码Re-enter new password: 再次输入密码Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem.  This is intended only for testing, and to make the installationgo a bit smoother.  You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y（删除匿名账户） ... Success!Normally, root should only be allowed to connect from '</span>localhost<span class="token string">'.  Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] y（禁止管理员从远程登录） ... Success!By default, MariaDB comes with a database named '</span><span class="token function">test</span><span class="token string">' that anyone canaccess.  This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y（删除测试数据库及其访问权限） - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y（刷新授权表，让初始化后的设定立即生效） ... Success!Cleaning up...All done!  If you'</span>ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks <span class="token keyword">for</span> using MariaDB<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在很多生产环境中都需要使用站库分离的技术（即网站和数据库不在同一个服务器上），如果需要让<code>root</code>管</p><p>理员远程访问数据库，可在上面的初始化操作中设置策略，以允许<code>root</code>管理员从远程访问。然后还需要设置</p><p>防火墙，使其放行对数据库服务程序的访问请求。数据库服务程序默认会占用3306端口，在防火墙策略中服</p><p>务名称统一叫作<code>mysql</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --add-service=mysql</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一切准备就绪。现在我们将首次登录<code>MariaDB</code>数据库。管理数据库的命令为<code>mysql</code>，其中，<code>-u</code>参数用来指定</p><p>以<code>root</code>管理员的身份登录，而<code>-p</code>参数用来验证该用户在数据库中的密码值。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -u root -p</span>Enter password: 输入刚才设置的管理员密码后敲击回车Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MariaDB connection <span class="token function">id</span> is 16Server version: 10.3.11-MariaDB MariaDB ServerCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初次使用数据库管理工具的读者，可以输入<code>help</code>命令查看<code>mariadb</code>服务能做的操作，语句的用法与<code>MySQL</code></p><p>一模一样</p><pre class="line-numbers language-bash"><code class="language-bash">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">help</span>General information about MariaDB can be found at http://mariadb.orgList of all MySQL commands:Note that all text commands must be first on line and end with <span class="token string">';'</span>?         <span class="token punctuation">(</span>\?<span class="token punctuation">)</span> Synonym <span class="token keyword">for</span> `help<span class="token string">'.clear     (\c) Clear the current input statement.connect   (\r) Reconnect to the server. Optional arguments are db and host.delimiter (\d) Set statement delimiter.edit      (\e) Edit command with <span class="token variable">$EDITOR</span>.ego       (\G) Send command to mysql server, display result vertically.exit      (\q) Exit mysql. Same as quit.go        (\g) Send command to mysql server.help      (\h) Display this help.nopager   (\n) Disable pager, print to stdout.notee     (\t) Don'</span>t <span class="token function">write</span> into outfile.pager     <span class="token punctuation">(</span>\P<span class="token punctuation">)</span> Set PAGER <span class="token punctuation">[</span>to_pager<span class="token punctuation">]</span>. Print the query results via PAGER.print     <span class="token punctuation">(</span>\p<span class="token punctuation">)</span> Print current command.prompt    <span class="token punctuation">(</span>\R<span class="token punctuation">)</span> Change your mysql prompt.quit      <span class="token punctuation">(</span>\q<span class="token punctuation">)</span> Quit mysql.rehash    <span class="token punctuation">(</span>\#<span class="token punctuation">)</span> Rebuild completion hash.<span class="token function">source</span>    <span class="token punctuation">(</span>\.<span class="token punctuation">)</span> Execute an SQL script file. Takes a <span class="token function">file</span> name as an argument.status    <span class="token punctuation">(</span>\s<span class="token punctuation">)</span> Get status information from the server.system    <span class="token punctuation">(</span>\<span class="token operator">!</span><span class="token punctuation">)</span> Execute a system shell command.<span class="token function">tee</span>       <span class="token punctuation">(</span>\T<span class="token punctuation">)</span> Set outfile <span class="token punctuation">[</span>to_outfile<span class="token punctuation">]</span>. Append everything into given outfile.use       <span class="token punctuation">(</span>\u<span class="token punctuation">)</span> Use another database. Takes database name as argument.charset   <span class="token punctuation">(</span>\C<span class="token punctuation">)</span> Switch to another charset. Might be needed <span class="token keyword">for</span> processing binlog with multi-byte charsets.warnings  <span class="token punctuation">(</span>\W<span class="token punctuation">)</span> Show warnings after every statement.nowarning <span class="token punctuation">(</span>\w<span class="token punctuation">)</span> Don<span class="token string">'t show warnings after every statement.For server side help, type '</span><span class="token function">help</span> contents'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看数据库管理系统中当前都有哪些数据库</p></blockquote><pre class="line-numbers language-ash"><code class="language-ash">bMariaDB [(none)]> SHOW databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema |+--------------------+3 rows in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用数据库命令将<code>root</code>管理员在数据库管理系统中的密码值修改为<code>linuxprobe</code>。这样退出后再尝试登录，</p><p>如果还坚持输入原先的密码，则将提示访问失败</p><pre class="line-numbers language-bash"><code class="language-bash">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> SET password <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'linuxprobe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK, 0 rows affected <span class="token punctuation">(</span>0.001 sec<span class="token punctuation">)</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">exit</span>Bye<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -u root -p</span>Enter password: 此处输入管理员在数据库中的旧密码ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入新密码（linuxprobe）后，便可顺利进入数据库管理工具中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -u root -p</span>Enter password: 此处输入管理员在数据库中的新密码Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MariaDB connection <span class="token function">id</span> is 20Server version: 10.3.11-MariaDB MariaDB ServerCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-2、管理用户以及授权"><a href="#18-2、管理用户以及授权" class="headerlink" title="18.2、管理用户以及授权"></a>18.2、管理用户以及授权</h3><blockquote><p>按照“CREATE USER用户名@主机名IDENTIFIED BY ‘密码’;”的格式创建数据库管理用户</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> CREATE USER luke@localhost IDENTIFIED BY 'linuxprobe';Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>创建的用户信息可以使用SELECT命令语句来查询。下面命令查询的是用户luke的主机名称、用户名称以</p><p>及经过加密的密码值信息</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> use mysql;Database changedMariaDB [mysql]> SELECT HOST,USER,PASSWORD FROM user WHERE USER="luke";+-----------+------+-------------------------------------------+| HOST      | USER | PASSWORD                                  |+-----------+------+-------------------------------------------+| localhost | luke | *55D9962586BE75F4B7D421E6655973DB07D6869F |+-----------+------+-------------------------------------------+1 row in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不过，用户<code>luke</code>仅仅是一位普通用户，没有数据库的任何操作权限。不信的话，可以切换到<code>luke</code>用户</p><p>来查询数据库管理系统中当前都有哪些数据库。可以发现，该用户甚至没法查看完整的数据库列表（刚</p><p>才使用<code>root</code>用户时可以查看到3个数据库列表）</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [mysql]> exitBye[root@linuxprobe ~]# mysql -u luke -pEnter password: 输入luke用户的数据库密码Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 21Server version: 10.3.11-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MariaDB [(none)]> SHOW databases;+--------------------+| Database           |+--------------------+| information_schema |+--------------------+1 row in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>GRANT命令的常见格式以及解释</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>GRANT 权限 ON 数据库.表单名称 TO 用户名@主机名</td><td>对某个特定数据库中的特定表单给予授权</td></tr><tr><td>GRANT 权限 ON 数据库.* TO 用户名@主机名</td><td>对某个特定数据库中的所有表单给予授权</td></tr><tr><td>GRANT 权限 ON <em>.</em> TO 用户名@主机名</td><td>对所有数据库及所有表单给予授权</td></tr><tr><td>GRANT 权限1,权限2 ON 数据库.* TO 用户名@主机名</td><td>对某个数据库中的所有表单给予多个授权</td></tr><tr><td>GRANT ALL PRIVILEGES ON <em>.</em> TO 用户名@主机名</td><td>对所有数据库及所有表单给予全部授权（需谨慎操作）</td></tr></tbody></table><blockquote><p>针对<code>mysql</code>数据库中的<code>user</code>表单向用户<code>luke</code>授予<strong>查询、更新、删除</strong>以及<strong>插入</strong>等权限</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">[root@linuxprobe ~]# mysql -u root -pEnter password: 输入管理员的数据库密码MariaDB [(none)]> use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mysql]> GRANT SELECT,UPDATE,DELETE,INSERT ON mysql.user TO luke@localhost;Query OK, 0 rows affected (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看一下用户<code>luke</code>的权限</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]>  SHOW GRANTS FOR luke@localhost;+---------------------------------------------------------------------------------------------+| Grants for luke@localhost                                                                   |+---------------------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO 'luke'@'localhost' IDENTIFIED BY PASSWORD '*55D9962586BE75F4B7D421E6655973DB07D6869F' || GRANT SELECT, INSERT, UPDATE, DELETE ON `mysql`.`user` TO 'luke'@'localhost'                |+---------------------------------------------------------------------------------------------+2 rows in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面输出信息中显示用户<code>luke</code>已经拥有了针对<code>mysql</code>数据库中<code>user</code>表单的一系列权限了。这时我们再</p><p>切换到用户<code>luke</code>，此时就能够看到<code>mysql</code>数据库了，而且还能看到表单<code>user</code>（其余表单会因无权限而</p><p>被继续隐藏）</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">[root@linuxprobe ~]# mysql -u luke -pEnter password: 输入luke用户的数据库密码MariaDB [(none)]> SHOW databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              |+--------------------+2 rows in set (0.000 sec)MariaDB [(none)]> use mysql;Database changedMariaDB [mysql]> SHOW tables;+-----------------+| Tables_in_mysql |+-----------------+| user            |+-----------------+1 row in set (0.001 sec)MariaDB [mysql]> exitByes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>切换回root管理员用户，移除刚才的授权</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">[root@linuxprobe ~]# mysql -u root -pEnter password: 输入管理员的数据库密码MariaDB [(none)]> use mysql;Database changedMariaDB [(none)]> REVOKE SELECT,UPDATE,DELETE,INSERT ON mysql.user FROM luke@localhost;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行移除授权命令后，再来查看用户luke的信息</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> SHOW GRANTS FOR luke@localhost;+---------------------------------------------------------------------------------------------+| Grants for luke@localhost                                                                   |+---------------------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO 'luke'@'localhost' IDENTIFIED BY PASSWORD '*55D9962586BE75F4B7D421E6655973DB07D6869F' |+---------------------------------------------------------------------------------------------+1 row in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DROP命令删除用户</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> DROP user luke@localhost;Query OK, 0 rows affected (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="18-3、创建数据库与表单"><a href="#18-3、创建数据库与表单" class="headerlink" title="18.3、创建数据库与表单"></a>18.3、创建数据库与表单</h3><blockquote><p>用于创建数据库的命令以及作用</p></blockquote><table><thead><tr><th>命令用法</th><th>作用</th></tr></thead><tbody><tr><td>CREATE database 数据库名称。</td><td>创建新的数据库</td></tr><tr><td>DESCRIBE 表单名称;</td><td>描述表单</td></tr><tr><td>UPDATE 表单名称 SET attribute=新值 WHERE attribute &gt; 原始值;</td><td>更新表单中的数据</td></tr><tr><td>USE 数据库名称;</td><td>指定使用的数据库</td></tr><tr><td>SHOW databases;</td><td>显示当前已有的数据库</td></tr><tr><td>SHOW tables;</td><td>显示当前数据库中的表单</td></tr><tr><td>SELECT * FROM 表单名称;</td><td>从表单中选中某个记录值</td></tr><tr><td>DELETE FROM 表单名 WHERE attribute=值;</td><td>从表单中删除某个记录值</td></tr></tbody></table><blockquote><p>创建一个名为<code>linuxprobe</code>的数据库，然后再查看数据库列表</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]>  CREATE DATABASE linuxprobe;Query OK, 1 row affected (0.001 sec)MariaDB [(none)]>  SHOW databases;+--------------------+| Database           |+--------------------+| information_schema || linuxprobe         || mysql              || performance_schema |+--------------------+4 rows in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>定义3个字段项，其中，字符型字段name（长度为15字符）用来存放图书名称，整型字段price和pages</p><p>分别存储图书的价格和页数。当执行完下述命令之后，就可以看到表单的结构信息了</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> use linuxprobe;Database changedMariaDB [linuxprobe]> CREATE TABLE mybook (name char(15),price int,pages int);Query OK, 0 rows affected (0.009 sec)MariaDB [linuxprobe]> DESCRIBE mybook;+-------+----------+------+-----+---------+-------+| Field | Type     | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| name  | char(15) | YES  |     | NULL    |       || price | int(11)  | YES  |     | NULL    |       || pages | int(11)  | YES  |     | NULL    |       |+-------+----------+------+-----+---------+-------+3 rows in set (0.002 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-4、管理表单以及数据"><a href="#18-4、管理表单以及数据" class="headerlink" title="18.4、管理表单以及数据"></a>18.4、管理表单以及数据</h3><blockquote><p>插入数据</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES('linuxprobe','60', '518');Query OK, 1 row affected (0.001 sec)MariaDB [linuxprobe]> SELECT * from mybook;+------------+-------+-------+| name       | price | pages |+------------+-------+-------+| linuxprobe |    60 |   518 |+------------+-------+-------+1 row in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更新数据</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> UPDATE mybook SET price=55 ;Query OK, 1 row affected (0.002 sec)Rows matched: 1  Changed: 1  Warnings: 0MariaDB [linuxprobe]> SELECT name,price FROM mybook;+------------+-------+| name       | price |+------------+-------+| linuxprobe |    55 |+------------+-------+1 row in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>按照条件修改数据</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> UPDATE mybook SET price=60 where name='linuxcool';Query OK, 1 row affected (0.001 sec)Rows matched: 1  Changed: 1  Warnings: 0MariaDB [linuxprobe]> select * from mybook;+------------+-------+-------+| name       | price | pages |+------------+-------+-------+| linuxprobe |    55 |   518 || linuxcool  |    60 |   300 || linuxdown  |   105 |   500 |+------------+-------+-------+3 rows in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除数据</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> DELETE FROM mybook;Query OK, 3 row affected (0.001 sec)MariaDB [linuxprobe]> SELECT * FROM mybook;Empty set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>where命令中使用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>相等</td></tr><tr><td>&lt;&gt;或!=</td><td>不相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索一个例子</td></tr><tr><td>IN</td><td>在列中搜索多个值</td></tr></tbody></table><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price>75;+-------------+-------+-------+| name        | price | pages |+-------------+-------+-------+| linuxprobe3 |    80 |   518 || linuxprobe4 |   100 |   518 |+-------------+-------+-------+2 rows in set (0.001 sec)MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price!=80;+-------------+-------+-------+| name        | price | pages |+-------------+-------+-------+| linuxprobe1 |    30 |   518 || linuxprobe2 |    50 |   518 || linuxprobe4 |   100 |   518 |+-------------+-------+-------+3 rows in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [linuxprobe]> SELECT * from mybook WHERE price=30 AND pages=518 ;+-------------+-------+-------+| name        | price | pages |+-------------+-------+-------+| linuxprobe1 |    30 |   518 |+-------------+-------+-------+1 row in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-5、数据库的备份与恢复"><a href="#18-5、数据库的备份与恢复" class="headerlink" title="18.5、数据库的备份与恢复"></a>18.5、数据库的备份与恢复</h3><blockquote><p>将linuxprobe数据库中的内容导出为一个文件，并保存到root管理员的家目录中</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">[root@linuxprobe ~]# mysqldump -u root -p linuxprobe > /root/linuxprobeDB.dumpEnter password: 输入管理员的数据库密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>然后进入MariaDB数据库管理系统，彻底删除linuxprobe数据库，这样mybook数据表单也将被彻底删</p><p>除。然后重新建立linuxprobe数据库</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">mysq[root@linuxprobe ~]# mysql -u root -pEnter password: 输入管理员的数据库密码MariaDB [(none)]> DROP DATABASE linuxprobe;Query OK, 1 row affected (0.04 sec)MariaDB [(none)]> SHOW databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema |+--------------------+3 rows in set (0.02 sec)MariaDB [(none)]> CREATE DATABASE linuxprobe;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接下来是见证数据恢复效果的时刻！使用输入重定向符把刚刚备份的数据库文件导入到mysql命令中，然</p><p>后执行该命令。接下来登录MariaDB数据库，就又能看到linuxprobe数据库以及mybook数据表单了。数</p><p>据库恢复成功！</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">[root@linuxprobe ~]# mysql -u root -p linuxprobe < /root/linuxprobeDB.dump Enter password: 输入管理员的数据库密码[root@linuxprobe ~]# mysql -u root -pEnter password: 输入管理员的数据库密码MariaDB [(none)]> use linuxprobe;Database changedMariaDB [linuxprobe]> SHOW tables;+----------------------+| Tables_in_linuxprobe |+----------------------+| mybook               |+----------------------+1 row in set (0.000 sec)MariaDB [linuxprobe]> describe mybook;+-------+----------+------+-----+---------+-------+| Field | Type     | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| name  | char(15) | YES  |     | NULL    |       || price | int(11)  | YES  |     | NULL    |       || pages | int(11)  | YES  |     | NULL    |       |+-------+----------+------+-----+---------+-------+3 rows in set (0.002 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-6、配置Mysql服务"><a href="#18-6、配置Mysql服务" class="headerlink" title="18.6、配置Mysql服务"></a>18.6、配置<code>Mysql</code>服务</h3><blockquote><p>对于<code>MySQL</code>数据库来说，我们需要在系统中创建一个名为<code>mysql</code>的用户，专门用于负责运行<code>MySQL</code>数据</p><p>库。请记得要把这类账户的<code>Bash</code>终端设置成<code>nologin</code>解释器，避免黑客通过该用户登录到服务器中，从</p><p>而提高系统安全性。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe lnmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd mysql -M -s /sbin/nologin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>第1步</strong>：解压<code>MySQL</code>安装软件包。将解压出的程序目录改名并移动到<code>/usr/local</code>目录下，对其进行初始</p><p>化操作后便可使用。需要注意的是，以.tar.xz结尾的压缩包软件，不应用z参数进行解压。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe lnmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar xvf mysql-8.0.18.tar.xz</span><span class="token punctuation">[</span>root@linuxprobe lnmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv mysql-8.0.18-linux-glibc2.12-x86_64 mysql</span><span class="token punctuation">[</span>root@linuxprobe lnmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv mysql /usr/local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：在生产环境中管理<code>MySQL</code>数据库时，有两个比较常用的目录。一个是<code>/usr/local/mysql</code>目录，</p><p>这是用于保存MySQL数据库程序文件的路径。还有一个是<code>/usr/local/mysql/data</code>目录，它用于存</p><p>储数据库的具体内容，每个数据库的内容会被单独存放到一个目录内。对于存放实际数据库文件的<code>data</code></p><p>目录，用户需要先手动创建出来</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe lnmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/mysql</span><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：初始化<code>MySQL</code>服务程序，对目录进行授权，保证数据能够被<code>mysql</code>系统用户读取。在初始化阶</p><p>段，应使用<code>mysqld</code>命令确认管理<code>MySQL</code>数据库服务的用户名称、数据保存目录及编码信息。在信息确认</p><p>无误后开始进行初始化。在初始化的最后阶段，系统会给用户分配一个初始化的临时密码，大家一定要</p><p>保存好，例如下面示例中分配的密码是qfroRs,Ei4Ls。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -R mysql:mysql /usr/local/mysql</span><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd bin</span><span class="token punctuation">[</span>root@linuxprobe bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span>2021-05-06T07:07:06.243270Z 0 <span class="token punctuation">[</span>System<span class="token punctuation">]</span> <span class="token punctuation">[</span>MY-013169<span class="token punctuation">]</span> <span class="token punctuation">[</span>Server<span class="token punctuation">]</span> /usr/local/mysql/bin/mysqld <span class="token punctuation">(</span>mysqld 8.0.18<span class="token punctuation">)</span> initializing of server <span class="token keyword">in</span> progress as process 76062021-05-06T07:07:08.116268Z 5 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> <span class="token punctuation">[</span>MY-010454<span class="token punctuation">]</span> <span class="token punctuation">[</span>Server<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: qfroRs,Ei4Ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：与<code>Nginx</code>服务相似，<code>MySQL</code>数据库的二进制可执行命令也单独存放在自身的程序目</p><p>录<code>/usr/local/mysql/bin</code>中。若每次在执行命令之前都要先切换到这个目录，则着实有些</p><p>麻烦，要能也加入到<code>PATH</code>变量中可就方便太多了。说干就干！</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim ~/.bash_profile</span><span class="token comment" spellcheck="true"># .bash_profile</span><span class="token comment" spellcheck="true"># Get the aliases and functions</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">.</span> ~/.bashrc<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># User specific environment and startup programs</span>PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HOME</span>/bin:/usr/local/nginx/sbin:/usr/local/mysql/bin<span class="token function">export</span> PATH<span class="token punctuation">[</span>root@linuxprobe bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># source ~/.bash_profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将启动脚本<code>mysql.server</code>放入到<code>/etc/init.d</code>目录中，让服务器每次重启后都能自动启动数据库，并</p><p>给予可执行权限。</p><p><code>libtinfo.so.5</code>文件是<code>MySQL</code>数据库在8.0版本后新添加的重要的函数库文件，但默认不存在，需要将</p><p><code>libtinfo.so.6.1</code>文件复制过来或者作为链接文件才能正常启动</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/mysql</span><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a support-files/mysql.server /etc/init.d/</span><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod a+x /etc/init.d/mysql.server</span><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第5步</strong>：执行<code>MySQL</code>数据库服务启动文件，并进行初始化工作。为了安全着想，MySQL自8.0版本起不再</p><p>允许用户使用临时密码来管理数据库内容，也不能进行远程控制，用户必须修改初始化密码后才能使用</p><p><code>MySQL</code>数据库。数据库作为系统重要的组成服务，密码位数不建议少于20位。例如，下面将密码修改</p><p>为“PObejCBeDzTRCncXwgBy”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /etc/init.d/mysql.server start </span>Starting MySQL.Logging to <span class="token string">'/usr/local/mysql/data/linuxprobe.com.err'</span><span class="token keyword">.</span><span class="token keyword">.</span> SUCCESS<span class="token operator">!</span> <span class="token punctuation">[</span>root@linuxprobe mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -u root -p</span>Enter password: 输入初始化时给的原始密码Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 8Server version: 8.0.18Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'PObejCBeDzTRCncXwgBy'</span><span class="token punctuation">;</span> Query OK, 0 rows affected <span class="token punctuation">(</span>0.01 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但这样还是不行，还需要继续切换到<code>mysql</code>数据库中，修改<code>user</code>表单的密码值。这也是从<code>MySQL</code>数据库</p><p>8.0版本之后才有的新安全要求，看过本书上一版的读者应该记得在MySQL 5/6版本中就没有这么麻烦</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span>Reading table information <span class="token keyword">for</span> completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> show tables<span class="token punctuation">;</span>+---------------------------+<span class="token operator">|</span> Tables_in_mysql           <span class="token operator">|</span>+---------------------------+<span class="token operator">|</span> columns_priv              <span class="token operator">|</span><span class="token operator">|</span> tables_priv               <span class="token operator">|</span><span class="token operator">|</span> time_zone                 <span class="token operator">|</span><span class="token operator">|</span> time_zone_leap_second     <span class="token operator">|</span><span class="token operator">|</span> time_zone_name            <span class="token operator">|</span><span class="token operator">|</span> time_zone_transition      <span class="token operator">|</span><span class="token operator">|</span> time_zone_transition_type <span class="token operator">|</span><span class="token operator">|</span> user                      <span class="token operator">|</span><span class="token operator">|</span> …………省略部分输出信息…………  <span class="token operator">|</span>+---------------------------+33 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'PObejCBeDzTRCncXwgBy'</span><span class="token punctuation">;</span>Query OK, 0 rows affected <span class="token punctuation">(</span>0.01 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十九、使用PXE-Kickstart无人值守安装服务"><a href="#十九、使用PXE-Kickstart无人值守安装服务" class="headerlink" title="十九、使用PXE+Kickstart无人值守安装服务"></a>十九、使用PXE+Kickstart无人值守安装服务</h2><hr><h3 id="19-1、无人值守系统"><a href="#19-1、无人值守系统" class="headerlink" title="19.1、无人值守系统"></a>19.1、无人值守系统</h3><blockquote><p>如果生产环境中有数百台服务器都需要安装系统，这种方式就不合时宜了。这时，就需要使用</p><p><code>PXE</code> +<code> TFTP</code> + <code>FTP</code> + <code>DHCP</code> + <code>Kickstart</code>服务搭建出一个无人值守安装系统。这种无人值守安</p><p>装系统可以自动地为数十台甚至上百台的服务器安装系统，这一方面将运维人员从重复性的工作</p><p>中解救出来，另外一方面也大大提升了系统安装的效率。无人值守安装系统的工作流程如图19-1所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825170208752.png" alt="图19-1 无人值守安装系统的工作流程"></p><blockquote><p><code>PXE</code>（<code>Preboot eXecute Environment</code>，预启动执行环境）是由<code>Intel</code>公司开发的技术，能够让计算</p><p>机通过网络来启动操作系统（前提是计算机上安装的网卡支持<code>PXE</code>技术），主要用于在无人值守安装系</p><p>统中引导客户端主机安装<code>Linux</code>操作系统。</p><p><code>Kickstart</code>是一种无人值守的安装方式，其工作原理是预先把原本需要运维人员手工填写的参数保存成</p><p>一个<code>ks.cfg</code>文件，当安装过程中需要填写参数时则自动匹配<code>Kickstart</code>生成的文件。所以只要</p><p><code>Kickstart</code>文件包含了安装过程中需要人工填写的所有参数，那么从理论上来讲完全不需要运维人员的</p><p>干预，就可以自动完成安装工作。</p></blockquote><h3 id="19-2、部署相关服务程序"><a href="#19-2、部署相关服务程序" class="headerlink" title="19.2、部署相关服务程序"></a>19.2、部署相关服务程序</h3><table><thead><tr><th>服务名称</th><th>主要作用</th></tr></thead><tbody><tr><td>dhcpd</td><td>分配网卡信息及指引获取驱动文件</td></tr><tr><td>tftp-server</td><td>提供驱动及引导文件的传输</td></tr><tr><td>SYSLinux</td><td>提供驱动及引导文件</td></tr><tr><td>VSFtpd</td><td>提供完整系统镜像的传输</td></tr><tr><td>KickStart</td><td>提供安装过程中选项的问答设置</td></tr></tbody></table><h4 id="19-2-1、配置DHCP服务"><a href="#19-2-1、配置DHCP服务" class="headerlink" title="19.2.1、配置DHCP服务"></a>19.2.1、配置<code>DHCP</code>服务</h4><blockquote><p><code>DHCP</code>服务程序用于为客户端主机分配可用的<code>IP</code>地址，而且这是服务器与客户端主机进行文件传输的基</p><p>础，因此要先行配置<code>DHCP</code>服务程序。首先按照表为无人值守系统设置<code>IP</code>地址，然后按照图19-2和</p><p>图19-3在虚拟机的虚拟网络编辑器中关闭自身的<code>DHCP</code>服务，避免与自己配置的服务冲突。</p></blockquote><blockquote><p> 无人值守系统与客户端的设置</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>无人值守系统</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>客户端</td><td>未安装操作系统</td><td>-</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825170608170.png" alt="图19-3 关闭虚拟机自带的DHCP服务"></p><blockquote><p>除了上面提及的服务之外，<code>PXE </code>+ <code>KickStart</code>无人值守安装系统还会用到诸如<code>sips</code>、<code>slp</code>、<code>mountd</code>等</p><p>多项相关的服务协议，因此本实验会临时关闭<code>firewalld</code>防火墙，以便数据能够正常地传送</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe pub<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe pub<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl stop firewalld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>当挂载好光盘镜像并把仓库文件配置妥当后，就可以安装<code>DHCP</code>服务程序软件包了</p></blockquote><pre><code>[root@linuxprobe ~]# yum install -y dhcp-server</code></pre><blockquote><p>允许<code>BOOTP</code>引导程序协议，旨在让局域网内暂时没有操作系统的主机也能获取静态IP地址；在配置文件</p><p>的最下面加载了引导驱动文件<code>pxelinux.0</code>（这个文件会在下面的步骤中创建），其目的是让客户端主机</p><p>获取到IP地址后主动获取引导驱动文件，自行进入下一步的安装过程。</p><p><strong>当前<code>pxelinux.0</code>文件不存在，不过不用担心，后面会找到它的。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/dhcp/dhcpd.conf</span>allow booting<span class="token punctuation">;</span>allow bootp<span class="token punctuation">;</span>ddns-update-style none<span class="token punctuation">;</span>ignore client-updates<span class="token punctuation">;</span>subnet 192.168.10.0 netmask 255.255.255.0 <span class="token punctuation">{</span>        option subnet-mask                 255.255.255.0<span class="token punctuation">;</span>        option domain-name-servers         192.168.10.10<span class="token punctuation">;</span>        range dynamic-bootp 192.168.10.100 192.168.10.200<span class="token punctuation">;</span>        default-lease-time                 21600<span class="token punctuation">;</span>        max-lease-time                     43200<span class="token punctuation">;</span>        next-server                        192.168.10.10<span class="token punctuation">;</span>        filename                           <span class="token string">"pxelinux.0"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动<code>dhcpd后</code>查看一下服务状态，以免后续实验中客户端分配不到网卡信息。若输出状态为</p><p>“**active (running)**”则表示服务已经正常运行</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl status dhcpd</span>● dhcpd.service - DHCPv4 Server Daemon   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/dhcpd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Fri 2021-04-30 01:10:51 CST<span class="token punctuation">;</span> 3min 15s ago     Docs: man:dhcpd<span class="token punctuation">(</span>8<span class="token punctuation">)</span>           man:dhcpd.conf<span class="token punctuation">(</span>5<span class="token punctuation">)</span> Main PID: 30964 <span class="token punctuation">(</span>dhcpd<span class="token punctuation">)</span>   Status: <span class="token string">"Dispatching packets..."</span>    Tasks: 1 <span class="token punctuation">(</span>limit: 12390<span class="token punctuation">)</span>   Memory: 8.8M   CGroup: /system.slice/dhcpd.service           └─30964 /usr/sbin/dhcpd -f -cf /etc/dhcp/dhcpd.conf -user dhcpd -group dhcpd --no-pid………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="19-2-2、配置TFTP服务程序"><a href="#19-2-2、配置TFTP服务程序" class="headerlink" title="19.2.2、配置TFTP服务程序"></a>19.2.2、配置<code>TFTP</code>服务程序</h4><blockquote><p>我们曾经学习过<code>vsftpd</code>服务与<code>TFTP</code>服务。<code>vsftpd</code>是一款功能丰富的文件传输服务程序，允许用户以匿</p><p>名开放模式、本地用户模式、虚拟用户模式来进行访问认证。但是，当前的客户端主机还没有安装操作</p><p>系统，该如何进行登录认证呢？<code>TFTP</code>作为一种基于<code>UDP</code>协议的简单文件传输协议，不需要进行用户认证</p><p>即可获取到所需的文件资源。因此接下来配置<code>TFTP</code>服务程序，<strong>为客户端主机提供引导及驱动文件</strong>。当客</p><p>户端主机有了基本的驱动程序之后，再通过<code>vsftpd</code>服务程序将完整的光盘镜像文件传输过去。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y tftp-server xinetd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>TFTP</code>是一种非常精简的文件传输服务程序，它的运行和关闭是由<code>xinetd</code>网络守护进程服务来管理的。</p><p><code>xinetd</code>服务程序会同时监听系统的多个端口，然后根据用户请求的端口号调取相应的服务程序来响应用</p><p>户的请求。需要开启TFTP服务程序时，只需在<code>xinetd</code>服务程序的配置文件中把<code>disable</code>参数改成<code>no</code>就</p><p>可以了。如果配置文件不存在，则复制下面的内容进来，手动创建一下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/xinetd.d/tftp</span><span class="token function">service</span> tftp<span class="token punctuation">{</span>        socket_type             <span class="token operator">=</span> dgram        protocol                <span class="token operator">=</span> udp        <span class="token function">wait</span>                    <span class="token operator">=</span> <span class="token function">yes</span>        user                    <span class="token operator">=</span> root        server                  <span class="token operator">=</span> /usr/sbin/in.tftpd        server_args             <span class="token operator">=</span> -s /var/lib/tftpboot        disable                 <span class="token operator">=</span> no        per_source              <span class="token operator">=</span> 11        cps                     <span class="token operator">=</span> 100 2        flags                   <span class="token operator">=</span> IPv4<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>保存配置文件并退出，然后重启<code>xinetd</code>服务程序，并将其加入到开机启动项中。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart xinetd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable  xinetd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="19-2-3、配置SYSLinux服务程序"><a href="#19-2-3、配置SYSLinux服务程序" class="headerlink" title="19.2.3、配置SYSLinux服务程序"></a>19.2.3、配置<code>SYSLinux</code>服务程序</h4><blockquote><p><code>SYSLinux</code>是一个用于<strong>提供引导加载的服务程序</strong>。与其说<code>SYSLinux</code>是一个服务程序，不如说是一个<strong>包含</strong></p><p><strong>了很多引导文件的文件夹</strong>。在安装好<code>SYSLinux</code>服务程序后，<code>/usr/share/syslinux</code>目录中会出现很</p><p>多引导文件。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y syslinux</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>我们首先需要把<code>SYSLinux</code>提供的引导文件（也就是前文提到的文件<code>pxelinux.0</code>）复制到<code>TFTP</code>服务程</p><p>序的默认目录中，这样客户端主机就能够顺利地获取到引导文件了。另外在RHEL 8系统光盘镜像中也有</p><p>一些需要调取的引导文件。确认光盘镜像已经被挂载到<code>/media/cdrom</code>目录后，使用复制命令将光盘镜</p><p>像中自带的一些引导文件也复制到TFTP服务程序的默认目录中。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/lib/tftpboot</span><span class="token punctuation">[</span>root@linuxprobe tftpboot<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /usr/share/syslinux/pxelinux.0 .</span><span class="token punctuation">[</span>root@linuxprobe tftpboot<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /media/cdrom/images/pxeboot/* .</span><span class="token punctuation">[</span>root@linuxprobe tftpboot<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /media/cdrom/isolinux/* .</span>cp: overwrite <span class="token string">'./initrd.img'</span>? ycp: overwrite <span class="token string">'./TRANS.TBL'</span>? ycp: overwrite <span class="token string">'./vmlinuz'</span>? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>cp</code>命令后面接的句点（.）表示当前工作目录。也就是说，上述<code>cp</code>表示将文件复制到当前工作目录</p><p>（即<code>/var/lib/tftpboot</code>）中。在复制过程中，若多个目录保存着相同的文件，则可手动敲击<code>y</code>键进行</p><p>覆盖即可。</p></blockquote><blockquote><p>然后在<code>TFTP</code>服务程序的目录中新建<code>pxelinux.cfg</code>目录。虽然该目录的名字带有后缀，但依然也是目</p><p>录，而非文件！将系统光盘中的开机选项菜单复制到该目录中，并命名为<code>defaul</code>t。这个<code>default</code>文</p><p>件就是开机时的选项菜单，如图19-4所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220825171657664.png" alt="图19-4 Linux系统的引导菜单界面"></p><pre class="line-numbers language-bahs"><code class="language-bahs">[root@linuxprobe tftpboot]# mkdir pxelinux.cfg[root@linuxprobe tftpboot]# cp /media/cdrom/isolinux/isolinux.cfg pxelinux.cfg/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>默认的开机菜单中有3个选项：安装系统、对安装介质进行检验、排错模式。既然已经确定采用无人值守</p><p>的方式安装系统，若还需要为每台主机手动选择相应的选项，则未免与我们的主旨（无人值守安装）相</p><p>悖。</p></blockquote><blockquote><p>现在我们编辑这个<code>default</code>文件，把第1行的<code>default</code>参数修改为<code>linux</code>，这样系统在开机时就会默认</p><p>执行那个名称为<code>linux</code>的选项了。对应的<code>linux</code>选项大约在第64行，将默认的光盘镜像安装方式修改成</p><p><code>FTP</code>文件传输方式，并指定好光盘镜像的获取网址以及<code>Kickstart</code>应答文件的获取路径：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe tftpboot<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim pxelinux.cfg/default</span>  1 default linux  2 <span class="token function">timeout</span> 600  3   4 display boot.msg  5   6 <span class="token comment" spellcheck="true"># Clear the screen when exiting the menu, instead of leaving the menu displayed.</span>  7 <span class="token comment" spellcheck="true"># For vesamenu, this means the graphical background is still displayed without</span>  8 <span class="token comment" spellcheck="true"># the menu itself for as long as the screen remains in graphics mode.</span>  9 menu <span class="token function">clear</span> 10 menu background splash.png 11 menu title Red Hat Enterprise Linux 8.0.0 12 menu vshift 8 13 menu rows 18 14 menu margin 8 15 <span class="token comment" spellcheck="true">#menu hidden</span> 16 menu helpmsgrow 15 17 menu tabmsgrow 13 18  19 <span class="token comment" spellcheck="true"># Border Area</span> 20 menu color border * <span class="token comment" spellcheck="true">#00000000 #00000000 none</span> 21  22 <span class="token comment" spellcheck="true"># Selected item</span> 23 menu color sel 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 24  25 <span class="token comment" spellcheck="true"># Title bar</span> 26 menu color title 0 <span class="token comment" spellcheck="true">#ff7ba3d0 #00000000 none</span> 27  28 <span class="token comment" spellcheck="true"># Press [Tab] message</span> 29 menu color tabmsg 0 <span class="token comment" spellcheck="true">#ff3a6496 #00000000 none</span> 30  31 <span class="token comment" spellcheck="true"># Unselected menu item</span> 32 menu color unsel 0 <span class="token comment" spellcheck="true">#84b8ffff #00000000 none</span> 33  34 <span class="token comment" spellcheck="true"># Selected hotkey</span> 35 menu color hotsel 0 <span class="token comment" spellcheck="true">#84b8ffff #00000000 none</span> 36  37 <span class="token comment" spellcheck="true"># Unselected hotkey</span> 38 menu color hotkey 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 39  40 <span class="token comment" spellcheck="true"># Help text</span> 41 menu color <span class="token function">help</span> 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 42  43 <span class="token comment" spellcheck="true"># A scrollbar of some type? Not sure.</span> 44 menu color scrollbar 0 <span class="token comment" spellcheck="true">#ffffffff #ff355594 none</span> 45  46 <span class="token comment" spellcheck="true"># Timeout msg</span> 47 menu color <span class="token function">timeout</span> 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 48 menu color timeout_msg 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 49  50 <span class="token comment" spellcheck="true"># Command prompt text</span> 51 menu color cmdmark 0 <span class="token comment" spellcheck="true">#84b8ffff #00000000 none</span> 52 menu color cmdline 0 <span class="token comment" spellcheck="true">#ffffffff #00000000 none</span> 53  54 <span class="token comment" spellcheck="true"># Do not display the actual menu unless the user presses a key. All that is displayed is a timeout message.</span> 55  56 menu tabmsg Press Tab <span class="token keyword">for</span> full configuration options on menu items. 57  58 menu separator <span class="token comment" spellcheck="true"># insert an empty line</span> 59 menu separator <span class="token comment" spellcheck="true"># insert an empty line</span> 60  61 label linux 62   menu label ^Install Red Hat Enterprise Linux 8.0.0 63   kernel vmlinuz 64   append initrd<span class="token operator">=</span>initrd.img inst.stage2<span class="token operator">=</span>ftp://192.168.10.10 ks<span class="token operator">=</span>ftp://192.168.10.10/pub/ks.cfg quiet 65 ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>建议在安装源的后面加入<code>quiet</code>参数，意为使用静默安装方式，不再需要用户进行确认。文件修改完毕</p><p>后保存即可。开机选项菜单是被调用的文件，因此不需要单独重启任何服务。</p></blockquote><h4 id="19-2-4、配置VSFtpd服务程序"><a href="#19-2-4、配置VSFtpd服务程序" class="headerlink" title="19.2.4、配置VSFtpd服务程序"></a>19.2.4、配置<code>VSFtpd</code>服务程序</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe tftpboot<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y vsftpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>RHEL 8</code>系统版本的<code>vsftpd</code>服务默认不允许匿名公开访问模式，因此需要手动进行开启</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~ <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/vsftpd/vsftpd.conf</span><span class="token comment" spellcheck="true"># Example config file /etc/vsftpd/vsftpd.conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default compiled in settings are fairly paranoid. This sample file</span><span class="token comment" spellcheck="true"># loosens things up a bit, to make the ftp daemon more usable.</span><span class="token comment" spellcheck="true"># Please see vsftpd.conf.5 for all compiled in defaults.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span><span class="token comment" spellcheck="true"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's</span><span class="token comment" spellcheck="true"># capabilities.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).</span>anonymous_enable<span class="token operator">=</span>YES………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 将相应的服务程序添加到开机启动项中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart vsftpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable  vsftpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service → /usr/lib/systemd/system/vsftpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在确认系统光盘镜像已经正常挂载到<code>/media/cdrom</code>目录后，把目录中的光盘镜像文件全部复制到</p><p><code>vsftpd</code>服务程序的工作目录中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -r /media/cdrom/* /var/ftp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> 这个过程大约需要3～5分钟。在此期间，咱们也别闲着，将<code>SELinux</code>安全子系统中放行<code>FTP</code>传输协议的</p><p>允许策略，设置成<code>on</code>（开启）。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setsebool -P ftpd_connect_all_unreserved=on</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="19-2-5、创建KickStar应答文件"><a href="#19-2-5、创建KickStar应答文件" class="headerlink" title="19.2.5、创建KickStar应答文件"></a>19.2.5、创建<code>KickStar</code>应答文件</h4><p>毕竟，我们使用<code>PXE</code> +<code>Kickstart</code>部署的是一套“无人值守安装系统服务”，而不是“无人值守传输系统光盘</p><p>镜像服务”，因此还需要让客户端主机能够一边获取光盘镜像，一边自动帮用户填写好安装过程中出现的选</p><p>项。简单来说，如果生产环境中有100台服务器，它们需要安装相同的系统环境，那么在安装过程中单击的按</p><p>钮和填写的信息也应该都是相同的。那么，为什么不创建一个类似于备忘录的需求清单呢？这样，在无人值守</p><p>安装系统时，会从这个需求清单中找到相应的选项值，从而免去了手动输入之苦。更重要的是，这也彻底解放</p><p>了人的干预，彻底实现无人值守自动安装系统，而不是单纯地传输系统光盘镜像。</p><p>有了上文做铺垫，相信大家现在应该可以猜到<code>Kickstart</code>其实并不是一个服务程序，而是一个应答文件了。</p><p>是的！<code>Kickstart</code>应答文件中<strong>包含了系统安装过程中需要使用的选项和参数信息，系统可以自动调取这个应</strong></p><p><strong>答文件的内容，从而彻底实现无人值守安装系统。</strong>那么，既然这个文件如此重要，该去哪里找呢？其实在</p><p><code>root</code>管理员的家目录中有一个名为<code>anaconda-ks.cfg</code>的文件，它就是应答文件。下面将这个文件复制到</p><p><code>vsftpd</code>服务程序的工作目录中（在开机选项菜单的配置文件中已经定义了该文件的获取路径，也就是</p><p><code>vsftpd</code>服务程序数据目录中的<code>pub</code>子目录）。使用<code>chmod</code>命令设置该文件的权限，确保所有人都有可读的权</p><p>限，以保证客户端主机顺利获取到应答文件及里面的内容</p><pre class="line-numbers language-bash"><code class="language-bash">b<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp ~/anaconda-ks.cfg /var/ftp/pub/ks.cfg</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +r /var/ftp/pub/ks.cfg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Kickstart</code>应答文件并没有想象中的那么复杂，它总共只有44行左右的参数和注释内容，大家完全可以通过</p><p>参数的名称及介绍来快速了解每个参数的作用。</p><p>其中，第1～10行表示安装硬盘的名称为<code>sda</code>及使用<code>LVM</code>技术。这便要求我们在后续新建客户端虚拟机时，硬</p><p>盘一定要选择<code>SCSI</code>或<code>SATA</code>类型的（见图19-5），否则会变成/dev/hd或/dev/nvme开头的名称，进而会因找</p><p>不到硬盘设备而终止安装进程。</p><p>第8行的软件仓库，应改为由FTP服务器提供的网络路径。第10行的安装源，也需要由CDROM改为网络安装</p><p>源</p><pre class="line-numbers language-bash"><code class="language-bash">  1 <span class="token comment" spellcheck="true">#version=RHEL8</span>  2 ignoredisk --only-use<span class="token operator">=</span>sda  3 autopart --type<span class="token operator">=</span>lvm  4 <span class="token comment" spellcheck="true"># Partition clearing information</span>  5 clearpart --none --initlabel  6 <span class="token comment" spellcheck="true"># Use graphical install</span>  7 graphical  8 repo --name<span class="token operator">=</span><span class="token string">"AppStream"</span> --baseurl<span class="token operator">=</span>ftp://192.168.10.10/AppStream  9 <span class="token comment" spellcheck="true"># Use CDROM installation media</span> 10 url --url<span class="token operator">=</span>ftp://192.168.10.10/BaseOS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829085748009.png" alt="图19-5 选择SCSI或SATA硬盘类型"></p><p>在第11～20行，<code>keyboard</code>参数为硬盘类型，一般都不需要修改。但一定要注意第17行的网卡信息，一定要</p><p>让网卡默认处于<code>DHCP</code>模式，否则在几十、上百台主机同时被创建出来后，会因为IP地址相互冲突而导致后续</p><p>无法管理。</p><pre class="line-numbers language-bash"><code class="language-bash"> 11 <span class="token comment" spellcheck="true"># Keyboard layouts</span> 12 keyboard --vckeymap<span class="token operator">=</span>us --xlayouts<span class="token operator">=</span><span class="token string">'us'</span> 13 <span class="token comment" spellcheck="true"># System language</span> 14 lang en_US.UTF-8 15  16 <span class="token comment" spellcheck="true"># Network information</span> 17 network  --bootproto<span class="token operator">=</span>dhcp --device<span class="token operator">=</span>ens160 --onboot<span class="token operator">=</span>on --ipv6<span class="token operator">=</span>auto --activate 18 network  --hostname<span class="token operator">=</span>linuxprobe.com 19 <span class="token comment" spellcheck="true"># Root password</span> 20 rootpw --iscrypted <span class="token variable">$6</span><span class="token variable">$EzIFyouUyBvWRIXv</span><span class="token variable">$y3bW3JZ2vD4c8bwVyKt7J90gyjULALTMLrnZZmvVujA75EpCCn50rlYm64MHAInbMAXAgn2Bmlgou</span>/pYjUZzL1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第21行～30行，<code>timezone</code>参数定义了系统默认时区为“上海”。如果大家的服务器时间不准确，则按照如下</p><p>修改即可。在第29行，创建了一个普通用户，密码值可复制<code>/etc/shadow</code>文件中的加密密文，它由系统自动</p><p>创建。</p><pre class="line-numbers language-bash"><code class="language-bash"> 21 <span class="token comment" spellcheck="true"># X Window System configuration information</span> 22 xconfig  --startxonboot 23 <span class="token comment" spellcheck="true"># Run the Setup Agent on first boot</span> 24 firstboot --enable 25 <span class="token comment" spellcheck="true"># System services</span> 26 services --disabled<span class="token operator">=</span><span class="token string">"chronyd"</span> 27 <span class="token comment" spellcheck="true"># System timezone</span> 28 timezone Asia/Shanghai --isUtc --nontp 29 user --name<span class="token operator">=</span>linuxprobe --password<span class="token operator">=</span><span class="token variable">$6</span><span class="token variable">$a5fEjghDXGPvEoQc</span><span class="token variable">$HQqzvBlGVyhsJjgKFDTpiCEavS</span>.inAwNTLZm/I5R5ALLKaMdtxZoKgb4/EaDyiPSSNNHGqrEkRnfJWap56m./. --iscrypted --gecos<span class="token operator">=</span><span class="token string">"linuxprobe"</span> 30 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的第31～44行表示要安装的软件来源。<code>graphical-server-environment</code>即带有图形化界面的服务器环</p><p>境，它对应的是安装界面中的<code>Server With GUI</code>选项。</p><pre class="line-numbers language-bash"><code class="language-bash">b 31 %packages 32 @^graphical-server-environment 33  34 %end 35  36 %addon com_redhat_kdump --disable --reserve-mb<span class="token operator">=</span><span class="token string">'auto'</span> 37  38 %end 39  40 %anaconda 41 pwpolicy root --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --notempty 42 pwpolicy user --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --emptyok 43 pwpolicy luks --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --notempty 44 %end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可知，实际算下来的修改并不多，默认参数就已经非常合适了。最后预览一下<code>ks.cfg</code>文件的全貌。如果</p><p>大家在生产环境中需要用到这个文件，则可以直接复制并使用下面的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~ <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /var/ftp/pub/ks.cfg</span><span class="token comment" spellcheck="true">#version=RHEL8</span>ignoredisk --only-use<span class="token operator">=</span>sdaautopart --type<span class="token operator">=</span>lvm<span class="token comment" spellcheck="true"># Partition clearing information</span>clearpart --none --initlabel<span class="token comment" spellcheck="true"># Use graphical install</span>graphicalrepo --name<span class="token operator">=</span><span class="token string">"AppStream"</span> --baseurl<span class="token operator">=</span>ftp://192.168.10.10/AppStream<span class="token comment" spellcheck="true"># Use CDROM installation media</span>url --url<span class="token operator">=</span>ftp://192.168.10.10/BaseOS<span class="token comment" spellcheck="true"># Keyboard layouts</span>keyboard --vckeymap<span class="token operator">=</span>us --xlayouts<span class="token operator">=</span><span class="token string">'us'</span><span class="token comment" spellcheck="true"># System language</span>lang en_US.UTF-8<span class="token comment" spellcheck="true"># Network information</span>network  --bootproto<span class="token operator">=</span>dhcp --device<span class="token operator">=</span>ens160 --onboot<span class="token operator">=</span>on --ipv6<span class="token operator">=</span>auto --activatenetwork  --hostname<span class="token operator">=</span>linuxprobe.com<span class="token comment" spellcheck="true"># Root password</span>rootpw --iscrypted <span class="token variable">$6</span><span class="token variable">$EzIFyouUyBvWRIXv</span><span class="token variable">$y3bW3JZ2vD4c8bwVyKt7J90gyjULALTMLrnZZmvVujA75EpCCn50rlYm64MHAInbMAXAgn2Bmlgou</span>/pYjUZzL1<span class="token comment" spellcheck="true"># X Window System configuration information</span>xconfig  --startxonboot<span class="token comment" spellcheck="true"># Run the Setup Agent on first boot</span>firstboot --enable<span class="token comment" spellcheck="true"># System services</span>services --disabled<span class="token operator">=</span><span class="token string">"chronyd"</span><span class="token comment" spellcheck="true"># System timezone</span>timezone Asia/Shanghai --isUtc --nontpuser --name<span class="token operator">=</span>linuxprobe --password<span class="token operator">=</span><span class="token variable">$6</span><span class="token variable">$a5fEjghDXGPvEoQc</span><span class="token variable">$HQqzvBlGVyhsJjgKFDTpiCEavS</span>.inAwNTLZm/I5R5ALLKaMdtxZoKgb4/EaDyiPSSNNHGqrEkRnfJWap56m./. --iscrypted --gecos<span class="token operator">=</span><span class="token string">"linuxprobe"</span>%packages@^graphical-server-environment%end%addon com_redhat_kdump --disable --reserve-mb<span class="token operator">=</span><span class="token string">'auto'</span>%end%anacondapwpolicy root --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --notemptypwpolicy user --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --emptyokpwpolicy luks --minlen<span class="token operator">=</span>6 --minquality<span class="token operator">=</span>1 --notstrict --nochanges --notempty%end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-3、自动部署客户机"><a href="#19-3、自动部署客户机" class="headerlink" title="19.3、自动部署客户机"></a>19.3、自动部署客户机</h3><p>在按照上文讲解的方法成功部署各个相关的服务程序后，就可以使用<code>PXE </code>+ <code>Kickstart</code>无人值守安装系统</p><p>了。在采用下面的步骤建立虚拟主机时，一定要把客户端的网络模式设定成与服务端一致的“仅主机模式”，否</p><p>则两台设备无法进行通信，也就更别提自动安装系统了。其余硬件配置选项并没有强制性要求，大家可参考这</p><p>里的配置选项来设定。</p><blockquote><p><strong>第1步</strong>：打开“新建虚拟机向导”程序，选择“自定义（高级）”配置类型，然后单击“下一步”按钮，如图19-6</p><p>所示。在随后的虚拟机硬件兼容性选项中，选择默认的“Workstation 16.x”，步骤省略。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090221306.png" alt="图19-6  选择虚拟机的配置类型"></p><blockquote><p><strong>第2步</strong>：将虚拟机操作系统的安装来源设置为“稍后安装操作系统”。这样做的目的是让虚拟机真正从网络</p><p>中获取系统安装镜像，同时也可避免<code>VMware Workstation</code>虚拟机软件按照内设的方法自行安装系统。</p><p>单击“下一步”按钮，如图19-7所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090256335.png" alt="图19-7 设置虚拟机操作系统的安装来源"></p><blockquote><p><strong>第3步</strong>：将“客户机操作系统”设置为<code>Linux</code>，版本为“<code>Red Hat Enterprise Linux 8 64</code>位”，然后单</p><p>击“下一步”按钮，如图19-8所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090324902.png" alt="图19-8 选择客户端主机的操作系统"></p><blockquote><p><strong>第4步</strong>：对虚拟机进行命名并设置安装位置。大家可自行定义虚拟机的名称，而安装位置则尽量选择磁盘</p><p>空间较大的分区。然后单击“下一步”按钮，如图19-9所示。在随后设置虚拟机处理器的个数及核心数、内</p><p>存容量值时，请大家根据实际情况自行选择，步骤省略。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090412324.png" alt="图19-9 命名虚拟机并设置虚拟机的安装位置"></p><blockquote><p><strong>第5步</strong>：设置虚拟机主机的网络连接类型为“使用仅主机模式网络”，如图19-10所示。一定要确保服务器</p><p>与客户端同处于相同的网络模式，否则客户端无法获得从服务器传送过来的系统镜像及应答文件。随后</p><p>的<code>SCSI</code>控制器类型选择默认的<code>LSI Logic</code>，步骤省略。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090446207.png" alt="图19-10 设置客户端的网络模式"></p><blockquote><p><strong>第6步</strong>：设置硬盘类型并指定容量。设置“虚拟磁盘类型”为SCSI或SATA，如图19-11所示。随后在硬盘创</p><p>建确认界面，选择“创建新虚拟磁盘”选项，步骤省略。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090508460.png" alt="图19-11 设置虚拟硬盘类型为SCSI或SATA"></p><p>这里将“最大磁盘大小”设置为20GB。需要说明的是，这个20GB指的是虚拟机系统能够使用的最大上限，而不</p><p>是会被立即占满，因此设置得稍微大一些也没有关系。然后单击“下一步”按钮，如图19-12所示。随后的确认</p><p>硬盘文件名称界面选择默认值即可，步骤省略。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090546999.png" alt="图19-12 将磁盘容量指定为20GB"></p><blockquote><p><strong>第7步</strong>：结束“新建虚拟机向导程序”后，先不要着急打开虚拟机系统。大家还需要单击图19-13中的“自定</p><p>义硬件”按钮，在弹出的如图19-14所示的界面中，把“网络适配器”设备同样也设置为“仅主机模式”（这个</p><p>步骤非常重要），移除其他不需要的硬件，然后单击“确定”按钮。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090627650.png" alt="图19-13 单击虚拟机的“自定义硬件”按钮"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090641736.png" alt="图19-14 设置虚拟机网络适配器设备为仅主机模式"></p><p>现在，我们就同时准备好了<code>PXE</code> +<code> Kickstart</code>无人值守安装系统与虚拟主机。在生产环境中，大家只需要将</p><p>配置妥当的服务器上架，接通服务器和客户端主机之间的网线，然后启动客户端主机即可。接下来就会按照图</p><p>19-15～图19-17那样，开始传输光盘镜像文件并进行自动安装了—期间完全无须人工干预，直到安装完毕时</p><p>才需要运维人员进行简单的初始化工作。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090800477.png" alt="图19-15 自动传输光盘镜像文件并安装系统"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090809659.png" alt="图19-16 根据应答文件自动填写安装信息"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090820054.png" alt="图19-17 自动安装系统，无须人工干预"></p><p>由此可见，当生产环境工作中有数百台服务器需要批量安装系统时，使用无人值守安装系统的便捷性是不言而喻的。<strong>但是为了避免法律风险，红帽公司对于许可界面还不允许用应答文件自动完成</strong>，需要人工单击“<code>I accept the license agreement</code>”复选框后方可继续安装，如图19-18和图19-19所示，我们通过网络安装的客户端就搞定了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090902399.png" alt="图19-18 手动点击接受许可协议的按钮"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%B8%89%EF%BC%89/image-20220829090913327.png" alt="图19-19 顺利进入到新系统中"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的使用教程（二）</title>
      <link href="/2022/08/22/linux-er/"/>
      <url>/2022/08/22/linux-er/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><blockquote><p>本篇文章仅供参考</p></blockquote><hr><h2 id="十二、使用Vsftpd服务传输文件"><a href="#十二、使用Vsftpd服务传输文件" class="headerlink" title="十二、使用Vsftpd服务传输文件"></a>十二、使用<code>Vsftpd</code>服务传输文件</h2><hr><h3 id="12-1、文件传输协议"><a href="#12-1、文件传输协议" class="headerlink" title="12.1、文件传输协议"></a>12.1、文件传输协议</h3><blockquote><p><code>FTP</code>是一种在互联网中进行文件传输的协议，基于客户端/服务器模式，<strong>默认使用20、21号端口</strong>，其中端</p><p>口20用于进行<strong>数据传输</strong>，端口21用于接受客户端发出的相关**<code>FTP</code>命令与参数**。<code>FTP</code>服务器普遍部署于内网中，具有容易搭建、方便管理的特点。而且有些<code>FTP</code>客户端工具还可以支持文件的多点下载以及断点续传技术，因此得到了广大用户的青睐。FTP的传输拓扑如图12-1所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822133149004.png" alt="图12-1  FTP协议的传输拓扑"></p><blockquote><p>FTP协议有下面两种工作模式：</p><ul><li><strong>主动模式</strong>：FTP服务器主动向客户端发起连接请求。</li><li><strong>被动模式</strong>：FTP服务器等待客户端发起连接请求（默认工作模式）</li></ul></blockquote><blockquote><p>我们可以在<code>grep</code>后面添加-v参数，过滤并反选出没有包含井号（#）的参数行（即过滤掉所有的注释信</p><p>息），然后将过滤后的参数行通过输出重定向符写回原始的主配置文件中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf_bak</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep -v "#" /etc/vsftpd/vsftpd.conf_bak > /etc/vsftpd/vsftpd.conf</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/vsftpd/vsftpd.conf</span>anonymous_enable<span class="token operator">=</span>NOlocal_enable<span class="token operator">=</span>YESwrite_enable<span class="token operator">=</span>YESlocal_umask<span class="token operator">=</span>022dirmessage_enable<span class="token operator">=</span>YESxferlog_enable<span class="token operator">=</span>YESconnect_from_port_20<span class="token operator">=</span>YESxferlog_std_format<span class="token operator">=</span>YESlisten<span class="token operator">=</span>NOlisten_ipv6<span class="token operator">=</span>YESpam_service_name<span class="token operator">=</span>vsftpduserlist_enable<span class="token operator">=</span>YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <code>vsftpd</code>服务程序常用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>`listen=[YES</td><td>NO] `</td></tr><tr><td><code>listen_address=IP地址</code></td><td>设置要监听的IP地址</td></tr><tr><td><code>listen_port=21</code></td><td>设置FTP服务的监听端口</td></tr><tr><td>`download_enable＝[YES</td><td>NO] `</td></tr><tr><td>`userlist_enable=[YES</td><td>NO] <code> &lt;br /&gt;</code>userlist_deny=[YES</td></tr><tr><td><code>max_clients=0</code></td><td>最大客户端连接数，0为不限制</td></tr><tr><td><code>max_per_ip=0</code></td><td>同一IP地址的最大连接数，0为不限制</td></tr><tr><td>`anonymous_enable=[YES</td><td>NO]`</td></tr><tr><td>`anon_upload_enable=[YES</td><td>NO]`</td></tr><tr><td><code>anon_umask=022</code></td><td>匿名用户上传文件的umask值</td></tr><tr><td><code>anon_root=/var/ftp</code></td><td>匿名用户的FTP根目录</td></tr><tr><td>`anon_mkdir_write_enable=[YES</td><td>NO]`</td></tr><tr><td>`anon_other_write_enable=[YES</td><td>NO]`</td></tr><tr><td><code>anon_max_rate=0</code></td><td>匿名用户的最大传输速率（字节/秒），0为不限制</td></tr><tr><td>`local_enable=[YES</td><td>NO]`</td></tr><tr><td><code>local_umask=022</code></td><td>本地用户上传文件的umask值</td></tr><tr><td><code>local_root=/var/ftp</code></td><td>本地用户的FTP根目录</td></tr><tr><td>`chroot_local_user=[YES</td><td>NO]`</td></tr><tr><td><code>local_max_rate=0</code></td><td>本地用户最大传输速率（字节/秒），0为不限制</td></tr></tbody></table><h3 id="12-2、Vsftp服务程序"><a href="#12-2、Vsftp服务程序" class="headerlink" title="12.2、Vsftp服务程序"></a>12.2、<code>Vsftp</code>服务程序</h3><blockquote><p><code>vsftpd</code>作为更加安全的文件传输协议服务程序，允许用户以3种认证模式登录FTP服务器：</p><ul><li><p><strong>匿名开放模式</strong>：是最不安全的一种认证模式，任何人都可以无须密码验证而直接登录到FTP服务器。</p></li><li><p><strong>本地用户模式</strong>：是通过Linux系统本地的账户密码信息进行认证的模式，相较于匿名开放模式更安</p><p>全，而且配置起来也很简单。但是如果黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，</p><p>从而完全控制整台服务器。</p></li><li><p><strong>虚拟用户模式</strong>：更安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进</p><p>行密码验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行</p><p>认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。</p></li></ul></blockquote><h4 id="12-2-1、匿名访问模式"><a href="#12-2-1、匿名访问模式" class="headerlink" title="12.2.1、匿名访问模式"></a>12.2.1、匿名访问模式</h4><blockquote><p>开放匿名用户的上传、下载文件的权限，以及让匿名用户创建、删除、更名文件的权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/vsftpd/vsftpd.conf</span>  1 anonymous_enable<span class="token operator">=</span>YES  2 anon_umask<span class="token operator">=</span>022  3 anon_upload_enable<span class="token operator">=</span>YES  4 anon_mkdir_write_enable<span class="token operator">=</span>YES  5 anon_other_write_enable<span class="token operator">=</span>YES  6 local_enable<span class="token operator">=</span>YES  7 write_enable<span class="token operator">=</span>YES  8 local_umask<span class="token operator">=</span>022  9 dirmessage_enable<span class="token operator">=</span>YES 10 xferlog_enable<span class="token operator">=</span>YES 11 connect_from_port_20<span class="token operator">=</span>YES 12 xferlog_std_format<span class="token operator">=</span>YES 13 listen<span class="token operator">=</span>NO 14 listen_ipv6<span class="token operator">=</span>YES 15 pam_service_name<span class="token operator">=</span>vsftpd 16 userlist_enable<span class="token operator">=</span>YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>vsftpd</code>服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启<code>vsftpd</code>服务程序，让</p><p>新的配置参数生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart vsftpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable vsftpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service → /usr/lib/systemd/system/vsftpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>vsftpd</code>服务程序的匿名开放认证模式下，其账户统一为<code>anonymous</code>，密码为空。而且在连接<code>FTP</code>服</p><p>务器后，默认访问的是<code>/var/ftp</code>目录。可以切换到该目录下的<code>pub</code>目录中，然后尝试创建一个新的目录</p><p>文件，以检验是否拥有写入权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart vsftpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable vsftpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service → /usr/lib/systemd/system/vsftpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>现在就可以在客户端执行ftp命令连接到远程的<code>FTP</code>服务器了。在vsftpd服务程序的匿名开放认证模式</p><p>下，其账户统一为<code>anonymous</code>，密码为空。而且在连接<code>FTP</code>服务器后，默认访问的是<code>/var/ftp</code>目</p><p>录。可以切换到该目录下的<code>pub</code>目录中，然后尝试创建一个新的目录文件，以检验是否拥有写入权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ftp 192.168.10.10</span>Connected to 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>.220 <span class="token punctuation">(</span>vsFTPd 3.0.3<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>192.168.10.10:root<span class="token punctuation">)</span>: anonymous331 Please specify the password.Password:此处敲击回车即可230 Login successful.Remote system <span class="token function">type</span> is UNIX.Using binary mode to transfer files.ftp<span class="token operator">></span> <span class="token function">cd</span> pub250 Directory successfully changed.ftp<span class="token operator">></span> <span class="token function">mkdir</span> files550 Permission denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面将目录的所有者身份改成系统账户<code>ftp</code>即可</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /var/ftp/pub</span>drwxr-xr-x. 2 root root 6 Aug 13 2021 /var/ftp/pub<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -R ftp /var/ftp/pub</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /var/ftp/pub</span>drwxr-xr-x. 2 <span class="token function">ftp</span> root 6 Aug 13 2021 /var/ftp/pub<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ftp 192.168.10.10</span>Connected to 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>.220 <span class="token punctuation">(</span>vsFTPd 3.0.3<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>192.168.10.10:root<span class="token punctuation">)</span>: anonymous331 Please specify the password.Password:此处敲击回车即可230 Login successful.Remote system <span class="token function">type</span> is UNIX.Using binary mode to transfer files.ftp<span class="token operator">></span> <span class="token function">cd</span> pub250 Directory successfully changed.ftp<span class="token operator">></span> <span class="token function">mkdir</span> files550 Create directory operation failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面使用<code>getsebool</code>命令查看与<code>FTP</code>相关的<code>SELinux</code>域策略都有哪些</p></blockquote><pre class="line-numbers language-bahs"><code class="language-bahs">[root@linuxprobe ~]# getsebool -a | grep ftpftpd_anon_write --> offftpd_connect_all_unreserved --> offftpd_connect_db --> offftpd_full_access --> offftpd_use_cifs --> offftpd_use_fusefs --> offftpd_use_nfs --> offftpd_use_passive_mode --> offhttpd_can_connect_ftp --> offhttpd_enable_ftp_server --> offtftp_anon_write --> offtftp_home_dir --> off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们可以根据经验（需要长期培养，别无它法）和策略的名称判断出是f<code>tpd_full_access--&gt; off</code>策略</p><p>规则导致了操作失败。接下来修改该策略规则，并且在设置时使用-P参数让修改过的策略永久生效，确</p><p>保在服务器重启后依然能够顺利写入文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setsebool -P ftpd_full_access=on</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>等<code>SELinux</code>域策略修改完毕后，就能够顺利执行文件的创建、修改及删除等操作了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ftp 192.168.10.10</span>Connected to 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>.220 <span class="token punctuation">(</span>vsFTPd 3.0.3<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>192.168.10.10:root<span class="token punctuation">)</span>: anonymous331 Please specify the password.Password:此处敲击回车即可230 Login successful.Remote system <span class="token function">type</span> is UNIX.Using binary mode to transfer files.ftp<span class="token operator">></span> <span class="token function">cd</span> pub250 Directory successfully changed.ftp<span class="token operator">></span> <span class="token function">mkdir</span> files257 <span class="token string">"/pub/files"</span> createdftp<span class="token operator">></span> <span class="token function">rename</span> files database350 Ready <span class="token keyword">for</span> RNTO.250 Rename successful.ftp<span class="token operator">></span> <span class="token function">rmdir</span> database250 Remove directory operation successful.ftp<span class="token operator">></span> <span class="token keyword">exit</span>221 Goodbye.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-2-2、本地用户模式"><a href="#12-2-2、本地用户模式" class="headerlink" title="12.2.2、本地用户模式"></a>12.2.2、本地用户模式</h4><blockquote><p>相较于匿名开放模式，本地用户模式要更安全，而且配置起来也很简单</p></blockquote><blockquote><p>本地用户模式使用的权限参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>anonymous_enable=NO</code></td><td>禁止匿名访问模式</td></tr><tr><td><code>local_enable=YES</code></td><td>允许本地用户模式</td></tr><tr><td><code>write_enable=YES</code></td><td>设置可写权限</td></tr><tr><td><code>local_umask=022</code></td><td>本地用户模式创建文件的umask值</td></tr><tr><td><code>userlist_deny=YES</code></td><td>启用“禁止用户名单”，名单文件为<code>ftpusers</code>和<code>user_list</code></td></tr><tr><td><code>userlist_enable=YES</code></td><td>开启用户作用名单文件功能</td></tr></tbody></table><blockquote><p>普通文件的默认权限是666，目录的默认权限是777，这都是写在系统配置文件中的。但默认值不等于最</p><p>终权限值。<code>umask</code>参数的默认值是022，根据公式“默认权限−umask＝实际权限”，所以普通文件的默认</p><p>权限到手后就剩下644，而目录文件就剩下755了。</p></blockquote><blockquote><p>配置本地用户的参数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/vsftpd/vsftpd.conf</span>  1 anonymous_enable<span class="token operator">=</span>NO  2 local_enable<span class="token operator">=</span>YES  3 write_enable<span class="token operator">=</span>YES  4 local_umask<span class="token operator">=</span>022  5 dirmessage_enable<span class="token operator">=</span>YES  6 xferlog_enable<span class="token operator">=</span>YES  7 connect_from_port_20<span class="token operator">=</span>YES  8 xferlog_std_format<span class="token operator">=</span>YES  9 listen<span class="token operator">=</span>NO 10 listen_ipv6<span class="token operator">=</span>YES 11 pam_service_name<span class="token operator">=</span>vsftpd 12 userlist_enable<span class="token operator">=</span>YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>vsftpd</code>服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启<code>vsftpd</code>服务程序，让</p><p>新的配置参数生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart vsftpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable vsftpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service → /usr/lib/systemd/system/vsftpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可见，在我们输入<code>root</code>管理员的密码之前，就已经被系统拒绝访问了。这是因为<code>vsftpd</code>服务程序所在</p><p>的目录中默认存放着两个名为“用户名单”的文件（<code>ftpusers</code>和<code>user_list</code>）。<code>vsftpd</code>服务程序目录中</p><p>的这两个文件—只要里面写有某位用户的名字，就不再允许这位用户登录到<code>FTP</code>服务器上。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/vsftpd/user_list </span><span class="token comment" spellcheck="true"># vsftpd userlist</span><span class="token comment" spellcheck="true"># If userlist_deny=NO, only allow users in this file</span><span class="token comment" spellcheck="true"># If userlist_deny=YES (default), never allow users in this file, and</span><span class="token comment" spellcheck="true"># do not even prompt for a password.</span><span class="token comment" spellcheck="true"># Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers</span><span class="token comment" spellcheck="true"># for users that are denied.</span>rootbindaemonadmlp<span class="token function">sync</span><span class="token function">shutdown</span>haltmailnewsuucpoperatorgamesnobody<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/vsftpd/ftpusers </span><span class="token comment" spellcheck="true"># Users that are not allowed to login via ftp</span>rootbindaemonadmlp<span class="token function">sync</span><span class="token function">shutdown</span>haltmailnewsuucpoperatorgamesnobody<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在采用本地用户模式登录FTP服务器后，默认访问的是该用户的家目录，而且该目录的默认所有者、所属</p><p>组都是该用户自己，因此不存在写入权限不足的情况。但是当前的操作仍然被拒绝，这是因为我们刚才</p><p>将虚拟机系统还原到最初的状态了。为此，需要再次开启<code>SELinux</code>域中对FTP服务的允许策略</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getsebool -a | grep ftp</span>ftpd_anon_write --<span class="token operator">></span> offftpd_connect_all_unreserved --<span class="token operator">></span> offftpd_connect_db --<span class="token operator">></span> offftpd_full_access --<span class="token operator">></span> offftpd_use_cifs --<span class="token operator">></span> offftpd_use_fusefs --<span class="token operator">></span> offftpd_use_nfs --<span class="token operator">></span> offftpd_use_passive_mode --<span class="token operator">></span> offhttpd_can_connect_ftp --<span class="token operator">></span> offhttpd_enable_ftp_server --<span class="token operator">></span> offtftp_anon_write --<span class="token operator">></span> offtftp_home_dir --<span class="token operator">></span> off<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setsebool -P ftpd_full_access=on</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置妥当后再使用本地用户尝试登录FTP服务器，分别执行文件的创建、重命名及删除等命令。操作均成</p><p>功！</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe vsftpd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ftp 192.168.10.10</span>Connected to 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>.220 <span class="token punctuation">(</span>vsFTPd 3.0.3<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>192.168.10.10:root<span class="token punctuation">)</span>: root331 Please specify the password.Password:此处输入该用户的密码230 Login successful.Remote system <span class="token function">type</span> is UNIX.Using binary mode to transfer files.ftp<span class="token operator">></span> <span class="token function">mkdir</span> files257 <span class="token string">"/root/files"</span> createdftp<span class="token operator">></span> <span class="token function">rename</span> files database350 Ready <span class="token keyword">for</span> RNTO.250 Rename successful.ftp<span class="token operator">></span> <span class="token function">rmdir</span> database250 Remove directory operation successful.ftp<span class="token operator">></span> <span class="token keyword">exit</span>221 Goodbye.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-2-3、虚拟用户模式"><a href="#12-2-3、虚拟用户模式" class="headerlink" title="12.2.3、虚拟用户模式"></a>12.2.3、虚拟用户模式</h4><blockquote><p>拟用户模式是专门创建出一个账号来登录FTP传输服务的，而且这个账号不能用于以<code>SSH</code>方式登录服务</p><p>器。当然，因为它的安全性较之于前面两种模式有了提升，所以配置流程也会稍微复杂一些。</p></blockquote><blockquote><p><strong>第1步</strong>：重新安装<code>vsftpd</code>服务。创建用于进行<code>FTP</code>认证的用户数据库文件，其中奇数行为账户名，偶数</p><p>行为密码。例如，分别创建<code>zhangsan</code>和<code>lisi</code>两个用户，密码均为<code>redhat</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/vsftpd/</span><span class="token punctuation">[</span>root@linuxprobe vsftpd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim vuser.list</span>zhangsanredhatlisiredhat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于明文信息既不安全，也不符合让<code>vsftpd</code>服务程序直接加载的格式，因此需要使用<code>db_load</code>命令用哈</p><p>希（<code>hash</code>）算法将原始的明文信息文件转换成数据库文件，并且降低数据库文件的权限（避免其他人看</p><p>到数据库文件的内容），然后再把原始的明文信息文件删除</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe vsftpd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># db_load -T -t hash -f vuser.list vuser.db</span><span class="token punctuation">[</span>root@linuxprobe vsftpd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 600 vuser.db</span><span class="token punctuation">[</span>root@linuxprobe vsftpd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f vuser.list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：创建<code>vsftpd</code>服务程序用于存储文件的根目录以及用于虚拟用户映射的系统本地用户。<code>vsftpd</code>服</p><p>务用于存储文件的根目录指的是，当虚拟用户登录后所访问的默认位置。</p></blockquote><blockquote><p>由于<code>Linux</code>系统中的每一个文件都有所有者、所属组属性，例如使用虚拟账户“张三”新建了一个文件，但</p><p>是系统中找不到账户“张三”，就会导致这个文件的权限出现错误。为此，需要再创建一个可以映射到虚拟</p><p>用户的系统本地用户。简单来说，就是让虚拟用户默认登录到与之有映射关系的这个系统本地用户的家</p><p>目录中。虚拟用户创建的文件的属性也都归属于这个系统本地用户，从而避免Linux系统无法处理虚拟用</p><p>户所创建文件的属性权限。</p><p>为了方便管理<code>FTP</code>服务器上的数据，可以把这个系统本地用户的家目录设置为<code>/var</code>目录（该目录用来存</p><p>放经常发生改变的数据）。并且为了安全起见，将这个系统本地用户设置为不允许登录FTP服务器，这不</p><p>会影响虚拟用户登录，而且还能够避免黑客通过这个系统本地用户进行登录。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -d /var/ftproot -s /sbin/nologin virtual</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /var/ftproot/</span>drwx------. 3 virtual virtual 74 Jul 14 17:50 /var/ftproot/<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -Rf 755 /var/ftproot/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：建立用于支持虚拟用户的PAM文件。</p></blockquote><blockquote><p><code>PAM</code>（可插拔认证模块）是一种认证机制，通过一些动态链接库和统一的<code>API</code>把系统提供的服务与认证</p><p>方式分开，使得系统管理员可以根据需求灵活调整服务程序的不同认证方式。通俗来讲，<code>PAM</code>是一组安</p><p>全机制的模块，系统管理员可以用来轻易地调整服务程序的认证方式，而不必对应用程序进行任何修</p><p>改。<code>PAM</code>采取了分层设计（应用程序层、应用接口层、鉴别模块层）的思想，其结构如图12-2所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822140938952.png" alt="图12-2 PAM的分层设计结构"></p><blockquote><p>新建一个用于虚拟用户认证的<code>PAM</code>文件<code>vsftpd.vu</code>，其中<code>PAM</code>文件内的“<code>db</code>=”参数为使用<code>db_load</code>命令</p><p>生成的账户密码数据库文件的路径，但不用写数据库文件的后缀</p></blockquote><pre class="line-numbers language-bahs"><code class="language-bahs">[root@linuxprobe ~]# vim /etc/pam.d/vsftpd.vuauth       required     pam_userdb.so db=/etc/vsftpd/vuseraccount    required     pam_userdb.so db=/etc/vsftpd/vuser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：在<code>vsftpd</code>服务程序的主配置文件中通过<code>pam_service_name</code>参数将<code>PAM</code>认证文件的名称修改为</p><p><code>vsftpd.vu</code>。<code>PAM</code>作为应用程序层与鉴别模块层的连接纽带，可以让应用程序根据需求灵活地在自身插</p><p>入所需的鉴别功能模块。当应用程序需要<code>PAM</code>认证时，则需要在应用程序中定义负责认证的<code>PAM</code>配置文</p><p>件，实现所需的认证功能。</p></blockquote><blockquote><p>例如，在<code>vsftpd</code>服务程序的主配置文件中默认就带有参数<code>pam_service_name=vsftpd</code>，表示登录</p><p><code>FTP</code>服务器时是根据<code>/etc/pam.d/vsftpd</code>文件进行安全认证的。现在我们要做的就是把<code>vsftpd</code>主</p><p>配置文件中原有的<code>PAM</code>认证文件<code>vsftpd</code>修改为新建的<code>vsftpd.vu</code>文件即可。该操作中用到的参数以及</p><p>作用如下表所示。</p></blockquote><blockquote><p>利用<code>PAM</code>文件进行认证时使用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>anonymous_enable=NO</code></td><td>禁止匿名开放模式</td></tr><tr><td><code>local_enable=YES</code></td><td>允许本地用户模式</td></tr><tr><td><code>guest_enable=YES</code></td><td>开启虚拟用户模式</td></tr><tr><td><code>guest_username=virtual</code></td><td>指定虚拟用户账户</td></tr><tr><td><code>pam_service_name=vsftpd.vu</code></td><td>指定PAM文件</td></tr><tr><td><code>allow_writeable_chroot=YES</code></td><td>允许对禁锢的FTP根目录执行写入操作，而且不拒绝用户的登录请求</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/vsftpd/vsftpd.conf  </span>  1 anonymous_enable<span class="token operator">=</span>NO  2 local_enable<span class="token operator">=</span>YES  3 write_enable<span class="token operator">=</span>YES  4 guest_enable<span class="token operator">=</span>YES  5 guest_username<span class="token operator">=</span>virtual  6 allow_writeable_chroot<span class="token operator">=</span>YES  7 local_umask<span class="token operator">=</span>022  8 dirmessage_enable<span class="token operator">=</span>YES  9 xferlog_enable<span class="token operator">=</span>YES 10 connect_from_port_20<span class="token operator">=</span>YES 11 xferlog_std_format<span class="token operator">=</span>YES 12 listen<span class="token operator">=</span>NO 13 listen_ipv6<span class="token operator">=</span>YES 14 pam_service_name<span class="token operator">=</span>vsftpd.vu 15 userlist_enable<span class="token operator">=</span>YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第5步</strong>：为虚拟用户设置不同的权限。虽然账户z<code>hangsan</code>和<code>lisi</code>都是用于<code>vsftpd</code>服务程序认证的虚拟</p><p>账户，但是我们依然想对这两人进行区别对待。比如，<strong>允许张三上传、创建、修改、查看、删除文件</strong>，</p><p>只允许李四<strong>查看文件</strong>。这可以通过<code>vsftpd</code>服务程序来实现。只需新建一个目录，在里面分别创建两个以</p><p><code>zhangsan</code>和<code>lisi</code>命名的文件，其中在名为<code>zhangsan</code>的文件中写入允许的相关权限（使用匿名用户的</p><p>参数）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /etc/vsftpd/vusers_dir/</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/vsftpd/vusers_dir/</span><span class="token punctuation">[</span>root@linuxprobe vusers_dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch lisi</span><span class="token punctuation">[</span>root@linuxprobe vusers_dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim zhangsan</span>anon_upload_enable<span class="token operator">=</span>YESanon_mkdir_write_enable<span class="token operator">=</span>YESanon_other_write_enable<span class="token operator">=</span>YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后再次修改<code>vsftpd</code>主配置文件，通过添加<code>user_config_dir</code>参数来定义这两个虚拟用户不同权限的</p><p>配置文件所存放的路径。为了让修改后的参数立即生效，需要重启vsftpd服务程序并将该服务添加到开</p><p>机启动项中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/vsftpd/vsftpd.conf</span>  1 anonymous_enable<span class="token operator">=</span>NO  2 local_enable<span class="token operator">=</span>YES  3 write_enable<span class="token operator">=</span>YES  4 guest_enable<span class="token operator">=</span>YES  5 guest_username<span class="token operator">=</span>virtual  6 allow_writeable_chroot<span class="token operator">=</span>YES  7 local_umask<span class="token operator">=</span>022  8 dirmessage_enable<span class="token operator">=</span>YES  9 xferlog_enable<span class="token operator">=</span>YES 10 connect_from_port_20<span class="token operator">=</span>YES 11 xferlog_std_format<span class="token operator">=</span>YES 12 listen<span class="token operator">=</span>NO 13 listen_ipv6<span class="token operator">=</span>YES 14 pam_service_name<span class="token operator">=</span>vsftpd.vu 15 userlist_enable<span class="token operator">=</span>YES 16 user_config_dir<span class="token operator">=</span>/etc/vsftpd/vusers_dir<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart vsftpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable vsftpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service → /usr/lib/systemd/system/vsftpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第6步</strong>：设置<code>SELinux</code>域允许策略，然后使用虚拟用户模式登录<code>FTP</code>服务器。相信大家可以猜到，</p><p><code>SELinux</code>会继续来捣乱。所以，先按照前面实验中的步骤开启<code>SELinux</code>域的允许策略，以免再次出现操</p><p>作失败的情况</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getsebool -a | grep ftp</span>ftpd_anon_write --<span class="token operator">></span> offftpd_connect_all_unreserved --<span class="token operator">></span> offftpd_connect_db --<span class="token operator">></span> offftpd_full_access --<span class="token operator">></span> offftpd_use_cifs --<span class="token operator">></span> offftpd_use_fusefs --<span class="token operator">></span> offftpd_use_nfs --<span class="token operator">></span> offftpd_use_passive_mode --<span class="token operator">></span> offhttpd_can_connect_ftp --<span class="token operator">></span> offhttpd_enable_ftp_server --<span class="token operator">></span> offtftp_anon_write --<span class="token operator">></span> offtftp_home_dir --<span class="token operator">></span> off<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setsebool -P ftpd_full_access=on</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3、TFTP简单文件传输协议"><a href="#12-3、TFTP简单文件传输协议" class="headerlink" title="12.3、TFTP简单文件传输协议"></a>12.3、TFTP简单文件传输协议</h3><blockquote><p>简单文件传输协议（<code>Trivial File Transfer Protocol</code>，<code>TFTP</code>）是一种基于<code>UDP</code>协议在客户端和服</p><p>务器之间进行简单文件传输的协议。顾名思义，它提供不复杂、开销不大的文件传输服务，可将其当作</p><p><code>FTP</code>协议的简化版本。</p></blockquote><blockquote><p><code>TFTP</code>的命令功能不如<code>FTP</code>服务强大，甚至不能遍历目录，在安全性方面也弱于<code>FTP</code>服务。而且，由于</p><p><code>TFTP</code>在传输文件时采用的是<code>UDP</code>协议，占用的端口号为69，因此文件的传输过程也不像<code>FTP</code>协议那样可</p><p>靠。但是，因为<code>TFTP</code>不需要客户端的权限认证，也就减少了无谓的系统和网络带宽消耗，因此在传输琐</p><p>碎（<code>trivial</code>）不大的文件时，效率更高</p></blockquote><blockquote><p>接下来在系统上安装相关的软件包，进行体验。其中，<code>tftp-server</code>是服务程序，<code>tftp</code>是用于连接测</p><p>试的客户端工具，<code>xinetd</code>是管理服务</p></blockquote><blockquote><p>在<code>Linux</code>系统中，<code>TFTP</code>服务是使用<code>xinetd</code>服务程序来管理的。<code>xinetd</code>服务可以用来管理多种轻量级</p><p>的网络服务，而且具有强大的日志功能。它专门用于控制那些比较小的应用程序的开启与关闭，有点类</p><p>似于带有独立开关的插线板（见图12-3），想开启那个服务，就编辑对应的<code>xinetd</code>配置文件的开关参</p><p>数。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822141955448.png" alt="图12-3 一个带有独立开关的插线板"></p><blockquote><p>简单来说，在安装<code>TFTP</code>软件包后，还需要在<code>xinetd</code>服务程序中将其开启。在<code>RHEL 8</code>系统中，<code>tftp</code>所</p><p>对应的配置文件默认不存在，需要用户根据示例文件（<code>/usr/share/doc/xinetd/sample.conf</code>）自行创建</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/xinetd.d/tftp</span><span class="token function">service</span> tftp<span class="token punctuation">{</span>        socket_type             <span class="token operator">=</span> dgram        protocol                <span class="token operator">=</span> udp        <span class="token function">wait</span>                    <span class="token operator">=</span> <span class="token function">yes</span>        user                    <span class="token operator">=</span> root        server                  <span class="token operator">=</span> /usr/sbin/in.tftpd        server_args             <span class="token operator">=</span> -s /var/lib/tftpboot        disable                 <span class="token operator">=</span> no        per_source              <span class="token operator">=</span> 11        cps                     <span class="token operator">=</span> 100 2        flags                   <span class="token operator">=</span> IPv4<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后，重启<code>xinetd</code>服务并将它添加到系统的开机启动项中，以确保TFTP服务在系统重启后依然处于</p><p>运行状态。考虑到有些系统的防火墙默认没有允许<code>UDP</code>协议的69端口，因此需要手动将该端口号加入</p><p>到防火墙的允许策略中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart tftp</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable tftp</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart xinetd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable xinetd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --permanent --add-port=69/udp</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload </span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <code>TFTP</code>的根目录为<code>/var/lib/tftpboot</code>。可以使用刚才安装好的<code>tftp</code>命令尝试访问其中的文件，亲身</p><p>体验<code>TFTP</code>服务的文件传输过程。在使用<code>tftp</code>命令访问文件时，可能会用到表中的参数</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>?</code></td><td>帮助信息</td></tr><tr><td><code>put</code></td><td>上传文件</td></tr><tr><td><code>get</code></td><td>下载文件</td></tr><tr><td><code>verbose</code></td><td>显示详细的处理信息</td></tr><tr><td><code>status</code></td><td>显示当前的状态信息</td></tr><tr><td><code>binary</code></td><td>使用二进制进行传输</td></tr><tr><td><code>ascii</code></td><td>使用ASCII码进行传输</td></tr><tr><td><code>timeout</code></td><td>设置重传的超时时间</td></tr><tr><td><code>quit</code></td><td>退出</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "i love linux" > /var/lib/tftpboot/readme.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tftp 192.168.10.10</span>tftp<span class="token operator">></span> get readme.txttftp<span class="token operator">></span> quit<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>anaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  readme.txt  VideosDesktop          Downloads  Music                 Public    Templates<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat readme.txt </span>i love linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、使用Samba或NFS实现文件共享"><a href="#十三、使用Samba或NFS实现文件共享" class="headerlink" title="十三、使用Samba或NFS实现文件共享"></a>十三、使用Samba或NFS实现文件共享</h2><hr><h3 id="13-1、SAMBA文件共享服务"><a href="#13-1、SAMBA文件共享服务" class="headerlink" title="13.1、SAMBA文件共享服务"></a>13.1、<code>SAMBA</code>文件共享服务</h3><p>1987年，微软公司和英特尔公司共同制定了<code>SMB</code>（<code>Server Messages Block</code>，服务器消息块）协议，旨在</p><p>解决局域网内的文件或打印机等资源的共享问题，这也使得在多个主机之间共享文件变得越来越简单。到了</p><p>1991年，当时还在读大学的<code>Tridgwell</code>为了解决<code>Linux</code>系统与<code>Windows</code>系统之间的文件共享问题，基于<code>SMB</code></p><p>协议开发出了<code>SMBServer</code>服务程序。这是一款开源的文件共享软件，经过简单配置就能够实现<code>Linux</code>系统与</p><p><code>Windows</code>系统之间的文件共享工作。当时，<code>Tridgwell</code>想把这款软件的名字<code>SMBServer</code>注册成为商标，但却</p><p>被商标局以“SMB是没有意义的字符”为由而拒绝了申请。后来<code>Tridgwell</code>不断翻看词典，突然看到一个拉丁</p><p>舞蹈的名字—<code>Samba</code>，而且这个热情洋溢的舞蹈名字中又恰好包含了“SMB”，于是<code>Samba</code>服务程序的名字由此</p><p>诞生（见图13-1）。<code>Samba</code>服务程序现在已经成为在<code>Linux</code>系统与<code>Windows</code>系统之间共享文件的最佳选择。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822152004052.png" alt="图13-1 Samba服务程序的logo"></p><blockquote><p><code>Samba</code>服务程序的配置方法与之前讲解的很多服务的配置方法类似，首先需要先通过软件仓库来安装</p><p><code>Samba</code>服务程序（<code>Samba</code>服务程序的名字也恰巧是软件包的名字）。顺带再安装一个<code>samba-client</code>软</p><p>件包，这是一会儿用于测试共享目录的客户端程序：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install samba samba-client</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装完毕后打开<code>Samba</code>服务程序的主配置文件，好在参数并不多，只有37行。其中第17～22行代表共享</p><p><strong>每位登录用户的家目录内容</strong>。虽然在某些情况下这可以更方便地共享文件，但这个默认操作着实有些危</p><p>险，建议不要共享，将其删除掉。第24～29行是用SMB协议共享<strong>本地的打印机设备</strong>，方便局域网内的用</p><p>户远程使用打印机设备。当前我们没有打印机设备，因此建议也将其删除掉，不共享。最后的第31～37</p><p>行依然为<strong>共享打印机设备的参数</strong>，同样建议予以删除。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/samba/smb.conf</span>  1 <span class="token comment" spellcheck="true"># See smb.conf.example for a more detailed config file or</span>  2 <span class="token comment" spellcheck="true"># read the smb.conf manpage.</span>  3 <span class="token comment" spellcheck="true"># Run 'testparm' to verify the config is correct after</span>  4 <span class="token comment" spellcheck="true"># you modified it.</span>  5   6 <span class="token punctuation">[</span>global<span class="token punctuation">]</span>  7         workgroup <span class="token operator">=</span> SAMBA  8         security <span class="token operator">=</span> user  9  10         passdb backend <span class="token operator">=</span> tdbsam 11  12         printing <span class="token operator">=</span> cups 13         <span class="token function">printcap</span> name <span class="token operator">=</span> cups 14         load printers <span class="token operator">=</span> <span class="token function">yes</span> 15         cups options <span class="token operator">=</span> raw 16  17 <span class="token punctuation">[</span>homes<span class="token punctuation">]</span> 18         comment <span class="token operator">=</span> Home Directories 19         valid <span class="token function">users</span> <span class="token operator">=</span> %S, %D%w%S 20         browseable <span class="token operator">=</span> No 21         <span class="token function">read</span> only <span class="token operator">=</span> No 22         inherit acls <span class="token operator">=</span> Yes 23  24 <span class="token punctuation">[</span>printers<span class="token punctuation">]</span> 25         comment <span class="token operator">=</span> All Printers 26         path <span class="token operator">=</span> /var/tmp 27         printable <span class="token operator">=</span> Yes 28         create mask <span class="token operator">=</span> 0600 29         browseable <span class="token operator">=</span> No 30  31 <span class="token punctuation">[</span>print$<span class="token punctuation">]</span> 32         comment <span class="token operator">=</span> Printer Drivers 33         path <span class="token operator">=</span> /var/lib/samba/drivers 34         <span class="token function">write</span> list <span class="token operator">=</span> @printadmin root 35         force group <span class="token operator">=</span> @printadmin 36         create mask <span class="token operator">=</span> 0664 37         directory mask <span class="token operator">=</span> 0775<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在对<code>Samba</code>服务的主配置文件进行一顿删减操作之后，最后的有效配置参数只剩下了8行。所剩不多的参</p><p>数中，还能继续删除不需要的参数。例如，第5～8行参数中所提到的<code>cups</code>的全称为<code>Common UNIX </code></p><p><code>Printing System</code>（通用UNIX打印系统），依然是用于打印机或打印服务器的，继续予以删除。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/samba/smb.conf</span>  1 <span class="token punctuation">[</span>global<span class="token punctuation">]</span>  2         workgroup <span class="token operator">=</span> SAMBA  3         security <span class="token operator">=</span> user  4         passdb backend <span class="token operator">=</span> tdbsam  5         printing <span class="token operator">=</span> cups  6         <span class="token function">printcap</span> name <span class="token operator">=</span> cups  7         load printers <span class="token operator">=</span> <span class="token function">yes</span>  8         cups options <span class="token operator">=</span> raw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <code>Samba</code>服务程序中的参数以及作用</p></blockquote><table><thead><tr><th>行数</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td><code># See smb.conf.example for a more detailed config file or</code></td><td>注释信息</td></tr><tr><td>2</td><td><code># read the smb.conf manpage.</code></td><td>注释信息</td></tr><tr><td>3</td><td><code># Run 'testparm' to verify the config is correct after</code></td><td>注释信息</td></tr><tr><td>4</td><td><code># you modified it.</code></td><td>注释信息</td></tr><tr><td>5</td><td><code>[global]</code></td><td>全局参数</td></tr><tr><td>6</td><td><code>workgroup = SAMBA</code></td><td>工作组名称</td></tr><tr><td>7</td><td></td><td></td></tr><tr><td>8</td><td><code>security = user</code></td><td>安全验证的方式，总共有4种</td></tr><tr><td>9</td><td></td><td></td></tr><tr><td>10</td><td><code>passdb backend = tdbsam</code></td><td>定义用户后台的类型，总共有3种</td></tr><tr><td>11</td><td></td><td></td></tr><tr><td>12</td><td><code>printing = cups</code></td><td>打印服务协议</td></tr><tr><td>13</td><td><code>printcap name = cups</code></td><td>打印服务名称</td></tr><tr><td>14</td><td><code>load printers = yes</code></td><td>是否加载打印机</td></tr><tr><td>15</td><td><code>cups options = raw</code></td><td>打印机的选项</td></tr><tr><td>16</td><td></td><td></td></tr><tr><td>17</td><td><code>[homes]</code></td><td>共享名称</td></tr><tr><td>18</td><td><code>comment = Home Directories</code></td><td>描述信息</td></tr><tr><td>19</td><td><code>valid users = %S, %D%w%S</code></td><td>可用账户</td></tr><tr><td>20</td><td><code>browseable = No</code></td><td>指定共享信息是否在“网上邻居”中可见</td></tr><tr><td>21</td><td><code>read only = No</code></td><td>是否只读</td></tr><tr><td>22</td><td><code>inherit acls = Yes</code></td><td>是否继承访问控制列表</td></tr><tr><td>23</td><td></td><td></td></tr><tr><td>24</td><td><code>[printers]</code></td><td>共享名称</td></tr><tr><td>25</td><td><code>comment = All Printers</code></td><td>描述信息</td></tr><tr><td>26</td><td><code>path = /var/tmp</code></td><td>共享路径</td></tr><tr><td>27</td><td><code>printable = Yes</code></td><td>是否可打印</td></tr><tr><td>28</td><td><code>create mask = 0600</code></td><td>文件权限</td></tr><tr><td>29</td><td><code>browseable = No</code></td><td>指定共享信息是否在“网上邻居”中可见</td></tr><tr><td>30</td><td></td><td></td></tr><tr><td>31</td><td><code>[print$]</code></td><td>共享名称</td></tr><tr><td>32</td><td><code>comment = Printer Drivers</code></td><td>描述信息</td></tr><tr><td>33</td><td><code>path = /var/lib/samba/drivers</code></td><td>共享路径</td></tr><tr><td>34</td><td><code>write list = @printadmin root</code></td><td>可写入文件的用户列表</td></tr><tr><td>35</td><td><code>force group = @printadmin</code></td><td>用户组列表</td></tr><tr><td>36</td><td><code>create mask = 0664</code></td><td>文件权限</td></tr><tr><td>37</td><td><code>directory mask = 0775</code></td><td>目录权限</td></tr></tbody></table><blockquote><p> <code>security</code>参数代表用户登录<code>Samba</code>服务时采用的验证方式。总共有4种可用参数：</p><ul><li><strong>share</strong>：代表主机无须验证密码。这相当于vsftpd服务的匿名公开访问模式，比较方便，但安全性很差。</li><li><strong>user</strong>：代表登录Samba服务时需要使用账号密码进行验证，通过后才能获取到文件。这是默认的验证方式，最为常用。</li><li><strong>domain</strong>：代表通过<strong>域控制器</strong>进行身份验证，用来限制用户的来源域。</li><li><strong>server</strong>：代表使用独立主机验证来访用户提供的密码。这相当于集中管理账号，并不常用。</li></ul></blockquote><h4 id="13-1-1、配置共享资源"><a href="#13-1-1、配置共享资源" class="headerlink" title="13.1.1、配置共享资源"></a>13.1.1、配置共享资源</h4><p><code>Samba</code>服务程序的主配置文件与前面<code>Apache</code>服务很相似，包括<strong>全局配置参数</strong>和<strong>区域配置参数</strong>。全局配置参</p><p>数用于设置整体的资源共享环境，对里面的每一个独立的共享资源都有效。区域配置参数则用于设置单独的共</p><p>享资源，且仅对该资源有效。创建共享资源的方法很简单，只要将表中的参数写入到<code>Samba</code>服务程序的主</p><p>配置文件中，然后重启该服务即可。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>[database]</code></td><td>共享名称为database</td></tr><tr><td><code>comment = Do not arbitrarily modify the database file</code></td><td>警告用户不要随意修改数据库</td></tr><tr><td><code>path = /home/database</code></td><td>共享目录为/home/database</td></tr><tr><td><code>public = no</code></td><td>关闭“所有人可见”</td></tr><tr><td><code>writable = yes</code></td><td>允许写入操作</td></tr></tbody></table><blockquote><p><strong>第1步</strong>：<strong>创建用于访问共享资源的账户信息</strong>。在RHEL 8系统中，<code>Samba</code>服务程序默认使用的是用户密码</p><p>认证模式（<code>user</code>）。这种认证模式可以确保仅让有密码且受信任的用户访问共享资源，而且认证过程也</p><p>十分简单。不过，只有建立账户信息数据库之后，才能使用用户密码认证模式。另外，<code>Samba</code>服<strong>务程序</strong></p><p><strong>的数据库要求账户必须在当前系统中已经存在</strong>，否则日后创建文件时将导致文件的权限属性混乱不堪，</p><p>由此引发错误。</p></blockquote><blockquote><p> <code>pdbedit</code>用于管理<code>Samba</code>服务程序的账户信息数据库，格式为“<code>pdbedit</code> [选项]账户”。在第一次把账户</p><p>信息写入到数据库时需要使用<code>-a</code>参数，以后在执行修改密码、删除账户等操作时就不再需要该参数了。</p><p><code>pdbedit</code>中使用的参数以及作用如下表所示。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-a </code>用户名</td><td>建立<code>Samba</code>用户</td></tr><tr><td><code>-x</code> 用户名</td><td>删除<code>Samba</code>用户</td></tr><tr><td><code>-L</code></td><td>列出用户列表</td></tr><tr><td><code>-Lv</code></td><td>列出用户详细信息的列表</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id linuxprobe</span>uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pdbedit -a -u linuxprobe</span>new password:此处输入该账户在Samba服务数据库中的密码retype new password:再次输入密码进行确认Unix username:        linuxprobeNT username:          Account Flags:        <span class="token punctuation">[</span>U          <span class="token punctuation">]</span>User SID:             S-1-5-21-650031181-3622628401-3290108334-1000Primary Group SID:    S-1-5-21-650031181-3622628401-3290108334-513Full Name:            linuxprobeHome Directory:       \\linuxprobe\linuxprobeHomeDir Drive:        Logon Script:         Profile Path:         \\linuxprobe\linuxprobe\profileDomain:               LINUXPROBEAccount desc:         Workstations:         Munged dial:          Logon time:           0Logoff time:          Wed, 06 Feb 2036 23:06:39 CSTKickoff time:         Wed, 06 Feb 2036 23:06:39 CSTPassword last set:    Fri, 05 Mar 2021 18:52:35 CSTPassword can change:  Fri, 05 Mar 2021 18:52:35 CSTPassword must change: neverLast bad password   <span class="token keyword">:</span> 0Bad password count  <span class="token keyword">:</span> 0Logon hours         <span class="token keyword">:</span> FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：<strong>创建用于共享资源的文件目录</strong>。在创建时，不仅要考虑到文件读写权限的问题，而且由于</p><p><code>/home</code>目录是系统中普通用户的家目录，因此还需要考虑应用于该目录的<code>SELinux</code>安全上下文所带来的</p><p>限制。在<code>Samba</code>的帮助手册中显示，正确的文件上下文值应该是<code>samba_share_t</code>，所以只需要修改完毕</p><p>后执行<code>restorecon</code>命令，就能让应用于目录的新<code>SELinux</code>安全上下文立即生效。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /home/database</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -Rf linuxprobe:linuxprobe /home/database</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t samba_share_t /home/database</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># restorecon -Rv /home/database</span>Relabeled /home/database from unconfined_u:object_r:user_home_dir_t:s0 to unconfined_u:object_r:samba_share_t:s0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：<strong>设置<code>SELinux</code>服务与策略，使其允许通过<code>Samba</code>服务程序访问普通用户家目录</strong>。</p><p>执行<code>getsebool</code>命令，筛选出所有与<code>Samba</code>服务程序相关的<code>SELinux</code>域策略，根据策略的名称（</p><p>和经验）选择出正确的策略条目进行开启即可</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getsebool -a | grep samba</span>samba_create_home_dirs --<span class="token operator">></span> offsamba_domain_controller --<span class="token operator">></span> offsamba_enable_home_dirs --<span class="token operator">></span> offsamba_export_all_ro --<span class="token operator">></span> offsamba_export_all_rw --<span class="token operator">></span> offsamba_load_libgfapi --<span class="token operator">></span> offsamba_portmapper --<span class="token operator">></span> offsamba_run_unconfined --<span class="token operator">></span> offsamba_share_fusefs --<span class="token operator">></span> offsamba_share_nfs --<span class="token operator">></span> offsanlock_use_samba --<span class="token operator">></span> offtmpreaper_use_samba --<span class="token operator">></span> offuse_samba_home_dirs --<span class="token operator">></span> offvirt_use_samba --<span class="token operator">></span> off<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setsebool -P samba_enable_home_dirs on</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：在<code>Samba</code>服务程序的主配置文件中，根写入共享信息。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/samba/smb.conf </span><span class="token punctuation">[</span>global<span class="token punctuation">]</span>        workgroup <span class="token operator">=</span> SAMBA        security <span class="token operator">=</span> user        passdb backend <span class="token operator">=</span> tdbsam<span class="token punctuation">[</span>database<span class="token punctuation">]</span>        comment <span class="token operator">=</span> Do not arbitrarily modify the database <span class="token function">file</span>        path <span class="token operator">=</span> /home/database        public <span class="token operator">=</span> no        writable <span class="token operator">=</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第5步</strong>：<code>Samba</code>服务程序的配置工作基本完毕。<code>Samba</code>服务程序在<code>Linux</code>系统中的名字为smb，所以重启</p><p><code>smb</code>服务并加入到启动项中，保证在重启服务器后依然能够为用户持续提供服务。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart smb </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable smb </span>Created symlink /etc/systemd/system/multi-user.target.wants/smb.service → /usr/lib/systemd/system/smb.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>为了避免防火墙限制用户访问，这里将<code>iptables</code>防火墙清空，再把<code>Samba</code>服务添加到<code>firewalld</code>防火</p><p>墙中，确保万无一失。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables-save </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --permanent --add-service=samba</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第6步：</strong>可以使用“<code>systemctl status smb</code>”命令查看服务器是否启动了<code>Samba</code>服务。如果想进一步查看</p><p><code>Samba</code>服务都共享了哪些目录，则可以使用<code>smbclient</code>命令来查看共享详情；-<code>U</code>参数指定了用户名称</p><p>（用哪位用户挂载了<code>Samba</code>服务，就用哪位用户的身份进行查看）；<code>-L</code>参数列出了共享清单。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># smbclient -U linuxprobe -L 192.168.10.10</span>Enter SAMBA\linuxprobe's password: 此处输入该账户在Samba服务数据库中的密码    Sharename       Type      Comment    ---------       ----      -------    database        Disk      Do not arbitrarily modify the database <span class="token function">file</span>    IPC$            IPC       IPC Service <span class="token punctuation">(</span>Samba 4.9.1<span class="token punctuation">)</span>Reconnecting with SMB1 <span class="token keyword">for</span> workgroup listing.    Server               Comment    ---------            -------    Workgroup            Master    ---------            -------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-1-2、Windows挂载共享"><a href="#13-1-2、Windows挂载共享" class="headerlink" title="13.1.2、Windows挂载共享"></a>13.1.2、<code>Windows</code>挂载共享</h4><p>无论<code>Samba</code>共享服务是部署<code>Windows</code>系统上还是部署在<code>Linux</code>系统上，通过<code>Windows</code>系统进行访问时，其步</p><p>骤和方法都是一样的。下面假设<code>Samba</code>共享服务部署在<code>Linux</code>系统上，并通过<code>Windows</code>系统来访问<code>Samba</code>服</p><p>务。<code>Samba</code>共享服务器和<code>Windows</code>客户端的<code>IP</code>地址可以根据下表来设置。</p><blockquote><p> <code>Samba</code>服务器和<code>Windows</code>客户端使用的操作系统以及<code>IP</code>地址</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>Samba共享服务器</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>Linux客户端</td><td>RHEL 8</td><td>192.168.10.20</td></tr><tr><td>Windows客户端</td><td>Windows 10</td><td>192.168.10.30</td></tr></tbody></table><p>要在<code>Windows</code>系统中访问共享资源，只需要单击<code>Windows</code>系统的“开始”按钮后输入两个反斜杠，然后再添加</p><p>服务器的<code>IP</code>地址即可，如图13-2所示</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822155530601.png" alt="图13-2 在Windows系统中访问共享资源"></p><p>现在应该就能看到<code>Samba</code>共享服务的登录界面了。先使用<code>linuxprobe</code>账户的系统本地密码尝试登录，结果出</p><p>现了如图13-3所示的报错信息。由此可以验证，在<code>RHEL 8</code>系统中，<code>Samba</code>服务程序使用的是独立的账户信息</p><p>数据库。所以，即便在<code>Linux</code>系统中有一个<code>linuxprobe</code>账户，<code>Samba</code>服务程序使用的账户信息数据库中也有</p><p>一个同名的<code>linuxprobe</code>账户，大家一定要弄清楚它们各自所对应的密码，它们仅仅是名称相同而已。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822155701123.png" alt="图13-3 访问Samba共享服务提示出错"></p><p>在正确输入<code>Samba</code>服务数据库中的<code>linuxprobe</code>账户名以及使用<code>pdbedit</code>命令设置的密码后，就可以登录到</p><p><code>Samba</code>服务程序的共享界面中了，如图13-4所示。此时，可以尝试执行查看、写入、更名、删除文件等操</p><p>作。</p><p>由于<code>Windows</code>系统的缓存原因，有可能您在第二次登录时提供了正确的账户和密码，依然会报错，这时只需</p><p>要重新启动一下<code>Windows</code>客户端就没问题了（如果<code>Windows</code>系统依然报错，请检查上述步骤是否有做错的地</p><p>方）。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822160329092.png" alt="图13-4 成功访问Samba共享服务"></p><h4 id="13-1-3、Linux挂载共享"><a href="#13-1-3、Linux挂载共享" class="headerlink" title="13.1.3、Linux挂载共享"></a>13.1.3、<code>Linux</code>挂载共享</h4><p>上面的实验操作可能会让各位读者误以为<code>Samba</code>服务程序只是为了解决<code>Linux</code>系统和<code>Windows</code>系统的资源共</p><p>享问题而设计的。其实，<code>Samba</code>服务程序还可以实现<code>Linux</code>系统之间的文件共享。请各位读者按照下表来设</p><p>置<code>Samba</code>服务程序所在主机（即<code>Samba</code>共享服务器）和<code>Linux</code>客户端使用的<code>IP</code>地址，然后在客户端安装支持</p><p>文件共享服务的软件包（<code>cifs-utils</code>）。</p><blockquote><p><code>Samba</code>共享服务器和<code>Linux</code>客户端各自使用的操作系统以及<code>IP</code>地址</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>Samba共享服务器</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>Linux客户端</td><td>RHEL 8</td><td>192.168.10.20</td></tr><tr><td>Windows客户端</td><td>Windows 10</td><td>192.168.10.30</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install cifs-utils</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.AppStream                                                    3.1 MB/s <span class="token operator">|</span> 3.2 kB     00:00    BaseOS                                                       2.7 MB/s <span class="token operator">|</span> 2.7 kB     00:00    Dependencies resolved.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Package                Arch               Version                  Repository          Size<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Installing: cifs-utils             x86_64             6.8-2.el8                BaseOS              93 kTransaction Summary<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Install  1 Package         ………………省略部分输出信息………………    Installed:  cifs-utils-6.8-2.el8.x86_64                                                     Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装好软件包后，在<code>Linux</code>客户端创建一个用于挂载<code>Samba</code>服务共享资源的目录。这个目录可以与服务器上</p><p>的共享名称同名，以便于日后查找。<code>mount</code>命令中的<code>-t</code>参数用于指定协议类型，<code>-o</code>参数用于指定用户名和</p><p>密码，最后追加上服务器<code>IP</code>地址、共享名称和本地挂载目录即可。服务器IP地址后面的共享名称指的是配置</p><p>文件中[<code>database</code>]的值，而不是服务器本地挂载的目录名称。虽然这两个值可能一样，但大家应该认出它们</p><p>的区别。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /database</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -t cifs -o username=linuxprobe,password=redhat //192.168.10.10/database /database</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem                Size  Used Avail Use% Mounted ondevtmpfs                  969M     0  969M   0% /devtmpfs                     984M     0  984M   0% /dev/shmtmpfs                     984M  9.6M  974M   1% /runtmpfs                     984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root      17G  3.9G   14G  23% //dev/sr0                  6.7G  6.7G     0 100% /media/cdrom/dev/sda1                1014M  152M  863M  15% /boottmpfs                     197M   16K  197M   1% /run/user/42tmpfs                     197M  3.4M  194M   2% /run/user/0//192.168.10.10/database   17G  3.9G   14G  23% /database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在每次重启电脑后都需要使用<code>mount</code>命令手动挂载远程共享目录，是不是觉得很麻烦呢？其实可以按照</p><p><code>Samba</code>服务的用户名、密码、共享域的顺序将相关信息写入一个认证文件中，然后让<code>/etc/fstab</code>文件和系统</p><p>自动加载它。为了保证不被其他人随意看到，最后把这个认证文件的权限修改为仅<code>root</code>管理员才能够读写：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim auth.smb</span>username<span class="token operator">=</span>linuxprobepassword<span class="token operator">=</span>redhatdomain<span class="token operator">=</span>MYGROUP<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 600 auth.smb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将挂载信息写入<code>/etc/fstab</code>文件中，以确保共享挂载信息在服务器重启后依然生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Thu Feb 25 10:42:11 2021</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                      /             xfs     defaults                    0 0UUID<span class="token operator">=</span>37d0bdc6-d70d-4cc0-b356-51195ad90369  /boot         xfs     defaults                    1 0/dev/mapper/rhel-swap                      swap          swap    defaults                    0 0/dev/cdrom                                 /media/cdrom  iso9660 defaults                    0 0 //192.168.10.10/database                   /database     cifs    credentials<span class="token operator">=</span>/root/auth.smb  0 0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Linux</code>客户端成功地挂载了<code>Samba</code>服务的共享资源。进入到挂载目录<code>/database</code>后就可以看到<code>Windows</code>系统</p><p>访问<code>Samba</code>服务程序时留下来的文件了（即文件<code>Memo.txt</code>）。当然，也可以对该文件进行读写操作并保存。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /database/Memo.txt</span>i can edit it <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13-2、NFS网络文件系统"><a href="#13-2、NFS网络文件系统" class="headerlink" title="13.2、NFS网络文件系统"></a>13.2、<code>NFS</code>网络文件系统</h3><p><code>NFS</code>网络文件系统服务可以将远程<code>Linux</code>系统上的文件共享资源挂载到本地主机的目录上，从而使得本地</p><p>主机（<code>Linux</code>客户端）基于<code>TCP/IP</code>协议，像使用本地主机上的资源那样读写远程<code>Linux</code>系统上的共享文件。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220822165956177.png"></p><blockquote><p>安装<code>NFS</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install nfs-utils</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Last metadata expiration check: 0:00:12 ago on Sat 06 Mar 2021 04:48:38 AM CST.Package nfs-utils-1:2.3.3-14.el8.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第1步</strong>：为了检验<code>NFS</code>服务配置的效果，我们需要使用两台<code>Linux</code>主机（一台充当<code>NFS</code>服务器，一台充</p><p>当<code>NFS</code>客户端）</p></blockquote><blockquote><p>  两台Linux主机所使用的操作系统以及IP地址</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>NFS服务器</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>NFS客户端</td><td>RHEL 8</td><td>192.168.10.20</td></tr></tbody></table><blockquote><p>要忘记配置好防火墙，以免默认的防火墙策略禁止正常的<code>NFS</code>共享服务。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables-save</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=nfs</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=rpc-bind</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=mountd</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：在<code>NFS</code>服务器上建立用于<code>NFS</code>文件共享的目录，并设置足够的权限确保其他人也有写入权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /nfsfile</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 777 /nfsfile</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "welcome to linuxprobe.com" > /nfsfile/readme</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：<code>NFS</code>服务程序的配置文件为<code>/etc/exports</code>，默认情况下里面没有任何内容。我们可以按照“共享</p><p>目录的路径 允许访问的<code>NFS</code>客户端（共享权限参数）”的格式，定义要共享的目录与相应的权限。</p></blockquote><p>例如，如果想要把<code>/nfsfile</code>目录共享给192.168.10.0/24网段内的所有主机，让这些主机都拥有读写权</p><p>限，在将数据写入到NFS服务器的硬盘中后才会结束操作，最大限度保证数据不丢失，以及把来访客户端</p><p><code>root</code>管理员映射为本地的匿名用户等，则可以按照下面命令中的格式，将表中的参数写到NFS服务程序</p><p>的配置文件中。</p><blockquote><p>用于配置<code>NFS</code>服务程序配置文件的参数</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>ro</code></td><td>只读</td></tr><tr><td><code>rw</code></td><td>读写</td></tr><tr><td><code>root_squash</code></td><td>当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户</td></tr><tr><td><code>no_root_squash</code></td><td>当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员</td></tr><tr><td><code>all_squash</code></td><td>无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户</td></tr><tr><td><code>sync</code></td><td>同时将数据写入到内存与硬盘中，保证不丢失数据</td></tr><tr><td><code>async</code></td><td>优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/exports</span>/nfsfile 192.168.10.*<span class="token punctuation">(</span>rw,sync,root_squash<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在NFS服务的配置文件中巧用通配符能够实现很多便捷功能，就比如匹配IP地址就有三种方法：</p><ul><li>第一种是直接写<em>号，代表任何主机都可以访问；</em></li><li>*第二种则是实验中采用的192.168.10.*通配格式，代表来自192.168.10.0/24网段的主机；</li><li>第三种则是直接写对方的IP地址，如192.168.10.20，代表仅允许某个主机进行访问。</li></ul><blockquote><p> <strong>第4步</strong>：启动和启用<code>NFS</code>服务程序。由于在使用<code>NFS</code>服务进行文件共享之前，需要使用<code>RPC</code></p><p>（<code>Remote Procedure Call</code>，远程过程调用）服务将<code>NFS</code>服务器的<code>IP</code>地址和端口号等信息发送给客户</p><p>端。因此，在启动<code>NFS</code>服务之前，还需要顺带重启并启用<code>rpcbind</code>服务程序，并将这两个服务一并加入</p><p>开机启动项中。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart rpcbind</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable rpcbind</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start nfs-server</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable nfs-server</span>Created symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /usr/lib/systemd/system/nfs-server.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NFS</code>客户端的配置步骤也十分简单。先使用<code>showmount</code>命令查<strong>询NFS服务器的远程共享信息</strong>，必要的参数见</p><p>表，其输出格式为“共享的目录名称 允许使用客户端地址”。</p><blockquote><p> <code>showmount</code>命令中可用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-e</code></td><td>显示NFS服务器的共享列表</td></tr><tr><td><code>-a</code></td><td>显示本机挂载的文件资源的情况NFS资源的情况</td></tr><tr><td><code>-v</code></td><td>显示版本号</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># showmount -e 192.168.10.10</span>Export list <span class="token keyword">for</span> 192.168.10.10:/nfsfile 192.168.10.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在<code>NFS</code>客户端创建一个挂载目录。使用<code>mount</code>命令并结合-t参数，指定要挂载的文件系统的类型，并在命</p><p>令后面写上服务器的<code>IP</code>地址、服务器上的共享目录以及要挂载到本地系统（即客户端）的目录。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /nfsfile</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -t nfs 192.168.10.10:/nfsfile /nfsfile</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sr0                6.7G  6.7G     0 100% /media/cdrom/dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0192.168.10.10:/nfsfile   17G  3.9G   14G  23% /nfsfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挂载成功后就应该能够顺利地看到在执行前面的操作时写入的文件内容了。如果希望<code>NFS</code>文件共享服务能一</p><p>直有效，则需要将其写入到<code>fstab</code>文件中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /nfsfile/readme</span>welcome to linuxprobe.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Thu Feb 25 10:42:11 2021</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                     /                       xfs     defaults        0 0UUID<span class="token operator">=</span>37d0bdc6-d70d-4cc0-b356-51195ad90369 /boot                   xfs     defaults        0 0/dev/mapper/rhel-swap                     swap                    swap    defaults        0 0/dev/cdrom                                /media/cdrom            iso9660 defaults        0 0 192.168.10.10:/nfsfile                    /nfsfile                nfs     defaults        0 0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3、AutoFs自动挂载服务"><a href="#13-3、AutoFs自动挂载服务" class="headerlink" title="13.3、AutoFs自动挂载服务"></a>13.3、<code>AutoFs</code>自动挂载服务</h3><p><code>autofs</code>服务程序是一种<code>Linux</code>系统守护进程，当检测到用户试图访问一个尚未挂载的文件系统时，将自动挂</p><p>载该文件系统。</p><blockquote><p>安装<code>autofs</code>服务程序</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install autofs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>autofs</code>服务程序的主配置文件中需要按照“挂载目录 子配置文件”的格式进行填写。挂载目录是设备挂载位</p><p>置的上一级目录。例如，光盘设备一般挂载到<code>/media/cdrom</code>目录中，那么挂载目录写成<code>/media</code>即可。对应</p><p>的子配置文件则是对这个挂载目录内的挂载设备信息作进一步的说明。子配置文件需要用户自行定义，文件名</p><p>字没有严格要求，但后缀建议以<code>.misc</code>结束。</p><pre><code>[root@linuxprobe ~]# vim /etc/auto.master## Sample auto.master file# This is a 'master' automounter map and it has the following format:# mount-point [map-type[,format]:]map [options]# For details of the format look at auto.master(5).#/media  /etc/iso.misc    ##加粗/misc   /etc/auto.misc## NOTE: mounts done from a hosts map will be mounted with the#       "nosuid" and "nodev" options unless the "suid" and "dev"#       options are explicitly given.#/net    -hosts## Include /etc/auto.master.d/*.autofs# The included files must conform to the format of this file.#+dir:/etc/auto.master.d## If you have fedfs set up and the related binaries, either# built as part of autofs or installed from another package,# uncomment this line to use the fedfs program map to access# your fedfs mounts.#/nfs4  /usr/sbin/fedfs-map-nfs4 nobind## Include central master map if it can be found using# nsswitch sources.## Note that if there are entries for /net or /misc (as# above) in the included master map any keys that are the# same will not be seen as the first read key seen takes# precedence.#+auto.master</code></pre><p>在子配置文件中，应按照“挂载目录 挂载文件类型及权限 :设备名称”的格式进行填写。例如，要把光盘设备挂</p><p>载到<code>/media/iso</code>目录中，可将挂载目录写为<code>iso</code>，而<code>-fstype</code>为文件系统格式参数，<code>iso9660</code>为光盘设备</p><p>格式，<code>ro</code>、<code>nosuid</code>及<code>nodev</code>为光盘设备具体的权限参数，<code>/dev/cdrom</code>则是定义要挂载的设备名称。配置完</p><p>成后再顺手将<code>autofs</code>服务程序启动并加入到系统启动项中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/iso.misc</span>iso   -fstype<span class="token operator">=</span>iso9660,ro,nosuid,nodev :/dev/cdrom<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start autofs </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable autofs </span>Created symlink /etc/systemd/system/multi-user.target.wants/autofs.service → /usr/lib/systemd/system/autofs.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先查看当前的光盘设备挂载情况，确认光盘设备没有被挂载上，而且<code>/media</code>目录中根本就没有<code>iso</code>子目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /dev/cdrom</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0192.168.10.10:/nfsfile   17G  3.9G   14G  23% /nfsfile<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /media</span><span class="token punctuation">[</span>root@linuxprobe media<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@linuxprobe media<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们却可以使用<code>cd</code>命令切换到这个<code>iso</code>子目录中，而且光盘设备会被立即自动挂载上，然后也就能顺利查看</p><p>光盘内的内容了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe media<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd iso</span><span class="token punctuation">[</span>root@linuxprobe iso<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>AppStream  EULA              images      RPM-GPG-KEY-redhat-betaBaseOS     extra_files.json  isolinux    RPM-GPG-KEY-redhat-releaseEFI        GPL               media.repo  TRANS.TBL<span class="token punctuation">[</span>root@linuxprobe iso<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0192.168.10.10:/nfsfile   17G  3.9G   14G  23% /nfsfile/dev/sr0                6.7G  6.7G     0 100% /media/iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、使用Bind提供域名解析服务"><a href="#十四、使用Bind提供域名解析服务" class="headerlink" title="十四、使用Bind提供域名解析服务"></a>十四、使用Bind提供域名解析服务</h2><hr><h3 id="14-1、DNS域名解析服务"><a href="#14-1、DNS域名解析服务" class="headerlink" title="14.1、DNS域名解析服务"></a>14.1、<code>DNS</code>域名解析服务</h3><p>这是一项用于管理和解析域名与IP地址对应关系的技术。简单来说，就是能够接受用户输入的域名或<code>IP</code>地</p><p>址，然后自动查找与之匹配（或者说具有映射关系）的<code>IP</code>地址或域名，即将域名解析为<code>IP</code>地址（正向解</p><p>析），或将<code>IP</code>地址解析为域名（反向解析）。</p><p>鉴于互联网中的域名和<code>IP</code>地址对应关系数据库太过庞大，<code>DNS</code>域名解析服务采用了类似目录树的层次结构来</p><p>记录域名与<code>IP</code>地址之间的对应关系，从而形成了一个分布式的数据库系统，如图14-1所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823084457513.png" alt="图14-1 DNS域名解析服务采用的目录树层次结构"></p><p>域名后缀一般分为国际域名和国内域名。原则上来讲，域名后缀都有严格的定义，但在实际使用时可以不必严</p><p>格遵守。目前最常见的域名后缀有<code>.com</code>（商业组织）、<code>.org</code>（非营利组织）、<code>.gov（</code>政府部门）、</p><p><code>.net</code>（网络服务商）、<code>.edu</code>（教育机构）、<code>.pub</code>（公共大众）、<code>.cn</code>（中国国家顶级域名）等</p><blockquote><p><code>DNS</code>技术作为互联网基础设施中重要的一环，为了为网民提供不间断、稳定且快速的域名查询服务，保</p><p>证互联网的正常运转，提供了下面3种类型的服务器：</p><ul><li><strong>主服务器</strong>：在特定区域内具有唯一性，负责维护该区域内的域名与<code>IP</code>地址之间的对应关系。</li><li><strong>从服务器</strong>：从主服务器中获得域名与<code>IP</code>地址的对应关系并进行维护，以防主服务器宕机等情况。</li><li><strong>缓存服务器</strong>：通过向其他域名解析服务器查询获得域名与<code>IP</code>地址的对应关系，并将经常查询的域名信息保存到服务器本地，以此来提高重复查询时的效率</li></ul></blockquote><p>简单来说，<strong>主服务器是用于管理域名和IP地址对应关系的真正服务器，从服务器帮助主服务器“打下手”，分散</strong></p><p><strong>部署在各个国家、省市或地区，以便让用户就近查询域名，从而减轻主服务器的负载压力</strong>。缓存服务器</p><p>不太常用，一般部署在企业内网的网关位置，用于加速用户的域名查询请求。</p><p><code>DNS</code>域名解析服务采用分布式的数据结构来存放海量的“区域数据”信息，在执行用户发起的域名查询请求时，</p><p>具有<strong>递归查询</strong>和<strong>迭代查询</strong>两种方式。所谓<strong>递归查询</strong>，是指<code>DNS</code>服务器在收到用户发起的请求时，必须向用户</p><p>返回一个准确的查询结果。如果<code>DNS</code>服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务</p><p>器，并将返回的查询结果提交给用户。而<strong>迭代查询</strong>则是指，<code>DNS</code>服务器在收到用户发起的请求时，并不直接</p><p>回复查询结果，而是告诉另一台<code>DNS</code>服务器的地址，用户再向这台<code>DNS</code>服务器提交请求，这样依次反复，直</p><p>到返回查询结果。</p><p>由此可见，当用户向就近的一台<code>DNS</code>服务器发起对某个域名的查询请求之后（这里以<a href="https://www.linuxprobe.com/">www.linuxprobe.com</a>为</p><p>例），其查询流程大致如图14-2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823085012984.png" alt="图14-2 向DNS服务器发起域名查询请求的流程"></p><p>当用户向网络指定的<code>DNS</code>服务器发起一个域名请求时，通常情况下会有本地<code>DNS</code>服务器向上级的<code>DNS</code>服务器</p><p>发送迭代查询请求；如果该<code>DNS</code>服务器没有要查询的信息，则会进一步向上级<code>DNS</code>服务器发送迭代查询请</p><p>求，直到获得准确的查询结果为止。其中<strong>最高级、最权威的根DNS服务器总共有13台</strong>，分布在世界各地，其</p><p>管理单位、具体的地理位置，以及IP地址如表所示。</p><table><thead><tr><th>名称</th><th>管理单位</th><th>地理位置</th><th>IP地址</th></tr></thead><tbody><tr><td>A</td><td>INTERNIC.NET</td><td>美国-弗吉尼亚州</td><td>198.41.0.4</td></tr><tr><td>B</td><td>美国信息科学研究所</td><td>美国-加利弗尼亚州</td><td>128.9.0.107</td></tr><tr><td>C</td><td>PSINet公司</td><td>美国-弗吉尼亚州</td><td>192.33.4.12</td></tr><tr><td>D</td><td>马里兰大学</td><td>美国-马里兰州</td><td>128.8.10.90</td></tr><tr><td>E</td><td>美国航空航天管理局</td><td>美国加利弗尼亚州</td><td>192.203.230.10</td></tr><tr><td>F</td><td>因特网软件联盟</td><td>美国加利弗尼亚州</td><td>192.5.5.241</td></tr><tr><td>G</td><td>美国国防部网络信息中心</td><td>美国弗吉尼亚州</td><td>192.112.36.4</td></tr><tr><td>H</td><td>美国陆军研究所</td><td>美国-马里兰州</td><td>128.63.2.53</td></tr><tr><td>I</td><td>Autonomica公司</td><td>瑞典-斯德哥尔摩</td><td>192.36.148.17</td></tr><tr><td>J</td><td>VeriSign公司</td><td>美国-弗吉尼亚州</td><td>192.58.128.30</td></tr><tr><td>K</td><td>RIPE NCC</td><td>英国-伦敦</td><td>193.0.14.129</td></tr><tr><td>L</td><td>IANA</td><td>美国-弗吉尼亚州</td><td>199.7.83.42</td></tr><tr><td>M</td><td>WIDE Project</td><td>日本-东京</td><td>202.12.27.33</td></tr></tbody></table><h3 id="14-2、安装Bind服务程序"><a href="#14-2、安装Bind服务程序" class="headerlink" title="14.2、安装Bind服务程序"></a>14.2、安装<code>Bind</code>服务程序</h3><p><code>BIND</code>（<code>Berkeley Internet Name Domain</code>，伯克利因特网名称域）服务是全球范围内使用最广泛、最安全</p><p>可靠且高效的域名解析服务程序。<code>DNS</code>域名解析服务作为互联网基础设施服务，其责任之重可想而知，因此</p><p>建议大家在生产环境中安装部署<code>bind</code>服务程序时加上<code>chroot</code>（俗称牢笼机制）扩展包，以便有效地限制</p><p><code>bind</code>服务程序仅能对自身的配置文件进行操作，以确保整个服务器的安全。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install bind-chroot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>bind</code>服务程序的配置并不简单，因为要想为用户提供健全的<code>DNS</code>查询服务，要在本地保存相关的域名数</p><p>据库，而如果把所有域名和<code>IP</code>地址的对应关系都写入到某个配置文件中，估计要有上千万条的参数，这</p><p>样既不利于程序的执行效率，也不方便日后的修改和维护。因此在<code>bind</code>服务程序中有下面这3个比较关</p><p>键的文件：</p><ul><li><strong>主配置文件（<code>/etc/named.conf</code>）</strong>：只有59行，而且在去除注释信息和空行之后，实际有效的参数仅有30行左右，这些参数用来定义<code>bind</code>服务程序的运行。</li><li><strong>区域配置文件（<code>etc/named.rfc1912.zones</code>）</strong>：<strong>用来保存域名和IP地址对应关系的所在位置</strong>。类似于图书的目录，对应着每个域和相应<code>IP</code>地址所在的具体位置，当需要查看或修改时，可根据这个位置找到相关文件。</li><li><strong>数据配置文件目录（<code>/var/named</code>）</strong>：该目录用来保存域名和<code>IP</code>地址真实对应关系的数据配置文件。</li></ul></blockquote><p>在<code>Linux</code>系统中，bind服务程序的名称为<code>named</code>。首先需要在<code>/etc</code>目录中找到该服务程序的主配置文件，然</p><p>后把第11行和第19行的地址均修改为<code>any</code>，分别表示服务器上的所有<code>IP</code>地址均可提供<code>DNS</code>域名解析服务，以</p><p>及允许所有人对本服务器发送<code>DNS</code>查询请求。这两个地方一定要修改准确。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9  10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 20  21         /*  22          - If you are building an AUTHORITATIVE DNS server, <span class="token keyword">do</span> NOT <span class="token function">enable</span> recursion. 23          - If you are building a RECURSIVE <span class="token punctuation">(</span>caching<span class="token punctuation">)</span> DNS server, you need to <span class="token function">enable</span>  24            recursion.  25          - If your recursive DNS server has a public IP address, you MUST <span class="token function">enable</span> access  26            control to limit queries to your legitimate users. Failing to <span class="token keyword">do</span> so will 27            cause your server to become part of large scale DNS amplification  28            attacks. Implementing BCP38 within your network would greatly 29            reduce such attack surface  30         */ 31         recursion <span class="token function">yes</span><span class="token punctuation">;</span> 32  33         dnssec-enable <span class="token function">yes</span><span class="token punctuation">;</span> 34         dnssec-validation <span class="token function">yes</span><span class="token punctuation">;</span> 35  36         managed-keys-directory <span class="token string">"/var/named/dynamic"</span><span class="token punctuation">;</span> 37  38         pid-file <span class="token string">"/run/named/named.pid"</span><span class="token punctuation">;</span> 39         session-keyfile <span class="token string">"/run/named/session.key"</span><span class="token punctuation">;</span> 40  41         /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */ 42         include <span class="token string">"/etc/crypto-policies/back-ends/bind.config"</span><span class="token punctuation">;</span> 43 <span class="token punctuation">}</span><span class="token punctuation">;</span> 44  45 logging <span class="token punctuation">{</span> 46         channel default_debug <span class="token punctuation">{</span> 47                 <span class="token function">file</span> <span class="token string">"data/named.run"</span><span class="token punctuation">;</span> 48                 severity dynamic<span class="token punctuation">;</span> 49         <span class="token punctuation">}</span><span class="token punctuation">;</span> 50 <span class="token punctuation">}</span><span class="token punctuation">;</span> 51  52 zone <span class="token string">"."</span> IN <span class="token punctuation">{</span> 53         <span class="token function">type</span> hint<span class="token punctuation">;</span> 54         <span class="token function">file</span> <span class="token string">"named.ca"</span><span class="token punctuation">;</span> 55 <span class="token punctuation">}</span><span class="token punctuation">;</span> 56  57 include <span class="token string">"/etc/named.rfc1912.zones"</span><span class="token punctuation">;</span> 58 include <span class="token string">"/etc/named.root.key"</span><span class="token punctuation">;</span> 59 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如前所述，<code>bind</code>服务程序的区域配置文件（<code>/etc/named.rfc1912.zones</code>）用来保存域名和<code>IP</code>地址对应关</p><p>系的所在位置。在这个文件中，定义了域名与<code>IP</code>地址解析规则保存的文件位置以及服务类型等内容，而没有</p><p>包含具体的域名、<code>IP</code>地址对应关系等信息。<strong>服务类型</strong>有3种，分别为<code>hint</code>（根区域）、<code>master</code>（主区</p><p>域）、<code>slave</code>（辅助区域），其中常用的<code>master</code>和<code>slave</code>指的就是主服务器和从服务器。将域名解析为<code>IP</code></p><p>地址的正向解析参数和将IP地址解析为域名的反向解析参数分别如图14-3和图14-4所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823090209284.png" alt="图14-3 正向解析参数"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823090226880.png" alt="图14-4 反向解析参数"></p><blockquote><p> 下面的实验中会分别修改<code>bind</code>服务程序的主配置文件、区域配置文件与数据配置文件。如果在实验中遇</p><p>到了<code>bind</code>服务程序启动失败的情况，而您认为这是由于参数写错而导致的，</p><p>则可以执行<code>named-checkconf</code>命令和<code>named-checkzone</code>命令，分别检查主配置文件与数据配置文件中</p><p>语法或参数的错误。</p></blockquote><h4 id="14-2-1、正向解析实验"><a href="#14-2-1、正向解析实验" class="headerlink" title="14.2.1、正向解析实验"></a>14.2.1、正向解析实验</h4><p>在<code>DNS</code>域名解析服务中，正向解析是指根据域名（主机名）查找到对应的IP地址。也就是说，当用户输入了一</p><p>个域名后，<code>bind</code>服务程序会自动进行查找，并将匹配到的IP地址返给用户，如图14-5所示。这也是最常用的</p><p><code>DNS</code>工作模式</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823090506759.png" alt="图14-5 正向解析技术示意图"></p><blockquote><p><strong>第1步</strong>：编辑区域配置文件。该文件中默认已经有了一些无关紧要的解析参数，旨在让用户有一个参考。</p><p>可以将下面的参数添加到区域配置文件的最下面。当然，也可以将该文件中的原有信息全部清空，而只</p><p>保留自己的域名解析信息。</p><p><strong>配置文件中的代码缩进仅是为了提升阅读体验，有无缩进对参数效果均没有任何影响。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.rfc1912.zones</span>zone <span class="token string">"linuxprobe.com"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.zone"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：编辑数据配置文件。可以从<code>/var/named</code>目录中复制一份正向解析的模板文件</p><p>（<code>named.localhost</code>），然后把域名和<code>IP</code>地址的对应数据填写数据配置文件中并保存。</p><p>在复制时记得加上<code>-a</code>参数，这可以保留原始文件的所有者、所属组、权限属性等信息，</p><p>以便让<code>bind</code>服务程序顺利读取文件内容。</p><p><strong>在保存并退出后文件后记得重启named服务程序，让新的解析数据生效。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named/</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -al named.localhost</span>-rw-r-----. 1 root named 152 Jun 21 2007 named.localhost<span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a named.localhost linuxprobe.com.zone</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>$TTL 1D</th><th>#生存周期为1天</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>@</td><td>IN SOA</td><td>linuxprobe.com.</td><td>root.linuxprobe.com.</td><td>(</td><td></td></tr><tr><td></td><td>#授权信息开始:</td><td>#DNS区域的地址</td><td>#域名管理员的邮箱(不要用@符号)</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>0;serial</td><td>#更新序列号</td></tr><tr><td></td><td></td><td></td><td></td><td>1D;refresh</td><td>#更新时间</td></tr><tr><td></td><td></td><td></td><td></td><td>1H;retry</td><td>#重试延时</td></tr><tr><td></td><td></td><td></td><td></td><td>1W;expire</td><td>#失效时间</td></tr><tr><td></td><td></td><td></td><td></td><td>3H );minimum</td><td>#无效解析记录的缓存时间</td></tr><tr><td></td><td>NS</td><td>ns.linuxprobe.com.</td><td></td><td>#域名服务器记录</td><td></td></tr><tr><td>ns</td><td>IN A</td><td>192.168.10.10</td><td></td><td>#地址记录(ns.linuxprobe.com.)</td><td></td></tr><tr><td>www</td><td>IN A</td><td>192.168.10.10</td><td></td><td>#地址记录(<a href="http://www.linuxprobe.com/">www.linuxprobe.com</a>.)</td><td></td></tr></tbody></table><blockquote><p> 在解析文件中，A记录类型表示将域名指向一个<code>IPv4</code>地址，而<code>AAAA</code>表示将域名指向一个<code>IPv6</code>地址。此外，还有8种记录类型</p></blockquote><table><thead><tr><th>记录类型</th><th>作用</th></tr></thead><tbody><tr><td>A</td><td>将域名指向一个IPV4地址</td></tr><tr><td>CNAME</td><td>将域名指向另外一个域名</td></tr><tr><td>AAAA</td><td>将域名指向一个IPV6地址</td></tr><tr><td>NS</td><td>将子域名指定其他DNS服务器解析</td></tr><tr><td>MX</td><td>将域名指向邮件服务器地址</td></tr><tr><td>SRV</td><td>记录提供特定的服务的服务器</td></tr><tr><td>TXT</td><td>文本内容一般为512字节，常作为反垃圾邮件的SPF记录</td></tr><tr><td>CAA</td><td>CA证书办法机构授权校验</td></tr><tr><td>显性URL</td><td>将域名重定向到另外一个地址</td></tr><tr><td>隐性URL</td><td>与显性URL类型，但是会隐藏真实目标地址</td></tr></tbody></table><blockquote><p><strong>第3步</strong>：检验解析结果。为了检验解析结果，一定要先把<code>Linux</code>系统网卡中的<code>DNS</code>地址参数修改成本机</p><p><code>IP</code>地址（见图14-6），这样就可以使用由本机提供的<code>DNS</code>查询服务了。<code>nslookup</code>用于检测能否从</p><p><code>DNS</code>服务器中查询到域名与<code>IP</code>地址的解析记录，进而更准确地检验<code>DNS</code>服务器是否已经能够为用户提供</p><p>服务。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823091747030.png" alt="图14-6 配置网卡DNS参数信息"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up ens160 </span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup</span>Name:www.linuxprobe.comAddress: 192.168.10.10<span class="token operator">></span> ns.linuxprobe.comServer:192.168.10.10Address:192.168.10.10<span class="token comment" spellcheck="true">#53</span>Name:ns.linuxprobe.comAddress: 192.168.10.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若解析出的结果不是192.168.10.10，则很有可能是虚拟机选择了联网模式，并由互联网<code>DNS</code>服务器进行了解</p><p>析。此时应确认服务器信息是否为“Address: 192.168.10.10#53”，即由本地服务器192.168.10.10的53端口号</p><p>进行解析；若不是，则重启网络后再试一下。</p><h4 id="14-2-2、反向解析实验"><a href="#14-2-2、反向解析实验" class="headerlink" title="14.2.2、反向解析实验"></a>14.2.2、反向解析实验</h4><p>在<code>DNS</code>域名解析服务中，反向解析的作用是将用户提交的<code>IP</code>地址解析为对应的域名信息，它一般用于对某个</p><p><code>IP</code>地址上绑定的所有域名进行整体屏蔽，屏蔽由某些域名发送的垃圾邮件。它也可以针对某个<code>IP</code>地址进行反</p><p>向解析，大致判断出有多少个网站运行在上面。当购买虚拟主机时，可以使用这一功能验证虚拟主机提供商是</p><p>否有严重的超售问题。图14-7所示为对IP地址所关联的域名信息进行反推。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823093849817.png" alt="图14-7 反向解析技术示意图"></p><blockquote><p><strong>第1步</strong>：编辑区域配置文件。在编辑该文件时，除了不要写错格式之外，还需要记住此处定义的数据配置</p><p>文件名称，因为一会儿还需要在<code>/var/named</code>目录中建立与其对应的同名文件。反向解析是把<code>IP</code>地址解</p><p>析成域名格式，因此在定义<code>zone</code>（区域）时应该要把<code>IP</code>地址反写，比如原来是192.168.10.0，反写后</p><p>应该就是10.168.192，而且只需写出IP地址的网络位即可。把下列参数添加至正向解析参数的后面。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.rfc1912.zones</span>zone <span class="token string">"linuxprobe.com"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.zone"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>zone <span class="token string">"10.168.192.in-addr.arpa"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"192.168.10.arpa"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：编辑数据配置文件。首先从<code>/var/named</code>目录中复制一份反向解析的模板文件</p><p>（<code>named.loopback</code>），然后把下面的参数填写到文件中。其中，<code>IP</code>地址仅需要写主机位，</p><p>如图14-8所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823094119999.png" alt="图14-8 反向解析文件中IP地址参数规范"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a named.loopback 192.168.10.arpa</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim 192.168.10.arpa</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>$TTL 1D</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>@</td><td>IN SOA</td><td>linuxprobe.com.</td><td>root.linuxprobe.com.</td><td>(</td></tr><tr><td></td><td></td><td></td><td></td><td>0;serial</td></tr><tr><td></td><td></td><td></td><td></td><td>1D;refresh</td></tr><tr><td></td><td></td><td></td><td></td><td>1H;retry</td></tr><tr><td></td><td></td><td></td><td></td><td>1W;expire</td></tr><tr><td></td><td></td><td></td><td></td><td>3H);minimum</td></tr><tr><td></td><td>NS</td><td>ns.linuxprobe.com.</td><td></td><td></td></tr><tr><td>ns</td><td>A</td><td>192.168.10.10</td><td></td><td></td></tr><tr><td>10</td><td>PTR</td><td>ns.linuxprobe.com.</td><td>#PTR为指针记录，仅用于反向解析中。</td><td></td></tr><tr><td>10</td><td>PTR</td><td><a href="http://www.linuxprobe.com/">www.linuxprobe.com</a>.</td><td></td><td></td></tr><tr><td>20</td><td>PTR</td><td>bbs.linuxprobe.com.</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>第3步</strong>：检验解析结果。在前面的正向解析实验中，已经把系统网卡中的<code>DNS</code>地址参数修改成了本</p><p>机<code>IP</code>地址，因此可以直接使用`nslookup解析析结果，仅需输入IP地址即可查询到对应的域名信息。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup</span><span class="token operator">></span> 192.168.10.1010.10.168.192.in-addr.arpaname <span class="token operator">=</span> www.linuxprobe.com.<span class="token operator">></span> 192.168.10.2020.10.168.192.in-addr.arpaname <span class="token operator">=</span> bbs.linuxprobe.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3、部署从服务器"><a href="#14-3、部署从服务器" class="headerlink" title="14.3、部署从服务器"></a>14.3、部署从服务器</h3><p>作为重要的互联网基础设施服务，保证<code>DNS</code>域名解析服务的正常运转至关重要，只有这样才能提供稳定、快</p><p>速且不间断的域名查询服务。在<code>DNS</code>域名解析服务中，从服务器可以从主服务器上获取指定的区域数据文</p><p>件，从而起到备份解析记录与负载均衡的作用。因此，通过部署从服务器不仅可以减轻主服务器的负载压力，</p><p>还可以提升用户的查询效率。</p><blockquote><p>主服务器与从服务器分别使用的操作系统与IP地址信息</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>主服务器</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>从服务器</td><td>RHEL 8</td><td>192.168.10.20</td></tr></tbody></table><blockquote><p><strong>第1步</strong>：在主服务器的区域配置文件中允许该从服务器的更新请求，即修改<code>allow-update</code> {允许更新区</p><p>域信息的主机地址;};参数，然后重启主服务器的<code>DNS</code>服务程序。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.rfc1912.zones</span>zone <span class="token string">"linuxprobe.com"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.zone"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span> 192.168.10.20<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>zone <span class="token string">"10.168.192.in-addr.arpa"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"192.168.10.arpa"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span> 192.168.10.20<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：在主服务器上配置防火墙放行规则，让<code>DNS</code>协议流量可以被顺利传递。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=dns</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：在从服务器上安装<code>bind-chroot</code>软件包（输出信息省略）。修改配置文件，让从服务器也能够</p><p>对外提供DNS服务，并且测试其与主服务器的网络连通性。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install bind-chroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9  10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 192.168.10.10 </span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>2.44 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>3.31 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.503 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.359 ms--- 192.168.10.10 <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 15msrtt min/avg/max/mdev <span class="token operator">=</span> 0.359/1.654/3.311/1.262 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：在从服务器中填写主服务器的IP地址与要抓取的区域信息，然后重启服务。注意此时的服务类型</p><p>应该是<code>slave</code>（从），而不再是<code>master</code>（主）。<code>masters</code>参数后面应该为主服务器的<code>IP</code>地址，而且</p><p><code>file</code>参数后面定义的是同步数据配置文件后要保存到的位置，稍后可以在该目录内看到同步的文件。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.rfc1912.zones</span>zone <span class="token string">"linuxprobe.com"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> slave<span class="token punctuation">;</span>        masters <span class="token punctuation">{</span> 192.168.10.10<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"slaves/linuxprobe.com.zone"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>zone <span class="token string">"10.168.192.in-addr.arpa"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> slave<span class="token punctuation">;</span>        masters <span class="token punctuation">{</span> 192.168.10.10<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"slaves/192.168.10.arpa"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第5步</strong>：检验解析结果。当从服务器的DNS服务程序在重启后，一般就已经自动从主服务器上同步了数据</p><p>配置文件，而且该文件默认会放置在区域配置文件中所定义的目录位置中。随后修改从服务器的网络参</p><p>数，把DNS地址参数修改成<code>192.168.10.20</code>，这样即可使用从服务器自身提供的DNS域名解析服务。最</p><p>后就可以使用<code>nslookup</code>命令顺利看到解析结果了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named/slaves</span><span class="token punctuation">[</span>root@linuxprobe slaves<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>192.168.10.arpa linuxprobe.com.zone<span class="token punctuation">[</span>root@linuxprobe slaves<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup</span><span class="token operator">></span> www.linuxprobe.comServer:192.168.10.20Address:192.168.10.20<span class="token comment" spellcheck="true">#53</span>Name:www.linuxprobe.comAddress: 192.168.10.10<span class="token operator">></span> 192.168.10.1010.10.168.192.in-addr.arpaname <span class="token operator">=</span> www.linuxprobe.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4、安全的加密传输"><a href="#14-4、安全的加密传输" class="headerlink" title="14.4、安全的加密传输"></a>14.4、安全的加密传输</h3><p>互联网中的绝大多数<code>DNS</code>服务器（超过95%）都是基于<code>BIND</code>域名解析服务搭建的，而bind服务程序为了提供</p><p>安全的解析服务，已经对<code>TSIG</code>（见<code>RFC 2845</code>）加密机制提供了支持。<code>TSIG</code>主要是利用了密码编码的方式来</p><p>保护区域信息的传输（<code>Zone Transfer</code>），即<code>TSIG</code>加密机制保证了<code>DNS</code>服务器之间传输域名区域信息的安全</p><p>性。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -al /var/named/slaves/</span>total 8drwxrwx---. 2 named named  56 Mar 12 09:53 <span class="token keyword">.</span>drwxrwx--T. 6 root  named 141 Mar 12 09:57 <span class="token punctuation">..</span>-rw-r--r--. 1 named named 436 Mar 12 09:53 192.168.10.arpa-rw-r--r--. 1 named named 282 Mar 12 09:53 linuxprobe.com.zone<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf /var/named/slaves/*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第1步</strong>：<strong>在主服务器中生成密钥</strong>。<code>dnssec-keygen</code>命令用于生成安全的DNS服务密钥，其格式</p><p>为“<code>dnssec-keygen</code> [参数]”，常用的参数以及作用如表所示。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>指定加密算法，包括RSAMD5（RSA）、RSASHA1、DSA、NSEC3RSASHA1、NSEC3DSA等</td></tr><tr><td>-b</td><td>密钥长度（HMAC-MD5的密钥长度在1~512位之间）</td></tr><tr><td>-n</td><td>密钥的类型（HOST表示与主机相关）</td></tr></tbody></table><p>使用下述命令生成一个主机名称为<code>master-slave</code>的128位<code>HMAC-MD5</code>算法的密钥文件。在执行该命令后默认</p><p>会在当前目录中生成<strong>公钥</strong>和<strong>私钥</strong>文件，我们需要把私钥文件中Key参数后面的值记录下来，一会儿要将其写入</p><p>传输配置文件中。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnssec-keygen -a HMAC-MD5 -b 128 -n HOST master-slave</span>Kmaster-slave.+157+62533<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l Kmaster-slave.+157+62533.*</span>-rw-------. 1 root root  56 Mar 14 09:54 Kmaster-slave.+157+62533.key-rw-------. 1 root root 165 Mar 14 09:54 Kmaster-slave.+157+62533.private<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat Kmaster-slave.+157+62533.private </span>Private-key-format: v1.3Algorithm: 157 <span class="token punctuation">(</span>HMAC_MD5<span class="token punctuation">)</span>Key: NI6icnb74FxHx2gK+0MVOg<span class="token operator">==</span>Bits: AAA<span class="token operator">=</span>Created: 20210314015436Publish: 20210314015436Activate: 20210314015436<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第2步</strong>：<strong>在主服务器中创建密钥验证文件</strong>。进入<code>bind</code>服务程序用于保存配置文件的目录，把刚刚生成的</p><p>密钥名称、加密算法和私钥加密字符串按照下面的格式写入<code>tansfer.key</code>传输配置文件中。为了安全起</p><p>见，需要将文件的所属组修改成<code>named</code>，并将文件权限设置得要小一点，然后设置该文件的一个硬链</p><p>接，并指向<code>/etc</code>目录。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named/chroot/etc/</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim transfer.key</span>key <span class="token string">"master-slave"</span> <span class="token punctuation">{</span>        algorithm hmac-md5<span class="token punctuation">;</span>        secret <span class="token string">"NI6icnb74FxHx2gK+0MVOg=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown root:named transfer.key</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 640 transfer.key</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln transfer.key /etc/transfer.key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：开<strong>启并加载<code>bind</code>服务的密钥验证功能</strong>。首先需要在主服务器的主配置文件中加载密钥验证文</p><p>件，然后进行设置，使得只允许带有<code>master-slave</code>密钥认证的DNS服务器同步数据配置文件。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9 include <span class="token string">"/etc/transfer.key"</span><span class="token punctuation">;</span> 10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 20         allow-transfer <span class="token punctuation">{</span> key master-slave<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，<code>DNS</code>主服务器的TSIG密钥加密传输功能就已经配置完成。然后清空<code>DNS</code>从服务器同步目录中所有的数</p><p>据配置文件，再次重启<code>bind</code>服务程序。这时就已经不能像刚才那样自动获取到数据配置文件了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf /var/named/slaves/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls  /var/named/slaves/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：<strong>配置从服务器，使其支持密钥验证</strong>。配置<code>DNS</code>从服务器和主服务器的方法大致相同，都需要在</p><p><code>bind</code>服务程序的配置文件目录中创建密钥认证文件，并设置相应的权限，然后设置该文件的一个硬链</p><p>接，并指向<code>/etc</code>目录。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named/chroot/etc/</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim transfer.key</span>key <span class="token string">"master-slave"</span> <span class="token punctuation">{</span>        algorithm hmac-md5<span class="token punctuation">;</span>        secret <span class="token string">"NI6icnb74FxHx2gK+0MVOg=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown root:named transfer.key</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 640 transfer.key</span><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln transfer.key /etc/transfer.key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第5步</strong>：开启并加载从服务器的密钥验证功能。这一步的操作步骤也同样是在主配置文件中加载密钥认证</p><p>文件，然后按照指定的格式写上主服务器的IP地址和密钥名称。<strong>注意，密钥名称等参数位置不要太靠</strong></p><p><strong>前，大约在第51行比较合适，否则bind服务程序会因为没有加载完预设参数而报错</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9 include <span class="token string">"/etc/transfer.key"</span><span class="token punctuation">;</span> 10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 20  21         /*  22          - If you are building an AUTHORITATIVE DNS server, <span class="token keyword">do</span> NOT <span class="token function">enable</span> recursion. 23          - If you are building a RECURSIVE <span class="token punctuation">(</span>caching<span class="token punctuation">)</span> DNS server, you need to <span class="token function">enable</span>  24            recursion.  25          - If your recursive DNS server has a public IP address, you MUST <span class="token function">enable</span> access  26            control to limit queries to your legitimate users. Failing to <span class="token keyword">do</span> so will 27            cause your server to become part of large scale DNS amplification  28            attacks. Implementing BCP38 within your network would greatly 29            reduce such attack surface  30         */ 31         recursion <span class="token function">yes</span><span class="token punctuation">;</span> 32  33         dnssec-enable <span class="token function">yes</span><span class="token punctuation">;</span> 34         dnssec-validation <span class="token function">yes</span><span class="token punctuation">;</span> 35  36         managed-keys-directory <span class="token string">"/var/named/dynamic"</span><span class="token punctuation">;</span> 37  38         pid-file <span class="token string">"/run/named/named.pid"</span><span class="token punctuation">;</span> 39         session-keyfile <span class="token string">"/run/named/session.key"</span><span class="token punctuation">;</span> 40  41         /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */ 42         include <span class="token string">"/etc/crypto-policies/back-ends/bind.config"</span><span class="token punctuation">;</span> 43 <span class="token punctuation">}</span><span class="token punctuation">;</span> 44  45 logging <span class="token punctuation">{</span> 46         channel default_debug <span class="token punctuation">{</span> 47                 <span class="token function">file</span> <span class="token string">"data/named.run"</span><span class="token punctuation">;</span> 48                 severity dynamic<span class="token punctuation">;</span> 49         <span class="token punctuation">}</span><span class="token punctuation">;</span> 50 <span class="token punctuation">}</span><span class="token punctuation">;</span> 51 server 192.168.10.10 52 <span class="token punctuation">{</span> 53         keys <span class="token punctuation">{</span> master-slave<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 54 <span class="token punctuation">}</span><span class="token punctuation">;</span> 55 zone <span class="token string">"."</span> IN <span class="token punctuation">{</span> 56         <span class="token function">type</span> hint<span class="token punctuation">;</span> 57         <span class="token function">file</span> <span class="token string">"named.ca"</span><span class="token punctuation">;</span> 58 <span class="token punctuation">}</span><span class="token punctuation">;</span> 59  60 include <span class="token string">"/etc/named.rfc1912.zones"</span><span class="token punctuation">;</span> 61 include <span class="token string">"/etc/named.root.key"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第6步</strong>：<code>DNS</code><strong>从服务器同步域名区域数据</strong>。现在，两台服务器的<code>bind</code>服务程序都已经配置妥当，并匹配</p><p>到了相同的密钥认证文件。接下来在从服务器上重启<code>bind</code>服务程序，可以发现又能顺利地同步到数据配</p><p>置文件了。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /var/named/slaves/</span>192.168.10.arpa  linuxprobe.com.zone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第7步</strong>：再次进行解析验证。功能正常。请大家注意观察，是由192.168.10.20从服务器进行解析的。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup www.linuxprobe.com</span>Server:192.168.10.20Address:192.168.10.20<span class="token comment" spellcheck="true">#53</span>Name:www.linuxprobe.comAddress: 192.168.10.10<span class="token punctuation">[</span>root@linuxprobe etc<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup 192.168.10.10</span>10.10.168.192.in-addr.arpaname <span class="token operator">=</span> www.linuxprobe.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-5、部署缓存服务器"><a href="#14-5、部署缓存服务器" class="headerlink" title="14.5、部署缓存服务器"></a>14.5、部署缓存服务器</h3><p><code>DNS</code>缓存服务器是<strong>一种不负责域名数据维护的<code>DNS</code>服务器</strong>。简单来说，缓存服务器就是把用户经常使用到的</p><p>域名与IP地址的解析记录保存在主机本地，从而提升下次解析的效率。<code>DNS</code>缓存服务器一般用于经常访问某些</p><p>固定站点而且对这些网站的访问速度有较高要求的企业内网中，但实际的应用并不广泛。而且，缓存服务器是</p><p>否可以成功解析还与指定的上级<code>DNS</code>服务器的允许策略有关，因此当前仅需了解即可。</p><blockquote><p> <strong>第1步</strong>：<strong>配置系统的双网卡参数</strong>。前面讲到，缓存服务器一般用于企业内网，旨在降低内网用户查询</p><p><code>DNS</code>的时间消耗。因此，为了更加贴近真实的网络环境，实现外网查询功能，我们需要在缓存服务器中</p><p>再添加一块网卡，并按照表所示的信息配置出两台<code>Linux</code>虚拟机系统。图14-9所示为缓存服务器实验环</p><p>境的结构拓扑，客户端不局限于一台。</p></blockquote><blockquote><p>用于配置<code>Linux</code>虚拟机系统所需的参数信息</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>缓存服务器</td><td>RHEL 8</td><td>网卡（外网）：根据物理设备的网络参数进行配置（通过DHCP或手动方式指定IP地址与网关等信息）</td></tr><tr><td>缓存服务器</td><td>RHEL 8</td><td>网卡（内网）：192.168.10.10</td></tr><tr><td>客户端</td><td>RHEL 8</td><td>192.168.10.20</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823103613155.png" alt="图14-9 缓存服务器实验环境拓扑"></p><blockquote><p><strong>第2步</strong>：<strong>还需要在虚拟机软件中将新添加的网卡设置为“桥接模式”</strong>，如图14-10所示。然后设置成与物理</p><p>设备相同的网络参数（此处需要大家按照物理设备真实的网络参数来配置）。图14-11所示为以<code>DHCP</code></p><p>方式获取IP地址与网关等信息，重启网络服务后的效果如   图14-12所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823103714451.png" alt="图14-10 新添加一块桥接网卡"></p><p>​<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823103737795.png" alt="图14-11 以DHCP方式获取网络参数"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823103822572.png" alt="图14-12 查看网卡的工作状态"></p><blockquote><p><strong>第3步</strong>：在<code>bind</code>服务程序的主配置文件中添加缓存转发参数。在大约第20行处添加一行参</p><p>数“<code>forwarders </code>{ 上级<code>DNS</code>服务器地址; };”，上级<code>DNS</code>服务器地址指的是获取数据配置文件的服务器。</p><p>考虑到查询速度、稳定性、安全性等因素，这里使用的是北京市公共<code>DNS</code>服务器的地址210.73.64.1。</p><p>如果大家也使用该地址，请先测试是否可以<code>ping</code>通，以免导致<code>DNS</code>域名解析失败。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9  10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 20         forwarders <span class="token punctuation">{</span> 210.73.64.1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防火墙的放行规则</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables-save</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=dns</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第4步</strong>：重启<code>DNS</code>服务，验证成果。把客户端主机的<code>DNS</code>服务器地址参数修改为<code>DNS</code>缓存服务器的IP地址</p><p>192.168.10.10，如图14-13所示。这样即可让客户端使用本地DNS缓存服务器提供的域名查询解析服</p><p>务。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823104053449.png" alt="图14-13 设置客户端主机的DNS服务器地址参数"></p><blockquote><p>使用<code>nslookup</code>命令来验证实验结果</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up ens160 </span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nslookup</span><span class="token operator">></span> www.linuxprobe.comServer:192.168.10.10Address:192.168.10.10<span class="token comment" spellcheck="true">#53</span>Non-authoritative answer:www.linuxprobe.comcanonical name <span class="token operator">=</span> www.linuxprobe.com.w.kunlunno.com.Name:www.linuxprobe.com.w.kunlunno.comAddress: 139.215.131.226<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-6、分离解析技术"><a href="#14-6、分离解析技术" class="headerlink" title="14.6、分离解析技术"></a>14.6、分离解析技术</h3><p><code>DNS</code>服务的分离解析功能，即可让位于不同地理范围内的读者通过访问相同的网址，从不同的服务器获取到</p><p>相同的数据。例如，我们可以按照表所示，分别为处于北京的<code>DNS</code>服务器和处于美国的<code>DNS</code>服务器分配不同</p><p>的<code>IP</code>地址，然后让国内读者在访问时自动匹配到北京的服务器，而让海外读者自动匹配到美国的服务器，如</p><p>图14-14所示。</p><table><thead><tr><th>DNS服务器</th><th>RHEL 8</th><th>北京网络：122.71.115.10</th></tr></thead><tbody><tr><td>主机名称</td><td>操作系统</td><td>IP地址</td></tr><tr><td>主机名称</td><td>操作系统</td><td>美国网络：106.185.25.10</td></tr><tr><td>北京用户</td><td>Windows 10</td><td>122.71.115.1</td></tr><tr><td>海外用户</td><td>Windows 10</td><td>106.185.25.1</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823104352649.png" alt="图14-14 DNS分离解析技术"></p><blockquote><p><strong>第1步</strong>：修改<code>bind</code>服务程序的主配置文件，把第11行的监听端口与第19行的允许查询主机修改为any。</p><p>由于配置的<code>DNS</code>分离解析功能与<code>DNS</code>根服务器配置参数有冲突，所以需要把第52～55行的根域信息删</p><p>除。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.conf</span>………………省略部分输出信息……………… 44  45 logging <span class="token punctuation">{</span> 46         channel default_debug <span class="token punctuation">{</span> 47                 <span class="token function">file</span> <span class="token string">"data/named.run"</span><span class="token punctuation">;</span> 48                 severity dynamic<span class="token punctuation">;</span> 49         <span class="token punctuation">}</span><span class="token punctuation">;</span> 50 <span class="token punctuation">}</span><span class="token punctuation">;</span> 51  52 zone <span class="token string">"."</span> IN <span class="token punctuation">{</span> 53         <span class="token function">type</span> hint<span class="token punctuation">;</span> 54         <span class="token function">file</span> <span class="token string">"named.ca"</span><span class="token punctuation">;</span> 55 <span class="token punctuation">}</span><span class="token punctuation">;</span> 56  57 include <span class="token string">"/etc/named.rfc1912.zones"</span><span class="token punctuation">;</span> 58 include <span class="token string">"/etc/named.root.key"</span><span class="token punctuation">;</span> 59 ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：<strong>编辑区域配置文件</strong>。把区域配置文件中原有的数据清空，然后按照以下格式写入参数。首先使用</p><p><code>acl</code>参数分别定义两个变量名称（<code>china</code>与<code>america</code>），当下面需要匹配<code>IP</code>地址时只需写入变量名称即</p><p>可，这样不仅容易阅读识别，而且也利于修改维护。这里的难点是理解<code>view</code>参数的作用。它的作用是通</p><p>过判断用户的<code>IP</code>地址是中国的还是美国的，然后去分别加载不同的数据配置文件</p><p>（<code>linuxprobe.com.china或linuxprobe.com.america</code>）。这样，当把相应的<code>IP</code>地址分别写入到数据</p><p>配置文件后，即可实现<code>DNS</code>的分离解析功能。这样一来，当中国的用户访问<code>linuxprobe.com</code>域名时，</p><p>便会按照<code>linuxprobe.com.china</code>数据配置文件内的<code>IP</code>地址找到对应的服务器。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/named.rfc1912.zones</span>acl <span class="token string">"china"</span> <span class="token punctuation">{</span> 122.71.115.0/24<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>acl <span class="token string">"america"</span> <span class="token punctuation">{</span> 106.185.25.0/24<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>view <span class="token string">"china"</span><span class="token punctuation">{</span>        match-clients <span class="token punctuation">{</span> <span class="token string">"china"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        zone <span class="token string">"linuxprobe.com"</span> <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.china"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>view <span class="token string">"america"</span> <span class="token punctuation">{</span>        match-clients <span class="token punctuation">{</span> <span class="token string">"america"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        zone <span class="token string">"linuxprobe.com"</span> <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.america"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：<strong>建立数据配置文件</strong>。分别通过模板文件创建出两份不同名称的区域数据文件，其名称应与上面区域配置文件中的参数相对应。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/named</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a named.localhost linuxprobe.com.china</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a named.localhost linuxprobe.com.america</span><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim linuxprobe.com.china</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>$TTL 1D</th><th>#生存周期为1天</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>@</td><td>IN SOA</td><td>linuxprobe.com.</td><td>root.linuxprobe.com.</td><td>(</td><td></td></tr><tr><td></td><td>#授权信息开始:</td><td>#DNS区域的地址</td><td>#域名管理员的邮箱(不要用@符号)</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>0;serial</td><td>#更新序列号</td></tr><tr><td></td><td></td><td></td><td></td><td>1D;refresh</td><td>#更新时间</td></tr><tr><td></td><td></td><td></td><td></td><td>1H;retry</td><td>#重试延时</td></tr><tr><td></td><td></td><td></td><td></td><td>1W;expire</td><td>#失效时间</td></tr><tr><td></td><td></td><td></td><td></td><td>3H);minimum</td><td>#无效解析记录的缓存时间</td></tr><tr><td></td><td>NS</td><td>ns.linuxprobe.com.</td><td></td><td>#域名服务器记录</td><td></td></tr><tr><td>ns</td><td>IN A</td><td>122.71.115.10</td><td></td><td></td><td>#地址记录(ns.linuxprobe.com.)</td></tr><tr><td>www</td><td>IN A</td><td>122.71.115.15</td><td></td><td></td><td>#地址记录(<a href="http://www.linuxprobe.com/">www.linuxprobe.com</a>.)</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe named<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim linuxprobe.com.america</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>$TTL 1D</th><th>#生存周期为1天</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>@</td><td>IN SOA</td><td>linuxprobe.com.</td><td>root.linuxprobe.com.</td><td>(</td><td></td></tr><tr><td></td><td>#授权信息开始:</td><td>#DNS区域的地址</td><td>#域名管理员的邮箱(不要用@符号)</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>0;serial</td><td>#更新序列号</td></tr><tr><td></td><td></td><td></td><td></td><td>1D;refresh</td><td>#更新时间</td></tr><tr><td></td><td></td><td></td><td></td><td>1H;retry</td><td>#重试延时</td></tr><tr><td></td><td></td><td></td><td></td><td>1W;expire</td><td>#失效时间</td></tr><tr><td></td><td></td><td></td><td></td><td>3H);minimum</td><td>#无效解析记录的缓存时间</td></tr><tr><td></td><td>NS</td><td>ns.linuxprobe.com.</td><td></td><td>#域名服务器记录</td><td></td></tr><tr><td>ns</td><td>IN A</td><td>106.185.25.10</td><td></td><td>#地址记录(ns.linuxprobe.com.)</td><td></td></tr><tr><td>www</td><td>IN A</td><td>106.185.25.15</td><td></td><td>#地址记录(<a href="http://www.linuxprobe.com/">www.linuxprobe.com</a>.)</td><td></td></tr></tbody></table><blockquote><p><strong>第4步</strong>：重新启动<code>named</code>服务程序，验证结果。将客户端主机（<code>Windows</code>系统或<code>Linux</code>系统均可）的<code>IP</code></p><p>地址分别设置为122.71.115.1与106.185.25.1，将<code>DNS</code>地址分别设置为服务器主机的两个<code>IP</code>地址。这</p><p>样，当尝试使用<code>nslookup</code>命令解析域名时就能清晰地看到解析结果，分别如图14-15与图14-16所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823105216915.png" alt="图14-15  模拟中国用户的域名解析操作"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823105231230.png" alt="图14-16 模拟美国用户的域名解析"></p><h2 id="十五、使用DHCP动态管理主机地址"><a href="#十五、使用DHCP动态管理主机地址" class="headerlink" title="十五、使用DHCP动态管理主机地址"></a>十五、使用DHCP动态管理主机地址</h2><hr><h3 id="15-1、动态主机地址管理协议"><a href="#15-1、动态主机地址管理协议" class="headerlink" title="15.1、动态主机地址管理协议"></a>15.1、动态主机地址管理协议</h3><p>动态主机配置协议（<code>DHCP</code>）是一种基于<code>UDP</code>协议且仅限于在局域网内部使用的网络协议，主要用于大型的局</p><p>域网环境或者存在较多移动办公设备的局域网环境中，用途是为局域网内部的设备或网络供应商自动分配<code>IP</code></p><p>地址等参数，提供网络配置的“全家桶”服务。</p><p>简单来说，<code>DHCP</code>就是让局域网中的主机自动获得网络参数的服务。在图15-1所示的拓扑图中存在多台主机，</p><p>如果手动配置每台主机的网络参数会相当麻烦，日后维护起来也让人头大。而且当机房内的主机数量进一步增</p><p>加时（比如有100台，甚至1000台），这个手动配置以及维护工作的工作量足以让运维人员崩溃。借助于</p><p><code>DHCP</code>，不仅可以为主机自动分配网络参数，还可以确保主机使用的<code>IP</code>地址是唯一的，更重要的是，还能为</p><p>特定主机分配固定的IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823110750133.png" alt="图15-1 DHCP协议的拓扑示意图"></p><blockquote><p><code>DHCP</code>涉及的常见术语：</p><ul><li><strong>作用域</strong>：一个完整的IP地址段，DHCP根据作用域来管理网络的分布、IP地址的分配及其他配置参数。</li><li><strong>超级作用域</strong>：用于管理处于同一个物理网络中的多个逻辑子网段，它包含了可以统一管理的作用域列表。</li><li><strong>排除范围</strong>：把作用域中的某些IP地址排除，确保这些IP地址不会分配给DHCP客户端。</li><li><strong>地址池</strong>：在定义了DHCP的作用域并应用了排除范围后，剩余的用来动态分配给客户端的IP地址范围。</li><li><strong>租约</strong>：DHCP客户端能够使用动态分配的IP地址的时间。</li><li><strong>预约</strong>：保证网络中的特定设备总是获取到相同的IP地址。</li></ul></blockquote><h3 id="15-2、部署dhcpd服务程序"><a href="#15-2、部署dhcpd服务程序" class="headerlink" title="15.2、部署dhcpd服务程序"></a>15.2、部署<code>dhcpd</code>服务程序</h3><blockquote><p>安装<code>dhcpd</code>服务程序，其软件包名称为<code>dhcp-server</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y dhcp-server</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看<code>dhcpd</code>服务程序的配置文件内容</p></blockquote><pre><code>bash[root@linuxprobe ~]# cat /etc/dhcp/dhcpd.conf## DHCP Server Configuration file.#   see /usr/share/doc/dhcp-server/dhcpd.conf.example#   see dhcpd.conf(5) man page#</code></pre><p><code>dhcp</code>的服务程序的配置文件中只有3行注释语句，这意味着我们需要自行编写这个文件。可以看一下配置文</p><p>件中第2行的参考示例文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823111447119.png" alt="图15-2 dhcpd服务程序配置文件的架构"></p><p>一个标准的配置文件应该包括<strong>全局配置参数</strong>、<strong>子网网段声明</strong>、<strong>地址配置选项</strong>以及<strong>地址配置参数</strong>。其中，全局配</p><p>置参数用于定义<code>dhcpd</code>服务程序的整体运行参数；子网网段声明用于配置整个子网段的地址属性。</p><blockquote><p> <code>dhcpd</code>服务程序配置文件中使用的常见参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ddns-update-style 类型</td><td>定义DNS服务动态更新的类型，类型包括： none（不支持动态更新）、interim（互动更新模式）与ad-hoc（特殊更新模式）</td></tr><tr><td>allow/ignore client-updates</td><td>允许/忽略客户端更新DNS记录</td></tr><tr><td>default-lease-time 21600</td><td>默认超时时间</td></tr><tr><td>max-lease-time 43200</td><td>最大超时时间</td></tr><tr><td>option domain-name-servers 8.8.8.8</td><td>定义DNS服务器地址</td></tr><tr><td>option domain-name “domain.org”</td><td>定义DNS域名</td></tr><tr><td>range</td><td>定义用于分配的IP地址池</td></tr><tr><td>option subnet-mask</td><td>定义客户端的子网掩码</td></tr><tr><td>option routers</td><td>定义客户端的网关地址</td></tr><tr><td>broadcast-address 广播地址</td><td>定义客户端的广播地址</td></tr><tr><td>ntp-server IP地址</td><td>定义客户端的网络时间服务器（NTP）</td></tr><tr><td>nis-servers IP地址</td><td>定义客户端的NIS域服务器的地址</td></tr><tr><td>hardware 硬件类型 MAC地址</td><td>指定网卡接口的类型与MAC地址</td></tr><tr><td>server-name 主机名</td><td>向DHCP客户端通知DHCP服务器的主机名</td></tr><tr><td>fixed-address IP地址</td><td>将某个固定的IP地址分配给指定主机</td></tr><tr><td>time-offset 偏移差</td><td>指定客户端与格林尼治时间的偏移差</td></tr></tbody></table><h3 id="15-3、自动管理IP地址"><a href="#15-3、自动管理IP地址" class="headerlink" title="15.3、自动管理IP地址"></a>15.3、自动管理<code>IP</code>地址</h3><blockquote><p>机房所用的网络地址以及参数信息</p></blockquote><table><thead><tr><th>参数名称</th><th>值</th></tr></thead><tbody><tr><td>默认租约时间</td><td>21600秒</td></tr><tr><td>最大租约时间</td><td>43200秒</td></tr><tr><td>IP地址范围</td><td>192.168.10.50~192.168.10.150</td></tr><tr><td>子网掩码</td><td>255.255.255.0</td></tr><tr><td>网关地址</td><td>192.168.10.1</td></tr><tr><td>DNS服务器地址</td><td>192.168.10.1</td></tr><tr><td>搜索域</td><td>linuxprobe.com</td></tr></tbody></table><blockquote><p><code>DHCP</code>服务器以及客户端的配置信息</p></blockquote><table><thead><tr><th>主机类型</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>DHCP服务器</td><td>RHEL 8</td><td>192.168.10.1</td></tr><tr><td>DHCP客户端</td><td>Windows 10</td><td>DHCP自动获取地址</td></tr></tbody></table><p>作用域一般是个完整的<code>IP</code>地址段，而地址池中的<code>IP</code>地址才是真正供客户端使用的，因此地址池应该小于或等</p><p>于作用域的<code>IP</code>地址范围。另外，由于<code>VMware Workstation</code>虚拟机软件自带<code>DHCP</code>服务，为了避免与自己配</p><p>置的<code>dhcpd</code>服务程序产生冲突，应该先按照图15-3和图15-4将虚拟机软件自带的<code>DHCP</code>功能关闭。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823112042181.png" alt="图15-4 关闭虚拟机自带的DHCP功能"></p><p>可随意开启几台客户端，准备进行验证。但是一定要注意，<code>DHCP</code>客户端与服务器需要处于同一种网络模式</p><p>—仅主机模式（<code>Hostonly</code>），否则就会产生物理隔离，从而无法获取<code>IP</code>地址。建议开启1～3台客户端虚拟</p><p>机验证一下效果就好，以免物理主机的<code>CPU</code>和内存的负载太高。</p><blockquote><p>在确认<code>DHCP</code>服务器的<code>IP</code>地址等网络信息配置妥当后，就可以配置<code>dhcpd</code>服务程序了。请注意，在配置</p><p><code>dhcpd</code>服务程序时，配置文件中的每行参数后面都需要以分号（;）结尾，这是规定。另外，<code>dhcpd</code>服务</p><p>程序配置文件内的参数都十分重要，因此在表中罗列出了每一行参数，并对其用途进行了简单介绍。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/dhcp/dhcpd.conf</span>ddns-update-style none<span class="token punctuation">;</span>ignore client-updates<span class="token punctuation">;</span>subnet 192.168.10.0 netmask 255.255.255.0 <span class="token punctuation">{</span>        range 192.168.10.50 192.168.10.150<span class="token punctuation">;</span>        option subnet-mask 255.255.255.0<span class="token punctuation">;</span>        option routers 192.168.10.1<span class="token punctuation">;</span>        option domain-name <span class="token string">"linuxprobe.com"</span><span class="token punctuation">;</span>        option domain-name-servers 192.168.10.1<span class="token punctuation">;</span>        default-lease-time 21600<span class="token punctuation">;</span>        max-lease-time 43200<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <code>dhcpd</code>服务程序配置文件中使用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ddns-update-style none;</td><td>设置DNS服务不自动进行动态更新</td></tr><tr><td>ignore client-updates;</td><td>忽略客户端更新DNS记录</td></tr><tr><td>subnet 192.168.10.0 netmask 255.255.255.0 {</td><td>作用域为192.168.10.0/24网段</td></tr><tr><td>range 192.168.10.50 192.168.10.150;</td><td>IP地址池为192.168.10.50-150（约100个IP地址）</td></tr><tr><td>option subnet-mask 255.255.255.0;</td><td>定义客户端默认的子网掩码</td></tr><tr><td>option routers 192.168.10.1;</td><td>定义客户端的网关地址</td></tr><tr><td>option domain-name “linuxprobe.com”;</td><td>定义默认的搜索域</td></tr><tr><td>option domain-name-servers 192.168.10.1;</td><td>定义客户端的DNS地址</td></tr><tr><td>default-lease-time 21600;</td><td>定义默认租约时间（单位：秒）</td></tr><tr><td>max-lease-time 43200;</td><td>定义最大预约时间（单位：秒）</td></tr></tbody></table><blockquote><p>把配置过的<code>dhcpd</code>服务加入到开机启动项中，以确保当服务器下次开机后<code>dhcpd</code>服务依然能自动启动，</p><p>并顺地为客户端分配IP地址等信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start dhcpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable dhcpd</span>Created symlink /etc/systemd/system/multi-user.target.wants/dhcpd.service → /usr/lib/systemd/system/dhcpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>把<code>dhcpd</code>服务程序配置妥当之后就可以开启客户端来检验IP分配效果了。在日常工作中，<code>Windows 10</code>是主流</p><p>的桌面操作系统，所以只要确保两个主机都处于同一个网络模式内，然后像如图15-5那样设置<code>Windows</code>系统</p><p>的网络为<code>DHCP</code>模式，再稍等片刻即可自动获取到网卡信息了，如图15-6所示。特别方便！</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823112532277.png" alt="图15-5 设置网卡模式"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823112548824.png" alt="图15-6 自动获取到IP地址"></p><blockquote><p>防火墙放行<code>DHCP</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --permanent --add-service=dhcp</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-4、分配固定的IP地址"><a href="#15-4、分配固定的IP地址" class="headerlink" title="15.4、分配固定的IP地址"></a>15.4、分配固定的<code>IP</code>地址</h3><p>在<code>DHCP</code>协议中有个术语是“预约”，它用来确保局域网中特定的设备总是获取到固定的<code>IP</code>地址。换句话说，</p><p>就是<code>dhcpd</code>服务程序会把某个<code>IP</code>地址私藏下来，只将其用于相匹配的特定设备。</p><p>要想把某个<code>IP</code>地址与某台主机进行绑定，就需要用到这台主机的<code>MAC</code>地址。这个<code>MAC</code>地址即网卡上一串独立</p><p>的标识符，具备唯一性，因此不会存在冲突的情况。在<code>Linux</code>系统中查看<code>MAC</code>地址的示例如图15-7所示，在</p><p><code>Windows</code>系统中查<code>MAC</code>地址的示例如图15-8所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823141911649.png" alt="图15-7 在Linux系统中查看网卡MAC地址"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823141930513.png" alt="图15-8 在Windows系统中查看网卡MAC地址"></p><blockquote><p>在<code>dhcpd</code>服务程序的配置文件中，按照如下格式将<code>IP</code>地址与<code>MAC</code>地址进行绑定。</p></blockquote><table><thead><tr><th>host 主机名称 {</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>hardware</td><td>ethernet</td><td>该主机的MAC地址;</td><td></td></tr><tr><td></td><td>fixed-address</td><td>欲指定的IP地址;</td><td></td><td></td></tr><tr><td>}</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>如果不方便查看主机的<code>MAC</code>地址，该怎么办呢？比如，要给老板使用的主机绑定<code>IP</code>地址，总不能随便就去</p><p>查看老板的主机信息吧。针对这种情况，这里告诉大家一个好办法。我们首先启动<code>dhcpd</code>服务程序，为老板</p><p>的主机分配一个<code>IP</code>地址，这样就会在<code>DHCP</code>服务器本地的日志文件中保存这次的<code>IP</code>地址分配记录。然后查看</p><p>日志文件，就可以获悉主机的<code>MAC</code>地址了（即下面加粗的内容）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -f /var/log/messages</span>………………省略部分输出信息………………Mar 22 00:28:54 linuxprobe cupsd<span class="token punctuation">[</span>1206<span class="token punctuation">]</span>: REQUEST linuxprobe.com- - <span class="token string">"POST / HTTP/1.1"</span> 200 183 Renew-Subscription client-error-not-foundMar 22 00:29:35 linuxprobe dhcpd<span class="token punctuation">[</span>30959<span class="token punctuation">]</span>: DHCPREQUEST <span class="token keyword">for</span> 192.168.10.50 from 00:0c:29:dd:f2:22 <span class="token punctuation">(</span>DESKTOP-3OGV50E<span class="token punctuation">)</span> via ens160Mar 22 00:29:35 linuxprobe dhcpd<span class="token punctuation">[</span>30959<span class="token punctuation">]</span>: DHCPACK on 192.168.10.50 to 00:0c:29:dd:f2:22 <span class="token punctuation">(</span>DESKTOP-3OGV50E<span class="token punctuation">)</span> via ens160<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Windows</code>系统中看到的<code>MAC</code>地址，其格式类似于00-0c-29-dd-f2-22，间隔符为减号（-）。但是在<code>Linux</code></p><p>系统中，<code>MAC</code>地址的间隔符则变成了冒号（:）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/dhcp/dhcpd.conf </span>ddns-update-style none<span class="token punctuation">;</span>ignore client-updates<span class="token punctuation">;</span>subnet 192.168.10.0 netmask 255.255.255.0 <span class="token punctuation">{</span>        range 192.168.10.50 192.168.10.150<span class="token punctuation">;</span>        option subnet-mask 255.255.255.0<span class="token punctuation">;</span>        option routers 192.168.10.1<span class="token punctuation">;</span>        option domain-name <span class="token string">"linuxprobe.com"</span><span class="token punctuation">;</span>        option domain-name-servers 192.168.10.1<span class="token punctuation">;</span>        default-lease-time 21600<span class="token punctuation">;</span>        max-lease-time 43200<span class="token punctuation">;</span>        host linuxprobe <span class="token punctuation">{</span>                hardware ethernet 00:0c:29:dd:f2:22<span class="token punctuation">;</span>                fixed-address 192.168.10.88<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认参数填写正确后就可以保存并退出配置文件，然后就可以重启<code>dhcpd</code>服务程序了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart dhcpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要说明的是，如果您刚刚为这台主机分配了<code>IP</code>地址，由于它的<code>IP</code>地址租约时间还没有到期，因此不会立即</p><p>换成新绑定的<code>IP</code>地址。要想立即查看绑定效果，则需要重启一下客户端的网络服务，如图15-9所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823142327945.png" alt="图15-9 重启网卡设备"></p><p>然后就能看到效果了，如图15-10所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220823142349471.png" alt="图15-10 查看绑定后的网卡信息"></p><h2 id="十六、使用Postfix与Dovecot部署邮件系统"><a href="#十六、使用Postfix与Dovecot部署邮件系统" class="headerlink" title="十六、使用Postfix与Dovecot部署邮件系统"></a>十六、使用Postfix与Dovecot部署邮件系统</h2><hr><h3 id="16-1、电子邮件系统"><a href="#16-1、电子邮件系统" class="headerlink" title="16.1、电子邮件系统"></a>16.1、电子邮件系统</h3><blockquote><p>电子邮件系统基于邮件协议来完成电子邮件的传输，常见的邮件协议有：</p><ul><li><strong>简单邮件传输协议（<code>Simple Mail Transfer Protocol，SMTP</code>）</strong>：用于发送和中转发出的电子邮件，占用服务器的TCP/25端口。</li><li><strong>邮局协议版本3（<code>Post Office Protocol 3</code>）</strong>：用于将电子邮件存储到本地主机，占用服务器的TCP/110端口。</li><li><strong>Internet消息访问协议版本4（<code>Internet Message Access Protocol 4</code>）</strong>：用于在本地主机上访问邮件，占用服务器的TCP/143端口。</li></ul></blockquote><p>在电子邮件系统中，为用户收发邮件的服务器名为<strong>邮件用户代理</strong>（<code>Mail User Agent，MUA</code>）。另外，既然</p><p>电子邮件系统能够让用户在离线的情况下依然可以完成数据的接收，肯定得有一个用于保存用户邮件的“信</p><p>箱”服务器，这个服务器的名字为邮件投递代理（<code>Mail Delivery Agent</code>，<code>MDA</code>），其工作职责是把来自于</p><p>邮件传输代理（<code>Mail Transfer Agent</code>，<code>MTA</code>）的邮件保存到本地的收件箱中。其中，这个<code>MTA</code>的工作职责</p><p>是转发处理不同电子邮件服务供应商之间的邮件，把来自于MUA的邮件转发到合适的<code>MTA</code>服务器。例如，我</p><p>们从新浪信箱向谷歌信箱发送一封电子邮件，这封电子邮件的传输过程如图16-1所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824093925464.png" alt="图16-1 电子邮件的传输过程"></p><blockquote><p>生产环境中部署企业级的电子邮件系统时，有4个注意事项请留意：</p><ul><li><strong>添加反垃圾与反病毒模块</strong>：它能够很有效地阻止垃圾邮件或病毒邮件对企业信箱的干扰。</li><li><strong>对邮件加密：</strong>可有效保护邮件内容不被黑客盗取和篡改。</li><li><strong>添加邮件监控审核模块</strong>：可有效地监控企业全体员工的邮件中是否有敏感词，是否有透露企业资料等违规行为。</li><li><strong>保障稳定性</strong>：电子邮件系统的稳定性至关重要，运维人员应做到保证电子邮件系统的稳定运行，并及时做好防范分布式拒绝服务（<code>Distributed Denial of Service</code>，<code>DDoS</code>）攻击的准备。</li></ul></blockquote><h3 id="16-2、部署基础的电子邮件系统"><a href="#16-2、部署基础的电子邮件系统" class="headerlink" title="16.2、部署基础的电子邮件系统"></a>16.2、部署基础的电子邮件系统</h3><p>一个最基础的电子邮件系统肯定要能提供发件服务和收件服务，为此需要使用基于<code>SMTP</code>的<code>Postfix</code>服务程序</p><p>提供发件服务功能，并使用基于<code>POP3</code>协议的<code>Dovecot</code>服务程序提供收件服务功能。这样一来，用户就可以使</p><p>用<code>Outlook Express</code>或<code>Foxmail</code>等客户端服务程序正常收发邮件了。电子邮件系统的工作流程如图16-2所</p><p>示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824094219650.png" alt="图16-2 电子邮件系统的工作流程"></p><p>一般而言，我们的信箱地址类似于<a href="mailto:root@linuxprobe.com">root@linuxprobe.com</a>这样，也就是按照“用户名@主机地址（域名）”格式</p><p>来规范的。如果您给我一串“<a href="mailto:root@192.168.10.10">root@192.168.10.10</a>”的信息，我可能猜不到这是一个邮箱地址，没准会将它当</p><p>作SSH协议的连接信息。因此，要想更好地检验电子邮件系统的配置效果，需要先部署<code>bind</code>服务程序，为电</p><p>子邮件服务器和客户端提供<code>DNS</code>域名解析服务。</p><blockquote><p><strong>第1步</strong>：配置服务器主机名称，需要保证服务器主机名称与发信域名保持一致。</p></blockquote><pre><code>[root@linuxprobe ~]# vim /etc/hostnamemail.linuxprobe.com[root@linuxprobe ~]# hostnamemail.linuxprobe.com[root@linuxprobe ~]#hostnamectl set-hostname mail.linuxprobe.com</code></pre><blockquote><p><strong>第2步</strong>：清空<code>iptables</code>防火墙默认策略，并保存策略状态，避免因防火墙中默认存在的策略阻止了客</p><p>户端<code>DNS</code>解析域名及收发邮件。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables-save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把DNS协议加入到<code>firewalld</code>防火墙的允许列表中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=dns</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：为电子邮件系统提供域名解析。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install bind-chroot</span> <span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/named.conf</span>  1 //  2 // named.conf  3 //  4 // Provided by Red Hat bind package to configure the ISC BIND named<span class="token punctuation">(</span>8<span class="token punctuation">)</span> DNS  5 // server as a caching only nameserver <span class="token punctuation">(</span>as a localhost DNS resolver only<span class="token punctuation">)</span>.  6 //  7 // See /usr/share/doc/bind*/sample/ <span class="token keyword">for</span> example named configuration files.  8 //  9  10 options <span class="token punctuation">{</span> 11         listen-on port 53 <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 12         listen-on-v6 port 53 <span class="token punctuation">{</span> ::1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 13         directory       <span class="token string">"/var/named"</span><span class="token punctuation">;</span> 14         dump-file       <span class="token string">"/var/named/data/cache_dump.db"</span><span class="token punctuation">;</span> 15         statistics-file <span class="token string">"/var/named/data/named_stats.txt"</span><span class="token punctuation">;</span> 16         memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span> 17         secroots-file   <span class="token string">"/var/named/data/named.secroots"</span><span class="token punctuation">;</span> 18         recursing-file  <span class="token string">"/var/named/data/named.recursing"</span><span class="token punctuation">;</span> 19         allow-query     <span class="token punctuation">{</span> any<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 20  ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/named.rfc1912.zones</span>zone <span class="token string">"linuxprobe.com"</span> IN <span class="token punctuation">{</span>        <span class="token function">type</span> master<span class="token punctuation">;</span>        <span class="token function">file</span> <span class="token string">"linuxprobe.com.zone"</span><span class="token punctuation">;</span>        allow-update <span class="token punctuation">{</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议在复制正向解析模板文件时，在<code>cp</code>命令后面追加<code>-a</code>参数，以便让新文件继承原文件的属性和权限信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -a /var/named/named.localhost /var/named/linuxprobe.com.zone</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /var/named/linuxprobe.com.zone</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>$TTL 1D</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>@</td><td>IN SOA</td><td>linuxprobe.com.</td><td>root.linuxprobe.com.</td><td>(</td></tr><tr><td></td><td></td><td></td><td></td><td>0;serial</td></tr><tr><td></td><td></td><td></td><td></td><td>1D;refresh</td></tr><tr><td></td><td></td><td></td><td></td><td>1H;retry</td></tr><tr><td></td><td></td><td></td><td></td><td>1W;expire</td></tr><tr><td></td><td></td><td></td><td></td><td>3H);minimum</td></tr><tr><td></td><td>NS</td><td>ns.linuxprobe.com.</td><td></td><td></td></tr><tr><td>ns</td><td>IN A</td><td>192.168.10.10</td><td></td><td></td></tr><tr><td>@</td><td>IN MX 10</td><td>mail.linuxprobe.com.</td><td></td><td></td></tr><tr><td>mail</td><td>IN A</td><td>192.168.10.10</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart named</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable  named</span>Created symlink /etc/systemd/system/multi-user.target.wants/named.service → /usr/lib/systemd/system/named.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改好配置文件后记得重启bind服务程序，这样电子邮件系统所对应的服务器主机名即为</p><p><code>mail.linuxprobe.com</code>，而邮件域为<code>@linuxprobe.com</code>。把服务器的<code>DNS</code>地址修改成本</p><p>地<code>IP</code>地址，如图16-3所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824094748533.png" alt="图16-3 配置服务器的DNS地址"></p><p>让新配置的网卡参数立即生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up ens160 </span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后，对主机名执行<code>ping</code>命令，若能<code>ping</code>通，则证明上述操作全部正确。注意，在执行<code>ping</code>操作时，也会</p><p>获得主机名对应的IP地址，证明上述操作全部正确：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4  mail.linuxprobe.com </span>PING mail.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from mail.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.040 ms64 bytes from mail.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.057 ms64 bytes from mail.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.037 ms64 bytes from mail.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.052 ms--- mail.linuxprobe.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 45msrtt min/avg/max/mdev <span class="token operator">=</span> 0.037/0.046/0.057/0.010 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-2-1、配置Postfix服务程序"><a href="#16-2-1、配置Postfix服务程序" class="headerlink" title="16.2.1、配置Postfix服务程序"></a>16.2.1、配置<code>Postfix</code>服务程序</h4><p><code>Postfix</code>是一款由<code>IBM</code>资助研发的免费开源电子邮件服务程序，能够很好地兼容<code>Sendmail</code>服务程序，可以方</p><p>便<code>Sendmail</code>用户迁移到<code>Postfix</code>服务上。<code>Postfix</code>服务程序的邮件收发能力强于<code>Sendmail</code>服务，而且能自</p><p>动增加、减少进程的数量来保证电子邮件系统的高性能与稳定性。另外，<code>Postfix</code>服务程序由许多小模块组</p><p>成，每个小模块都可以完成特定的功能，因此可在生产工作环境中根据需求灵活搭配。</p><blockquote><p><strong>第1步</strong>：安装<code>Postfix</code>服务程序</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install postfix</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：配置<code>Postfix</code>服务程序。大家如果是首次看到<code>Postfix</code>服务程序主配置文件</p><p>（<code>/etc/ postfix/main.cf</code>），估计会被738行的内容给吓到。其实不用担心，这里</p><p>面绝大多数的内容依然是注释信息。</p></blockquote><blockquote><p> <code>Postfix</code>服务程序主配置文件中的重要参数</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>myhostname</code></td><td>邮局系统的主机名</td></tr><tr><td><code>mydomain</code></td><td>邮局系统的域名</td></tr><tr><td><code>myorigin</code></td><td>从本机发出邮件的域名名称</td></tr><tr><td><code>inet_interfaces</code></td><td>监听的网卡接口</td></tr><tr><td><code>mydestination</code></td><td>可接收邮件的主机名或域名</td></tr><tr><td><code>mynetworks</code></td><td>设置可转发哪些主机的邮件</td></tr><tr><td><code>relay_domains</code></td><td>设置可转发哪些网域的邮件</td></tr></tbody></table><p>在<code>Postfix</code>服务程序的主配置文件中，总计需要修改5处。首先是在第95行定义一个名为<code>myhostname</code>的变</p><p>量，用来保存服务器的主机名称。请大家记住这个变量的名称，下面的参数需要调用它</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/postfix/main.cf</span> 86  87 <span class="token comment" spellcheck="true"># INTERNET HOST AND DOMAIN NAMES</span> 88 <span class="token comment" spellcheck="true"># </span> 89 <span class="token comment" spellcheck="true"># The myhostname parameter specifies the internet hostname of this</span> 90 <span class="token comment" spellcheck="true"># mail system. The default is to use the fully-qualified domain name</span> 91 <span class="token comment" spellcheck="true"># from gethostname(). $myhostname is used as a default value for many</span> 92 <span class="token comment" spellcheck="true"># other configuration parameters.</span> 93 <span class="token comment" spellcheck="true">#</span> 94 <span class="token comment" spellcheck="true">#myhostname = host.domain.tld</span> 95 myhostname <span class="token operator">=</span> mail.linuxprobe.com 96 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在第102行定义一个名为<code>mydomain</code>的变量，用来保存邮件域的名称。大家也要记住这个变量名称，下面</p><p>将调用它</p><pre class="line-numbers language-bash"><code class="language-bash"> 96  97 <span class="token comment" spellcheck="true"># The mydomain parameter specifies the local internet domain name.</span> 98 <span class="token comment" spellcheck="true"># The default is to use $myhostname minus the first component.</span> 99 <span class="token comment" spellcheck="true"># $mydomain is used as a default value for many other configuration</span>100 <span class="token comment" spellcheck="true"># parameters.</span>101 <span class="token comment" spellcheck="true">#</span>102 mydomain <span class="token operator">=</span> linuxprobe.com103 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第118行调用前面的<code>mydomain</code>变量，用来定义发出邮件的域。调用变量的好处是避免重复写入信息，以及</p><p>便于日后统一修改b</p><pre class="line-numbers language-bash"><code class="language-bash">105 <span class="token comment" spellcheck="true"># </span>106 <span class="token comment" spellcheck="true"># The myorigin parameter specifies the domain that locally-posted</span>107 <span class="token comment" spellcheck="true"># mail appears to come from. The default is to append $myhostname,</span>108 <span class="token comment" spellcheck="true"># which is fine for small sites.  If you run a domain with multiple</span>109 <span class="token comment" spellcheck="true"># machines, you should (1) change this to $mydomain and (2) set up</span>110 <span class="token comment" spellcheck="true"># a domain-wide alias database that aliases each user to</span>111 <span class="token comment" spellcheck="true"># user@that.users.mailhost.</span>112 <span class="token comment" spellcheck="true">#</span>113 <span class="token comment" spellcheck="true"># For the sake of consistency between sender and recipient addresses,</span>114 <span class="token comment" spellcheck="true"># myorigin also specifies the default domain name that is appended</span>115 <span class="token comment" spellcheck="true"># to recipient addresses that have no @domain part.</span>116 <span class="token comment" spellcheck="true">#</span>117 <span class="token comment" spellcheck="true">#myorigin = $myhostname</span>118 myorigin <span class="token operator">=</span> <span class="token variable">$mydomain</span>119 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第4处修改是在第135行定义网卡监听地址。可以指定要使用服务器的哪些IP地址对外提供电子邮件服务；也</p><p>可以干脆写成all，表示所有IP地址都能提供电子邮件服务</p><pre class="line-numbers language-bash"><code class="language-bash">121 122 <span class="token comment" spellcheck="true"># The inet_interfaces parameter specifies the network interface</span>123 <span class="token comment" spellcheck="true"># addresses that this mail system receives mail on.  By default,</span>124 <span class="token comment" spellcheck="true"># the software claims all active interfaces on the machine. The</span>125 <span class="token comment" spellcheck="true"># parameter also controls delivery of mail to user@[ip.address].</span>126 <span class="token comment" spellcheck="true">#</span>127 <span class="token comment" spellcheck="true"># See also the proxy_interfaces parameter, for network addresses that</span>128 <span class="token comment" spellcheck="true"># are forwarded to us via a proxy or network address translator.</span>129 <span class="token comment" spellcheck="true">#</span>130 <span class="token comment" spellcheck="true"># Note: you need to stop/start Postfix when this parameter changes.</span>131 <span class="token comment" spellcheck="true">#</span>132 <span class="token comment" spellcheck="true">#inet_interfaces = all</span>133 <span class="token comment" spellcheck="true">#inet_interfaces = $myhostname</span>134 <span class="token comment" spellcheck="true">#inet_interfaces = $myhostname, localhost</span>135 inet_interfaces <span class="token operator">=</span> all136 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一处修改是在第183行定义可接收邮件的主机名或域名列表。这里可以直接调用前面定义好的</p><p><code>myhostname</code>和<code>mydomain</code>变量</p><pre class="line-numbers language-bash"><code class="language-bash">151 152 <span class="token comment" spellcheck="true"># The mydestination parameter specifies the list of domains that this</span>153 <span class="token comment" spellcheck="true"># machine considers itself the final destination for.</span>154 <span class="token comment" spellcheck="true">#</span>155 <span class="token comment" spellcheck="true"># These domains are routed to the delivery agent specified with the</span>156 <span class="token comment" spellcheck="true"># local_transport parameter setting. By default, that is the UNIX</span>157 <span class="token comment" spellcheck="true"># compatible delivery agent that lookups all recipients in /etc/passwd</span>158 <span class="token comment" spellcheck="true"># and /etc/aliases or their equivalent.</span>159 <span class="token comment" spellcheck="true">#</span>160 <span class="token comment" spellcheck="true"># The default is $myhostname + localhost.$mydomain + localhost.  On</span>161 <span class="token comment" spellcheck="true"># a mail domain gateway, you should also include $mydomain.</span>162 <span class="token comment" spellcheck="true">#</span>163 <span class="token comment" spellcheck="true"># Do not specify the names of virtual domains - those domains are</span>164 <span class="token comment" spellcheck="true"># specified elsewhere (see VIRTUAL_README).</span>165 <span class="token comment" spellcheck="true">#</span>166 <span class="token comment" spellcheck="true"># Do not specify the names of domains that this machine is backup MX</span>167 <span class="token comment" spellcheck="true"># host for. Specify those names via the relay_domains settings for</span>168 <span class="token comment" spellcheck="true"># the SMTP server, or use permit_mx_backup if you are lazy (see</span>169 <span class="token comment" spellcheck="true"># STANDARD_CONFIGURATION_README).</span>170 <span class="token comment" spellcheck="true">#</span>171 <span class="token comment" spellcheck="true"># The local machine is always the final destination for mail addressed</span>172 <span class="token comment" spellcheck="true"># to user@[the.net.work.address] of an interface that the mail system</span>173 <span class="token comment" spellcheck="true"># receives mail on (see the inet_interfaces parameter).</span>174 <span class="token comment" spellcheck="true">#</span>175 <span class="token comment" spellcheck="true"># Specify a list of host or domain names, /file/name or type:table</span>176 <span class="token comment" spellcheck="true"># patterns, separated by commas and/or whitespace. A /file/name</span>177 <span class="token comment" spellcheck="true"># pattern is replaced by its contents; a type:table is matched when</span>178 <span class="token comment" spellcheck="true"># a name matches a lookup key (the right-hand side is ignored).</span>179 <span class="token comment" spellcheck="true"># Continue long lines by starting the next line with whitespace.</span>180 <span class="token comment" spellcheck="true">#</span>181 <span class="token comment" spellcheck="true"># See also below, section "REJECTING MAIL FOR UNKNOWN LOCAL USERS".</span>182 <span class="token comment" spellcheck="true">#</span>183 mydestination <span class="token operator">=</span> <span class="token variable">$myhostname</span>, <span class="token variable">$mydomain</span>184 <span class="token comment" spellcheck="true">#mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain</span>185 <span class="token comment" spellcheck="true">#mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,</span>186 <span class="token comment" spellcheck="true">#       mail.$mydomain, www.$mydomain, ftp.$mydomain</span>187 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第3步</strong>：创建电子邮件系统的登录账户。<code>Postfix</code>与<code>vsftpd</code>服务程序一样，都可以调用本地系统的账户和密</p><p>码，因此在本地系统创建常规账户即可。最后重启配置妥当的<code>postfix</code>服务程序，并将其添加到开机启动项</p><p>中。大功告成！</p><pre class="line-numbers language-bash"><code class="language-bash">b<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd liuchuan</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "linuxprobe" | passwd --stdin liuchuan</span>Changing password <span class="token keyword">for</span> user liuchuan.passwd: all authentication tokens updated successfully.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart postfix</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable  postfix</span>Created symlink /etc/systemd/system/multi-user.target.wants/postfix.service → /usr/lib/systemd/system/postfix.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-2-2、配置Dovecot服务程序"><a href="#16-2-2、配置Dovecot服务程序" class="headerlink" title="16.2.2、配置Dovecot服务程序"></a>16.2.2、配置<code>Dovecot</code>服务程序</h4><p><code>Dovecot</code>是一款能够为<code>Linux</code>系统提供<code>IMAP</code>和<code>POP3</code>电子邮件服务的开源服务程序，安全性极高，配置简</p><p>单，执行速度快，而且占用的服务器硬件资源也较少，因此是一款值得推荐的收件服务程序。</p><blockquote><p><strong>第1步</strong>：安装<code>Dovecot</code>服务程序软件包。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y dovecot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第2步</strong>：配置部署<code>Dovecot</code>服务程序。在<code>Dovecot</code>服务程序的主配置文件中进行如下修改。首先是第24行，</p><p>把<code>Dovecot</code>服务程序支持的电子邮件协议修改为<code>imap</code>、<code>pop3</code>和<code>lmtp</code>。然后在这一行下面添加一行参数，允</p><p>许用户使用明文进行密码验证。之所以这样操作，是因为<code>Dovecot</code>服务程序为了保证电子邮件系统的安全而</p><p>默认强制用户使用加密方式进行登录，而由于当前还没有加密系统，因此需要添加该参数来允许用户的明文登</p><p>录。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/dovecot/dovecot.conf</span>………………省略部分输出信息……………… 22  23 <span class="token comment" spellcheck="true"># Protocols we want to be serving.</span> 24 protocols <span class="token operator">=</span> imap pop3 lmtp 25 disable_plaintext_auth <span class="token operator">=</span> no 26 ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主配置文件的第49行，<strong>设置允许登录的网段地址</strong>，也就是说我们可以在这里限制只有来自于某个网段的用</p><p>户才能使用电子邮件系统。如果想允许所有人都能使用，则不用修改本参数：</p><pre class="line-numbers language-bash"><code class="language-bash">bas 44  45 <span class="token comment" spellcheck="true"># Space separated list of trusted network ranges. Connections from these</span> 46 <span class="token comment" spellcheck="true"># IPs are allowed to override their IP addresses and ports (for logging and</span> 47 <span class="token comment" spellcheck="true"># for authentication checks). disable_plaintext_auth is also ignored for</span> 48 <span class="token comment" spellcheck="true"># these networks. Typically you'd specify your IMAP proxy servers here.</span> 49 login_trusted_networks <span class="token operator">=</span> 192.168.10.0/24 50 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第3步</strong>：<strong>配置邮件格式与存储路径</strong>。在<code>Dovecot</code>服务程序单独的子配置文件中，定义一个路径，用于指定要将</p><p>收到的邮件存放到服务器本地的哪个位置。这个路径默认已经定义好了，只需要将该配置文件中第25行前面</p><p>的井号（#）删除即可。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/dovecot/conf.d/10-mail.conf</span>  1 <span class="token comment" spellcheck="true">##</span>  2 <span class="token comment" spellcheck="true">## Mailbox locations and namespaces</span>  3 <span class="token comment" spellcheck="true">##</span>  4   5 <span class="token comment" spellcheck="true"># Location for users' mailboxes. The default is empty, which means that Dovecot</span>  6 <span class="token comment" spellcheck="true"># tries to find the mailboxes automatically. This won't work if the user</span>  7 <span class="token comment" spellcheck="true"># doesn't yet have any mail, so you should explicitly tell Dovecot the full</span>  8 <span class="token comment" spellcheck="true"># location.</span>  9 <span class="token comment" spellcheck="true">#</span> 10 <span class="token comment" spellcheck="true"># If you're using mbox, giving a path to the INBOX file (eg. /var/mail/%u)</span> 11 <span class="token comment" spellcheck="true"># isn't enough. You'll also need to tell Dovecot where the other mailboxes are</span> 12 <span class="token comment" spellcheck="true"># kept. This is called the "root mail directory", and it must be the first</span> 13 <span class="token comment" spellcheck="true"># path given in the mail_location setting.</span> 14 <span class="token comment" spellcheck="true">#</span> 15 <span class="token comment" spellcheck="true"># There are a few special variables you can use, eg.:</span> 16 <span class="token comment" spellcheck="true">#</span> 17 <span class="token comment" spellcheck="true">#   %u - username</span> 18 <span class="token comment" spellcheck="true">#   %n - user part in user@domain, same as %u if there's no domain</span> 19 <span class="token comment" spellcheck="true">#   %d - domain part in user@domain, empty if there's no domain</span> 20 <span class="token comment" spellcheck="true">#   %h - home directory</span> 21 <span class="token comment" spellcheck="true">#</span> 22 <span class="token comment" spellcheck="true"># See doc/wiki/Variables.txt for full list. Some examples:</span> 23 <span class="token comment" spellcheck="true">#</span> 24 <span class="token comment" spellcheck="true">#   mail_location = maildir:~/Maildir</span> 25     mail_location <span class="token operator">=</span> mbox:~/mail:INBOX<span class="token operator">=</span>/var/mail/%u 26 <span class="token comment" spellcheck="true">#   mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n</span> 27 <span class="token comment" spellcheck="true">#</span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后切换到配置<code>Postfix</code>服务程序时创建的<code>boss</code>账户，并在家目录中建立用于保存邮件的目录。记得要重启</p><p><code>Dovecot</code>服务并将其添加到开机启动项中。至此，对<code>Dovecot</code>服务程序的配置部署步骤全部结束。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - liuchuan</span><span class="token punctuation">[</span>liuchuan@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p mail/.imap/INBOX<span class="token punctuation">[</span>liuchuan@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token keyword">exit</span><span class="token function">logout</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart dovecot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable  dovecot</span>Created symlink /etc/systemd/system/multi-user.target.wants/dovecot.service → /usr/lib/systemd/system/dovecot.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面提到的邮件协议在防火墙中的策略予以放行，这样客户端就能正常访问了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=imap</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=pop3</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=smtp</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-2-3、客户使用电子邮件系统"><a href="#16-2-3、客户使用电子邮件系统" class="headerlink" title="16.2.3、客户使用电子邮件系统"></a>16.2.3、客户使用电子邮件系统</h4><p>如何得知电子邮件系统已经能够正常收发邮件了呢？可以使用<code>Windows</code>操作系统中自带的<code>Outlook</code>软件来进</p><p>行测试（也可以使用其他电子邮件客户端来测试，比如<code>Foxmail</code>）。请按照表来设置电子邮件系统及<code>DNS</code>服</p><p>务器和客户端主机的IP地址，以便能正常解析邮件域名。设置后的结果如图16-4所示。</p><blockquote><p> 服务器与客户端的操作系统与IP地址</p></blockquote><table><thead><tr><th>主机名称</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>电子邮件系统及DNS服务器</td><td>RHEL 8</td><td>192.168.10.10</td></tr><tr><td>客户端主机</td><td>Windows 10</td><td>192.168.10.30</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824102824671.png" alt="图16-4 配置Windows 10系统的网络参数"></p><blockquote><p><strong>第1步</strong>：在<code>Windows 10</code>系统中运行Outlook软件程序。由于各位读者使用的<code>Windows 10</code>系统版本不一</p><p>定相同，因此本书决定采用<code>Outlook 2010</code>版本为对象进行实验。如果您想要与这里的实验环境尽量保</p><p>持一致，可在软件资源库页面（<a href="https://www.linuxprobe.com/tools%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%60Outlook">https://www.linuxprobe.com/tools）下载并安装`Outlook</a> 2010`软件。</p><p>在初次运行该软件时会出现一个“<code>Microsoft Outlook 2010</code>启动”页面，引导大家完成该软件的配置过</p><p>程，如图16-5所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824102941406.png" alt="图16-5 Outlook 2010启动向导"></p><blockquote><p><strong>第2步</strong>：<strong>配置电子邮件账户</strong>。在图16-6所示的“账户配置”页面中单击“是”单选按钮，然后单击“下一步”按</p><p>钮。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103006840.png" alt="图16-6 配置电子邮件账户"></p><blockquote><p><strong>第3步</strong>：<strong>填写电子邮件账户信息</strong>，在图16-7所示的页面中，在“您的姓名”文本框中输入您的名字（可以为</p><p>自定义的任意名字），在“电子邮件地址”文本框中输入服务器系统内的账户名和发件域，在“密码”文本框</p><p>中输入该账户在服务器内的登录密码。填写完毕之后，单击“下一步”按钮。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103048772.png" alt="图16-7 填写电子邮件账户信息"></p><blockquote><p> <strong>第4步</strong>：进<strong>行电子邮件服务登录验证</strong>。由于当前没有可用的<code>SSL</code>加密服务，因此在<code>Dovecot</code>服务程序的</p><p>主配置文件中写入了一条参数，让用户可以使用明文登录到电子邮件服务。<code>Outlook</code>软件默认会通过</p><p><code>SSL</code>加密协议尝试登录电子邮件服务，所以在进行图16-8所示的“搜索<a href="mailto:liuchuan@linuxprobe.com">liuchuan@linuxprobe.com</a>服务器</p><p>设置”大约30～60秒后，系统会出现登录失败的报错信息。此时只需再次单击“下一步”按钮，即可让</p><p><code>Outloo</code>k软件通过非加密的方式验证登录，如图16-9所示。最后验证成功的界面如图16-10所示，点</p><p>击“完成”按钮，一切搞定！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103228788.png" alt="图16-8 进行电子邮件服务验证登录"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103241253.png" alt="图16-9 使用非加密的方式进行电子邮件服务验证登录"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103257766.png" alt="图16-10 使用非加密方式配置账户成功"></p><blockquote><p><strong>第5步</strong>：<strong>向其他信箱发送邮件</strong>。在成功登录<code>Outlook</code>软件后即可尝试编写并发送新邮件了。只需在软件界</p><p>面的空白处单击鼠标右键，在弹出的菜单中单击“新建电子邮件”选项（见图16-11），然后在邮件界面中</p><p>填写收件人的信箱地址以及完整的邮件内容后单击“发送”按钮，如图16-12所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103336383.png" alt="图16-11 向其他信箱发送邮件"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103353358.png" alt="图16-12 填写收件人信箱地址并编写完整的邮件内容"></p><blockquote><p>当使用<code>Outlook</code>软件成功发送邮件后，便可以在电子邮件服务器上查看到新邮件提醒了，在<code>RHEL 8</code>系统</p><p>中查看邮件的命令是<code>mailx</code>，需要自行安装（输出信息省略）。要想查看邮件的完整内容，只需输入收</p><p>件人姓名前面的编号即可。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install mailx</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mailx</span>Heirloom Mail version 12.5 7/5/10.  Type ? <span class="token keyword">for</span> help.<span class="token string">"/var/spool/mail/root"</span><span class="token keyword">:</span> 1 message 1 new<span class="token operator">></span>N  1 liuchuan              Tue Mar 30 01:35  97/3257  <span class="token string">"Hello~"</span><span class="token operator">&amp;</span> 1Message  1:From liuchuan@linuxprobe.com  Tue Mar 30 01:35:29 2021Return-Path: <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>X-Original-To: root@linuxprobe.comDelivered-To: root@linuxprobe.comFrom: <span class="token string">"liuchuan"</span> <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>To: <span class="token operator">&lt;</span>root@linuxprobe.com<span class="token operator">></span>Subject: Hello~Date: Mon, 29 Mar 2021 19:49:30 +0800Content-Type: multipart/alternative<span class="token punctuation">;</span>    boundary<span class="token operator">=</span><span class="token string">"----=_NextPart_000_0001_01D724D4.A28BB310"</span>X-Mailer: Microsoft Outlook 14.0Thread-Index: AdckkVaUrscA9j2EQ3evqG++j6aSSA<span class="token operator">==</span>Content-Language: zh-cnStatus: RContent-Type: text/plain<span class="token punctuation">;</span>    charset<span class="token operator">=</span><span class="token string">"gb2312"</span>当您收到这封邮件时，证明我的邮局系统实验已经成功！<span class="token operator">&amp;</span> quitHeld 1 message <span class="token keyword">in</span> /var/spool/mail/root<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3、设置用户别名邮箱"><a href="#16-3、设置用户别名邮箱" class="headerlink" title="16.3、设置用户别名邮箱"></a>16.3、设置用户别名邮箱</h3><p>用户别名功能是一项简单实用的邮件账户伪装技术，可以用来设置多个虚拟信箱的账户以接收发送的邮件，从</p><p>而保证自身的邮件地址不被泄露；还可以用来接收自己的多个信箱中的邮件。刚才我们已经顺利地向root账户</p><p>发送了邮件，下面再向bin账户发送一封邮件，如图16-13所示。</p><p>在邮件发送后登录到服务器，然后尝试以bin账户的身份登录。由于<code>bin</code>账户在<code>Linux</code>系统中是系统账户，默</p><p>认的<code>Shell</code>终端是/sbin/nologin，因此在以<code>bin</code>账户登录时，系统会提示当前账户不可用。但是，在电子邮</p><p>件服务器上使用<code>mail</code>命令后，却看到这封原本要发送给<code>bin</code>账户的邮件已经被存放到<code>root</code>账户的信箱中。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103701215.png" alt="图16-13 向服务器上的bin账户发送邮件"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - bin</span>This account is currently not available.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mailx</span>Heirloom Mail version 12.5 7/5/10.  Type ? <span class="token keyword">for</span> help.<span class="token string">"/var/spool/mail/root"</span><span class="token keyword">:</span> 2 messages 1 new    1 liuchuan              Tue Mar 30 01:35  98/3268  <span class="token string">"Hello~"</span><span class="token operator">></span>N  2 liuchuan              Tue Mar 30 03:53  97/3251  <span class="token string">"你好，用户bin。"</span><span class="token operator">&amp;</span> 2Message  2:From liuchuan@linuxprobe.com  Tue Mar 30 03:53:37 2021Return-Path: <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>X-Original-To: bin@linuxprobe.comDelivered-To: bin@linuxprobe.comFrom: <span class="token string">"liuchuan"</span> <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>To: <span class="token operator">&lt;</span>bin@linuxprobe.com<span class="token operator">></span>Subject: 你好，用户bin。Date: Mon, 29 Mar 2021 22:07:39 +0800Content-Type: multipart/alternative<span class="token punctuation">;</span>    boundary<span class="token operator">=</span><span class="token string">"----=_NextPart_000_000E_01D724E7.EEF35A10"</span>X-Mailer: Microsoft Outlook 14.0Thread-Index: AdckpJ6n2QIfRYAZTB20gA9VTep2dg<span class="token operator">==</span>Content-Language: zh-cnStatus: RContent-Type: text/plain<span class="token punctuation">;</span>    charset<span class="token operator">=</span><span class="token string">"gb2312"</span>这是一封发给用户bin的邮件。<span class="token operator">&amp;</span> quitHeld 2 messages <span class="token keyword">in</span> /var/spool/mail/root<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，这就是使用用户别名技术来实现的。在<code>aliases</code>邮件别名服务的配置文件中可以看到，里面定义了大</p><p>量的用户别名，这些用户别名大多数是<code>Linux</code>系统本地的系统账户，而在冒号（:）间隔符后面的<code>root</code>账户则</p><p>是用来接收这些账户邮件的人。用户别名可以是<code>Linux</code>系统内的本地用户，也可以是完全虚构的用户名字。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/aliases</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Aliases in this file will NOT be expanded in the header from</span><span class="token comment" spellcheck="true">#  Mail, but WILL be visible over networks or from /bin/mail.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#>>>>>>>>>>The program "newaliases" must be run after</span><span class="token comment" spellcheck="true">#>> NOTE >>this file is updated for any changes to</span><span class="token comment" spellcheck="true">#>>>>>>>>>>show through to sendmail.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Basic system aliases -- these MUST be present.</span>mailer-daemon:postmasterpostmaster:root<span class="token comment" spellcheck="true"># General redirections for pseudo accounts.</span>bin:rootdaemon:rootadm:rootlp:rootsync:rootshutdown:roothalt:rootmail:rootnews:rootuucp:rootoperator:root………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在大家能猜出是怎么一回事了吧。原来aliases邮件别名服务的配置文件专门用来定义用户别名与邮件接收</p><p>人的映射。除了使用本地系统中系统账户的名称外，我们还可以自行定义一些别名来接收邮件。例如，创建一</p><p>个名为<code>dream</code>的账户，而真正接收该账户邮件的应该是<code>root</code>账户。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/aliases</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Aliases in this file will NOT be expanded in the header from</span><span class="token comment" spellcheck="true">#  Mail, but WILL be visible over networks or from /bin/mail.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#       >>>>>>>>>>      The program "newaliases" must be run after</span><span class="token comment" spellcheck="true">#       >> NOTE >>      this file is updated for any changes to</span><span class="token comment" spellcheck="true">#       >>>>>>>>>>      show through to sendmail.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Basic system aliases -- these MUST be present.</span>mailer-daemon:  postmasterpostmaster:     root<span class="token comment" spellcheck="true"># General redirections for pseudo accounts.</span>dream:          rootbin:            rootdaemon:         rootadm:            rootlp:             rootsync:           rootshutdown:       roothalt:           rootmail:           rootnews:           rootuucp:           rootoperator:       root………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并退出aliases邮件别名服务的配置文件后，需要再执行一下<code>newaliases</code>命令，其目的是让新的用户别名</p><p>配置文件立即生效。然后再次尝试发送邮件，如图16-14所示。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># newaliases</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824103942211.png" alt="图16-14 向服务器上的dream用户发送邮件"></p><p>这时，使用<code>root</code>账户在服务器上执行<code>mail</code>命令后，就能看到这封原本要发送给<code>dream</code>账户的邮件了。最</p><p>后，再啰唆一句，用户别名技术不仅应用广泛，而且配置也很简单。所以这里要提醒大家的是，今后千万不</p><p>要看到有些网站上提供了很多客服信箱就轻易相信别人，没准发往这些客服信箱的邮件会被同一个人收到。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mailx</span>Heirloom Mail version 12.5 7/5/10.  Type ? <span class="token keyword">for</span> help.<span class="token string">"/var/spool/mail/root"</span><span class="token keyword">:</span> 3 messages 1 new    1 liuchuan              Tue Mar 30 01:35  98/3268  <span class="token string">"Hello~"</span>    2 liuchuan              Tue Mar 30 03:53  98/3262  <span class="token string">"你好，用户bin。"</span><span class="token operator">></span>N  3 liuchuan              Tue Mar 30 04:12  98/3317  <span class="token string">"这是一封发送给dream用户的邮件"</span><span class="token operator">&amp;</span> 3Message  3:From liuchuan@linuxprobe.com  Tue Mar 30 04:12:19 2021Return-Path: <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>X-Original-To: dream@linuxprobe.comDelivered-To: dream@linuxprobe.comFrom: <span class="token string">"liuchuan"</span> <span class="token operator">&lt;</span>liuchuan@linuxprobe.com<span class="token operator">></span>To: <span class="token operator">&lt;</span>dream@linuxprobe.com<span class="token operator">></span>Subject: 这是一封发送给dream用户的邮件Date: Mon, 29 Mar 2021 22:26:21 +0800Content-Type: multipart/alternative<span class="token punctuation">;</span>    boundary<span class="token operator">=</span><span class="token string">"----=_NextPart_000_0009_01D724EA.8B9A4750"</span>X-Mailer: Microsoft Outlook 14.0Thread-Index: Adckpw3r2QT7QwGITceHTJdfioQeQQ<span class="token operator">==</span>Content-Language: zh-cnStatus: RContent-Type: text/plain<span class="token punctuation">;</span>    charset<span class="token operator">=</span><span class="token string">"gb2312"</span>顺利的话会被root用户接收到。<span class="token operator">&amp;</span> quitHeld 3 messages <span class="token keyword">in</span> /var/spool/mail/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-4、邮件客户端"><a href="#16-4、邮件客户端" class="headerlink" title="16.4、邮件客户端"></a>16.4、邮件客户端</h3><p>在<code>Linux</code>系统下可选的邮件客户端有数十种，例如<code>Thunderbird</code>、<code>Evolution</code>、<code>Gear</code>、<code>Elementary </code></p><p><code>Mail</code>、<code>KMail</code>、<code>Mailspring</code>、<code>Sylpheed</code>、<code>Claws Mail</code>等。<code>Thunderbird</code>是由<code>Mozilla</code>基金会</p><p>（<code>Firefox</code>浏览器的生产厂商）发布的一款电子邮件客户端，操作简单，支持跨平台，拥有各种插件和丰</p><p>富的功能，而且兼具<code>Firefox</code>浏览器的各种优势，用户可以轻松上手。</p><blockquote><p>安装<code>Thunderbird</code></p></blockquote><pre class="line-numbers language-bahs"><code class="language-bahs">[root@linuxprobe ~]# yum install -y thunderbird<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这款图形化的客户端程序有两种打开方式。一种是通过在终端中输入<code>thunderbird</code>命令后按回车键；</p><p>另外一种方式是在<code>RHEL8</code>桌面左上角的<code>Activities</code>程序菜单中单击<code>Thunderbird</code>客户端的图标将其</p><p>打开，如图16-15所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104357254.png" alt="图16-15 在程序菜单中点击邮件客户端图标"></p><p>在初次进入<code>Thunderbird</code>客户端界面时，会要求用户填写邮件账户的名称、地址和密码，如图16-16所示。账</p><p>户不一定要与系统中的账户名称相同，可以理解成是邮件发送人的昵称，密码则是系统中账户的密码，然后单</p><p>击<code>Continue</code>按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104449398.png" alt="图16-16 配置客户端的账号、地址和密码"></p><p>接下来单击<code>Manual config</code>按钮，进一步配置连接信息，如图16-17所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104528970.png" alt="图16-17 进入到手动配置模式"></p><p>由于当前没有设置<code>SSL</code>邮局加密，因此在如图16-18所示的手动配置模式中，需要将<code>SSL</code>选项更改为<code>None</code>，</p><p>并将<code>Authentication</code>设置为<code>Normal password</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104604439.png" alt="图16-18 手动配置连接信息"></p><p>出于安全方面的考虑，<code>Thunderbird</code>客户端会提示警告信息。选中<code>understand the risks</code>复选框，然后单</p><p>击<code>Done</code>按钮即可，如图16-19所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104639074.png" alt="图16-19 安全警告信息"></p><p>接下来便顺利来到了<code>Thunderbird</code>客户端的使用界面，如图16-20所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220824104704393.png" alt="图16-20 Thunderbird邮件客户端使用界面"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>person_teacher的使用教程</title>
      <link href="/2022/08/12/person-teacher/"/>
      <url>/2022/08/12/person-teacher/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>阿里云服务器   <code>hadoop</code>  环境搭建    5次</li><li><code>java</code> 基础语言  预科班   原理   </li><li>算法    <code>java</code></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试test </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK的使用教程（二）</title>
      <link href="/2022/08/08/elk-er/"/>
      <url>/2022/08/08/elk-er/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><h2 id="一、管理索引"><a href="#一、管理索引" class="headerlink" title="一、管理索引"></a>一、管理索引</h2><hr><blockquote><p><code>Elasticsearch</code>采用<code>Rest</code>风格<code>API</code>，因此其<code>API</code>就是一次<code>http</code>请求，你可以用任何工具发起<code>http</code>请</p><p>求</p></blockquote><h3 id="1、创建索引"><a href="#1、创建索引" class="headerlink" title="1、创建索引"></a>1、创建索引</h3><hr><blockquote><p>语法</p><p><code>settings</code>：就是索引库设置，其中可以定义索引库的各种属性 比如分片数 副本数等，目前我们可以</p><p>不设置，都走默认</p></blockquote><pre class="line-numbers language-http"><code class="language-http">PUT /索引名称 {    "settings": {        "属性名": "属性值"     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例</p><p><code>PUT /lagou-company-index</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808155628559.png"></p><h3 id="2、判断索引是否存在"><a href="#2、判断索引是否存在" class="headerlink" title="2、判断索引是否存在"></a>2、判断索引是否存在</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">HEAD /索引名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例 </p><p><code>HEAD /lagou-company-index</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808155723737.png"></p><h3 id="3、查看索引"><a href="#3、查看索引" class="headerlink" title="3、查看索引"></a>3、查看索引</h3><hr><h4 id="3-1、按名字查看索引"><a href="#3-1、按名字查看索引" class="headerlink" title="3.1、按名字查看索引"></a>3.1、按名字查看索引</h4><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /索引名称[,索引名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例 </p><p><code>GET /lagou-company-index</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808155852817.png"></p><h4 id="3-2、全量查看索引"><a href="#3-2、全量查看索引" class="headerlink" title="3.2、全量查看索引"></a>3.2、全量查看索引</h4><blockquote><p>方式一</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET _all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808155949679.png"></p><blockquote><p>方式二 =&gt; 查看状态信息</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /_cat/indices?v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808160044002.png"></p><blockquote><p><code>health</code>:</p><ul><li>绿色：索引的所有分4片没有得到正确的分配。</li></ul></blockquote><h3 id="4、打开索引"><a href="#4、打开索引" class="headerlink" title="4、打开索引"></a>4、打开索引</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名称/_open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808160149611.png"></p><h3 id="5、关闭索引"><a href="#5、关闭索引" class="headerlink" title="5、关闭索引"></a>5、关闭索引</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名称/_close<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808160227054.png"></p><h3 id="6、删除索引库"><a href="#6、删除索引库" class="headerlink" title="6、删除索引库"></a>6、删除索引库</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">DELETE /索引名称1[,索引名称2,索引名称3...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例</p><p>DELETE /lagou-company-index</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220808160336043.png"></p><h2 id="二、安装IK分词器"><a href="#二、安装IK分词器" class="headerlink" title="二、安装IK分词器"></a>二、安装<code>IK</code>分词器</h2><hr><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><blockquote><p>使用<code>root</code>用户安装</p><p>三台机器均要执行</p></blockquote><blockquote><p> 在<code>elasticsearch</code>安装目录的<code>plugins</code>目录下新建 <code>analysis-ik</code> 目录</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#新建analysis-ik文件夹 </span><span class="token function">mkdir</span> analysis-ik <span class="token comment" spellcheck="true">#切换至 analysis-ik文件夹下 </span><span class="token function">cd</span> analysis-ik <span class="token comment" spellcheck="true">#上传资料中的 elasticsearch-analysis-ik-7.3.0.zip</span><span class="token comment" spellcheck="true">#解压 </span>unzip elasticsearch-analysis-ik-7.3.3.zip <span class="token comment" spellcheck="true">#解压完成后删除zip </span><span class="token function">rm</span> -rf elasticsearch-analysis-ik-7.3.0.zip<span class="token comment" spellcheck="true">#分发到其它节点 </span><span class="token function">cd</span> <span class="token punctuation">..</span> <span class="token function">scp</span> -r analysis-ik/ linux122:<span class="token variable">$PWD</span> <span class="token function">scp</span> -r analysis-ik/ linux123:<span class="token variable">$PWD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重启<code>Elasticsearch</code> 和<code>Kibana</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#杀死es </span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> elasticsearch<span class="token operator">|</span><span class="token function">grep</span> bootstrap <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span> -9 <span class="token comment" spellcheck="true">#启动 </span><span class="token function">nohup</span> /opt/lagou/servers/es/elasticsearch/bin/elasticsearch <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span> <span class="token comment" spellcheck="true">#重启kibana </span><span class="token function">cd</span> /opt/lagou/servers/kibana/ /bin/kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><blockquote><p><code>IK</code>分词器有两种分词模式：<code>ik_max_word</code>和<code>ik_smart</code>模式。</p></blockquote><h4 id="2-1、ik-max-word"><a href="#2-1、ik-max-word" class="headerlink" title="2.1、ik_max_word"></a>2.1、<code>ik_max_word</code></h4><pre class="line-numbers language-http"><code class="language-http">POST _analyze {    "analyzer": "ik_max_word",     "text": "南京市长江大桥" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ik_max_word</code> 分词模式运行得到结果</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"南京市"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"南京"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"市长"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"长江大桥"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">3</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"长江"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">4</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"大桥"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">5</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2、ik-smart"><a href="#2-2、ik-smart" class="headerlink" title="2.2、ik_smart"></a>2.2、<code>ik_smart</code></h4><blockquote><pre class="line-numbers language-http"><code class="language-http">POST _analyze {    "analyzer": "ik_max_word",     "text": "南京市长江大桥" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"南京市"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"token"</span><span class="token operator">:</span><span class="token string">"长江大桥"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、词典使用"><a href="#2-3、词典使用" class="headerlink" title="2.3、词典使用"></a>2.3、词典使用</h3><blockquote><p><strong>扩展词</strong>：就是不想让哪些词被分开，让他们分成一个词。比如上面的江大桥</p><p><strong>停用词</strong>：有些词在文本中出现的频率非常高。但对本文的语义产生不了多大的影响。例如英文的<code>a</code>、</p><p><code>an</code>、<code>the</code>、<code>of</code>等。或中文的”<code>的、了、呢</code>等”。这样的词称为停用词。停用词经常被过滤掉，不会被进行</p><p>索引。在检索的过程中，如果用户的查询词中含有停用词，系统会自动过滤掉。停用词可以加快索引的</p><p>速度，减少索引库文件的大小。</p></blockquote><blockquote><p>扩展词与停用词集中存储到<code>linux123</code>服务器上，使用web服务器集中管理，避免每个节点维护一份自</p><p>己的词典</p><p><strong>以下操作使用<code>es</code>用户</strong></p></blockquote><blockquote><p>上传<code>tomcat</code>安装包到<code>linux123</code>服务器</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>解压</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-tomcat-8.5.59.tar.gz<span class="token function">mv</span> apache-tomcat-8.5.59/ tomcat/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>自定义扩展词库</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/tomcat/webapps/ROOT vim ext_dict.dic<span class="token comment" spellcheck="true">##添加：江大桥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义停用词</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/tomcat/webapps/ROOT vim stop_dict.dic<span class="token comment" spellcheck="true">##添加： 的,了,啊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动<code>tomcat</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">/opt/lagou/servers/es/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>浏览器访问</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//linux123:8080/ext_dict.dic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>配置<code>IK</code>分词器</p><p>添加自定义扩展，停用词典</p><p>使用<code>roo</code>t用户修改，或者直接把整个文件夹改为<code>es</code>用户所有！！</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">#三个节点都需修改cd /opt/lagou/servers/es/elasticsearch/plugins/analysis-ik/config vim IKAnalyzer.cfg.xml<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://linux123:8080/ext_dict.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://linux123:8080/stop_dict.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重启服务</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##三个节点</span><span class="token comment" spellcheck="true">#杀死es </span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> elasticsearch<span class="token operator">|</span><span class="token function">grep</span> bootstrap <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span> -9 <span class="token comment" spellcheck="true">#启动 </span><span class="token function">nohup</span> /opt/lagou/servers/es/elasticsearch/bin/elasticsearch <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span> <span class="token comment" spellcheck="true">#重启kibana </span><span class="token function">cd</span> /opt/lagou/servers/kibana/ /bin/kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、映射操作"><a href="#三、映射操作" class="headerlink" title="三、映射操作"></a>三、映射操作</h2><hr><blockquote><p>索引创建之后，等于有了关系型数据库中的<code>database</code>。<code>Elasticsearch7.x</code>取消了索引<code>type</code>类型的设</p><p>置，不允许指定类型，默认为<code>_doc</code>，但字段仍然是有的，我们需要设置字段的约束信息，叫做字段映</p><p>射（<code>mapping</code>）</p></blockquote><blockquote><p>字段的约束包括但不限于：</p><ul><li>字段的数据类型</li><li>是否要存储</li><li>是否要索引</li><li>分词器</li></ul></blockquote><h3 id="1、创建映射字段"><a href="#1、创建映射字段" class="headerlink" title="1、创建映射字段"></a>1、创建映射字段</h3><hr><blockquote><p>映射规则</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-params.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>语法</p></blockquote><pre><code>PUT /索引库名/_mapping {     "properties": {        "字段名": {             "type": "数据类型",            "index": true， //是否索引，不索引就无法针对这个字段查询             "store": false， //存储,默认不存储，_source:存储了文档的所有字段内容；从_source字段中            可以获取所有 字段，但是需要自己解析，如果对某个字段指定了存储，在查询时直接指定返回的字段会增            加io开销。            "analyzer": "分词器"           }       } }</code></pre><blockquote><p>字段名：任意填写，下面指定许多属性，例如：</p><ul><li><code>type</code>：类型，可以是<code>text</code>、<code>long</code>、<code>short</code>、<code>date</code>、<code>integer</code>、<code>object</code>等</li><li><code>index</code>：是否索引，默认为<code>true</code></li><li><code>store</code>：是否存储，默认为<code>false</code></li><li><code>analyzer</code>：指定分词器</li></ul></blockquote><blockquote><p>示例</p><p>发起请求</p></blockquote><pre><code>PUT /lagou-company-index PUT /lagou-company-index/_mapping/ {     "properties": {        "name": {                 "type": "text",                "analyzer": "ik_max_word"          },         "job": {                  "type": "text",                "analyzer": "ik_max_word"          },         "logo": {                   "type": "keyword",                "index": "false"          },         "payment": {                  "type": "float"          }      } }</code></pre><blockquote><p>响应结果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809093420105.png"></p><blockquote><p>上述案例中，就给<code>lagou-company-index</code>这个索引库设置了4个字段：</p><ul><li><code>name</code>：企业名称</li><li><code>job</code>: 需求岗位</li><li><code>logo</code>：<code>logo</code>图片地址</li><li><code>payment</code>：薪资</li></ul></blockquote><h3 id="2、映射属性详解"><a href="#2、映射属性详解" class="headerlink" title="2、映射属性详解"></a>2、映射属性详解</h3><hr><h4 id="2-1、Type"><a href="#2-1、Type" class="headerlink" title="2.1、Type"></a>2.1、<code>Type</code></h4><blockquote><p><code>Elasticsearch</code>中支持的数据类型非常丰富：</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>几个关键的：</p><ul><li><p><code>String</code>类型，又分两种：</p><ul><li><code>text</code>：可分词，不可参与聚合</li><li><code>keyword</code>：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li></ul></li><li><p><code>Numerical</code>：数值类型，分两类</p><ul><li>基本数据类型：<code>long</code>、<code>interger</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float、</code>half_float`</li><li>浮点数的高精度类型：<code>scaled_float</code></li></ul></li><li><p><code>Date</code>：日期类型</p><p><code>elasticsearch</code>可以对日期格式化为字符串存储，<strong>但是建议我们存储为毫秒值，存储为<code>long</code>，节省空间</strong>。</p></li><li><p><code>Array</code>：数组类型</p><ul><li>进行匹配时，任意一个元素满足，都认为满足</li><li>排序时，如果升序则用数组中的最小值来排序，如果降序则用数组中的最大值来排序</li></ul></li><li><p><code>Object</code>：对象</p></li></ul><pre><code>{     name:"Jack",    age:21,     girl:{         name: "Rose",        age:21    } }</code></pre></blockquote><h4 id="2-2、Index"><a href="#2-2、Index" class="headerlink" title="2.2、Index"></a>2.2、<code>Index</code></h4><blockquote><p><code>index</code>影响字段的索引情况</p><ul><li><code>true</code>：字段会被索引，则可以用来进行搜索。默认值就是<code>true</code></li><li><code>false</code>：字段不会被索引，不能用来搜索</li></ul><p><code>index</code>的默认值就是<code>true</code>，也就是说你不进行任何配置，所有字段都会被索引。 但是有些字段是我们</p><p>不希望被索引的，比如企业的<code>logo</code>图片地址，就需要手动设置<code>index</code>为<code>false</code>。</p></blockquote><h4 id="2-3、-store"><a href="#2-3、-store" class="headerlink" title="2.3、 store"></a>2.3、<code> store</code></h4><blockquote><p>是否将数据进行独立存储。 原始的文本会存储在 <code>_source</code> 里面，默认情况下其他提取出来的字段都不</p><p>是独立存储的，是从 <code>_source</code> 里面提取出来的。当然你也可以独立的存储某个字段，只要设置</p><p><code>store:true</code>即可，获取独立存储的字段要比从<code>_source</code>中解析快得多，但是也会占用更多的空间，</p><p>所以要根据实际业务需求来设置，默认为<code>false</code>。</p></blockquote><h4 id="2-4、analyzer"><a href="#2-4、analyzer" class="headerlink" title="2.4、analyzer"></a>2.4、<code>analyzer</code></h4><blockquote><p>一般我们处理中文会选择ik分词器 <code>ik_max_word</code> <code>ik_smart</code></p></blockquote><h3 id="3、查看映射关系"><a href="#3、查看映射关系" class="headerlink" title="3、查看映射关系"></a>3、查看映射关系</h3><hr><h4 id="3-1、查看单个索引映射关系"><a href="#3-1、查看单个索引映射关系" class="headerlink" title="3.1、查看单个索引映射关系"></a>3.1、查看单个索引映射关系</h4><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /索引名称/_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809094342546.png"></p><h4 id="3-2、查看所有映射关系"><a href="#3-2、查看所有映射关系" class="headerlink" title="3.2、查看所有映射关系"></a>3.2、查看所有映射关系</h4><blockquote><p>方式一</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET _mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>方式二</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET _all/_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3、修改索引映射关系"><a href="#3-3、修改索引映射关系" class="headerlink" title="3.3、修改索引映射关系"></a>3.3、修改索引映射关系</h4><blockquote><p>语法</p><p><strong><font color="red">注意:修改映射只能是增加字段操作，做其它更改只能删除索引 重新建立映射</font></strong></p></blockquote><pre class="line-numbers language-http"><code class="language-http">PUT /索引库名/_mapping {     "properties": {         "字段名": {             "type": "类型",            "index": true,             "store": true,             "analyzer": "分词器"          }       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、一次性创建索引和映射"><a href="#4、一次性创建索引和映射" class="headerlink" title="4、一次性创建索引和映射"></a>4、一次性创建索引和映射</h3><hr><pre class="line-numbers language-http"><code class="language-http">put /索引库名称{     "settings":{         "索引库属性名":"索引库属性值"     },    "mappings":{         "properties":{             "字段名":{                 "映射属性名":"映射属性值"             }         }     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">PUT /lagou-employee-index {     "settings": {},    "mappings": {        "properties": {             "name": {                 "type": "text",                "analyzer": "ik_max_word"              }          }     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、文档增删改查及局部更新"><a href="#四、文档增删改查及局部更新" class="headerlink" title="四、文档增删改查及局部更新"></a>四、文档增删改查及局部更新</h2><hr><blockquote><p>文档，即索引库中的数据，会根据规则创建索引，将来用于搜索。可以类比做数据库中的一行数据</p></blockquote><h3 id="1、新增文档"><a href="#1、新增文档" class="headerlink" title="1、新增文档"></a>1、新增文档</h3><hr><blockquote><p>新增文档时，涉及到id的创建方式，手动指定或者自动生成。</p></blockquote><blockquote><p>手动方式</p></blockquote><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名称/_doc/{id}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /lagou-company-index/_doc/1 {    "name" : "百度",    "job" : "小度用户运营经理",    "payment" : "30000",     "logo" :"http://www.lgstatic.com/thubnail_120x120/i/image/M00/21/3E/CgpFT1kVdzeAJNbUAABJB7x9sm83 74.png",    "address":"北京市昌平区"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809122216739.png"></p><blockquote><p>自动生成ID</p></blockquote><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名称/_doc {     "field":"value" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /lagou-company-index/_doc/ {     "name" : "百度",     "job" : "小度用户运营经理",     "payment" : "30000",     "logo" : "http://www.lgstatic.com/thubnail_120x120/i/image/M00/21/3E/CgpFT1kVdzeAJNbUAABJB7x9sm83 74.png" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809122321832.png"></p><h3 id="2、查看单个文档"><a href="#2、查看单个文档" class="headerlink" title="2、查看单个文档"></a>2、查看单个文档</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /索引名称/_doc/{id}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /lagou-company-index/_doc/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809122434298.png"></p><blockquote><p>文档数据解读</p></blockquote><table><thead><tr><th>元数据项</th><th>含义</th></tr></thead><tbody><tr><td><code>_index</code></td><td><code>document</code>所属<code>index</code></td></tr><tr><td><code>_type</code></td><td><code>document</code>所属<code>type</code>，<code>Elasticsearch7.x</code>默认<code>type</code>为<code>_doc</code></td></tr><tr><td><code>_id</code></td><td>代表<code>document</code>的唯一标识，与<code>index</code>和<code>type</code>一起，可以唯一标识和定位一个<code>document</code></td></tr><tr><td><code>_version</code></td><td><code>document</code>的版本号，<code>Elasticsearch</code>利用<code>_version</code> (版本号)的方式来确保应用中相互冲突的变更不会导致数据丢失。需要修改数据时，需要指定想要修改文档的<code>version</code>号，如果该版本不是当前版本号，请求将会失败</td></tr><tr><td><code>_seq_no</code></td><td>严格递增的顺序号，每个文档一个，Shard级别严格递增，保证后写入的<code>Doc seq_no</code>大于先写入的<code>Doc</code>的<code>seq_no</code></td></tr><tr><td><code>_primary_term</code></td><td><code>primary_term</code>也和<code>seq_n</code>o一样是一个整数，每当<code>Primary Shard</code>发生重新分配时，比如重启，<code>Primary</code>选举等，<code>_primary_term</code>会递增1</td></tr><tr><td><code>found</code></td><td><code>true</code>/<code>false</code>，是否查找到文档</td></tr><tr><td><code>_source</code></td><td>存储原始文档</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809122931282.png"></p><h3 id="3、查看所有文档"><a href="#3、查看所有文档" class="headerlink" title="3、查看所有文档"></a>3、查看所有文档</h3><hr><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名称/_search {     "query":{         "match_all": {         }     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /lagou-company-index/_search {     "query":{         "match_all": {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-source定制返回结果"><a href="#4、-source定制返回结果" class="headerlink" title="4、 _source定制返回结果"></a>4、 <code>_source</code>定制返回结果</h3><hr><blockquote><p>某些业务场景下，我们不需要搜索引擎返回<code>source</code>中的所有字段，可以使用<code>source</code>进行定制，如下，</p><p>多个字段之间使用逗号分隔</p></blockquote><pre class="line-numbers language-http"><code class="language-http">GET /lagou-company-index/_doc/1?_source=name,job<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809123138555.png"></p><h3 id="5、更新文档（全部更新）"><a href="#5、更新文档（全部更新）" class="headerlink" title="5、更新文档（全部更新）"></a>5、更新文档（全部更新）</h3><hr><blockquote><p>把刚才新增的请求方式改为<code>PUT</code>，就是修改了，不过修改必须指定<code>id</code></p><ul><li><code>id</code>对应文档存在，则修改</li><li><code>id</code>对应文档不存在，则新增</li></ul></blockquote><blockquote><p>比如，我们把使用<code>id</code>为4，不存在，则应该是新增</p></blockquote><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">PUT /lagou-company-index/_doc/5{     "name" : "百度",    "job" : "大数据工程师",     "payment" : "300000",     "logo" : "http://www.lgstatic.com/thubnail_120x120/i/image/M00/21/3E/CgpFT1kVdzeAJNbUAABJB7x9sm83 74.png" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>响应</p></blockquote><pre class="line-numbers language-http"><code class="language-http">{     "_index" : "lagou-company-index",     "_type" : "_doc",    "_id" : "3",     "_version" : 1,    "result" : "created",    "_shards" : {        "total" : 2,         "successful" : 1,         "failed" : 0     },    "_seq_no" : 2,    "_primary_term" : 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到是 <code>created</code> ，是新增。</p><p>我们再次执行刚才的请求，不过把数据改一下</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809123434531.png"></p><h3 id="6、更新文档（局部更新）"><a href="#6、更新文档（局部更新）" class="headerlink" title="6、更新文档（局部更新）"></a>6、更新文档（局部更新）</h3><hr><blockquote><p>全部更新：是直接把之前的老数据，标记为删除状态，然后，再添加一条更新的（使用PUT或者POST）</p><p>局部更新：只是修改某个字段（使用POST）</p></blockquote><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名/_update/{id} {     "doc":{         "field":"value"     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /lagou-company-index/_update/3 {     "doc":{         "name":"淘宝"     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809134112902.png"></p><h3 id="7、删除文档"><a href="#7、删除文档" class="headerlink" title="7、删除文档"></a>7、删除文档</h3><hr><blockquote><p>根据<code>id</code>进行删除</p></blockquote><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">DELETE /索引名/_doc/{id}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">DELETE /lagou-company-index/_doc/3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809134244760.png"></p><blockquote><p>可以看到结果是： <code>deleted</code> ，显然是删除数据</p></blockquote><blockquote><p>根据<strong>查询条件</strong>进行删除</p></blockquote><blockquote><p>语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引库名/_delete_by_query {     "query": {         "match": {             "字段名": "搜索关键字"         }     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">#查询name字段百度关键字的docPOST /lagou-company-index/_search {    "query":{         "match":{             "name":"百度"         }     }}#删除name字段百度关键字的doc POST /lagou-company-index/_delete_by_query {     "query":{         "match":{             "name":"百度"         }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果</p></blockquote><pre class="line-numbers language-http"><code class="language-http">{     "took" : 14,     "timed_out" : false,     "total" : 1,    "deleted" : 1,    "batches" : 1,     "version_conflicts" : 0,    "noops" : 0,    "retries" : {        "bulk" : 0,        "search" : 0     },    "throttled_millis" : 0,    "requests_per_second" : -1.0,     "throttled_until_millis" : 0,     "failures" : [ ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除所有文档</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引名/_delete_by_query {    "query": {         "match_all": {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、Query-DSL"><a href="#五、Query-DSL" class="headerlink" title="五、Query DSL"></a>五、<code>Query DSL</code></h2><hr><blockquote><p><code>Elasticsearch</code>提供了基于<code>JSON</code>的完整查询<code>DSL</code>（<code>Domain Specifific Language</code> 特定域的语言）</p><p>来定义查询。将查询<code>DSL</code>视为查询的<code>AST</code>（抽象语法树），它由两种子句组成：</p><ul><li><p>叶子查询子句 叶子查询子句 在特定域中寻找特定的值，如 <code>match</code>，<code>term</code>或 <code>range</code>查询。</p></li><li><p>复合查询子句 复合查询子句包装其他叶子查询或复合查询，并用于以逻辑方式组合多个查询（例如 </p><p><code>bool</code>或<code>dis_max</code>查询），或更改其行为（例如<code> constant_score</code>查询）。</p></li></ul></blockquote><blockquote><p>基本语法</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /索引库名/_search {    "query":{         "查询类型":{             "查询条件":"查询条件值"         }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的<code>query</code>代表一个查询对象，里面可以有不同的查询属性</p><ul><li>查询类型：<ul><li><code>match_all</code> ，<code> match</code> ，<code> term</code> ，<code>range</code>等等</li></ul></li><li>查询条件：查询条件会根据类型的不同，写法也有差异，在后面</li></ul></blockquote><h3 id="1、查询所有"><a href="#1、查询所有" class="headerlink" title="1、查询所有"></a>1、查询所有</h3><hr><blockquote><p>示例</p></blockquote><pre class="line-numbers language-http"><code class="language-http">POST /lagou-company-index/_search {    "query":{         "match_all": {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220809140311223.png"></p><blockquote><ul><li><code>query </code>：代表查询对象</li><li><code>match_all </code>：代表查询所有结果</li><li><code>took</code>：查询花费时间，单位是毫秒</li><li><code>time_out</code>：是否超时</li><li><code>_shards</code>：分片信息</li><li><code>hits</code>：搜索结果总览对象<ul><li><code>total</code>：搜索到的总条数</li><li><code>max_score</code>：所有结果中文档得分的最高分</li><li><code>hits</code>：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息<ul><li><code>_index</code>：索引库</li><li><code>_type</code>：文档类型</li><li><code>_id</code>：文档id</li><li><code>_score</code>：文档得分</li><li><code>_source</code>：文档的源数据</li></ul></li></ul></li></ul></blockquote><h3 id="2、全文搜索"><a href="#2、全文搜索" class="headerlink" title="2、全文搜索"></a>2、全文搜索</h3><hr><blockquote><p>全文搜索能够搜索已分析的文本字段，如电子邮件正文，商品描述等。使用索引期间应用于字段的同一</p><p>分词器处理查询字符串。全文搜索的分类很多 几个典型。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ELK </tag>
            
            <tag> 日志系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK的使用教程</title>
      <link href="/2022/08/07/elk/"/>
      <url>/2022/08/07/elk/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本片文章仅供参考</p></blockquote><h2 id="一、ELK"><a href="#一、ELK" class="headerlink" title="一、ELK"></a>一、<code>ELK</code></h2><hr><h3 id="1、集中式日志系统"><a href="#1、集中式日志系统" class="headerlink" title="1、集中式日志系统"></a>1、集中式日志系统</h3><hr><blockquote><p>日志，对于任何系统来说都是及其重要的组成部分。在计算机系统里面，更是如此。但是由于现在的计</p><p>算机系统大多比较复杂，很多系统都不是在一个地方，甚至都是跨国界的；即使是在一个地方的系统，</p><p>也有不同的来源，比如，操作系统，应用服务，业务逻辑等等。他们都在不停产生各种各样的日志数</p><p>据。根据不完全统计，我们全球每天大约要产生<code> 2EB</code>的数据。</p></blockquote><blockquote><p>面对如此海量的数据，又是分布在各个不同地方，如果我们需要去查找一些重要的信息，难道还是使用</p><p>传统的方法，去登陆到一台台机器上查看？看来传统的工具和方法已经显得非常笨拙和低效了。于是，</p><p>一些聪明人就提出了建立一套集中式的方法，把不同来源的数据集中整合到一个地方。</p></blockquote><blockquote><p>一个完整的集中式日志系统，是离不开以下几个主要特点的:</p><ul><li>收集－能够采集多种来源的日志数据</li><li>传输－能够稳定的把日志数据传输到中央系统</li><li>存储－如何存储日志数据</li><li>分析－可以支持 <code>UI </code>分析</li><li>警告－能够提供错误报告，监控机制</li></ul></blockquote><h3 id="2、ELK-协议栈介绍及体系结构"><a href="#2、ELK-协议栈介绍及体系结构" class="headerlink" title="2、ELK 协议栈介绍及体系结构"></a>2、<code>ELK</code> 协议栈介绍及体系结构</h3><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220807105050470.png"></p><blockquote><p><code>ELK</code> 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，</p><p><code>Elasticsearch</code>（ES），<code>Logstash</code>和<code> Kibana</code>。这三款软件都是开源软件，通常是配合使用，而且</p><p>又先后归于 <code>Elastic.co </code>公司名下，故被简称为<code>ELK</code>协议栈。</p></blockquote><h4 id="2-1、Elasticsearch"><a href="#2-1、Elasticsearch" class="headerlink" title="2.1、Elasticsearch"></a>2.1、<code>Elasticsearch</code></h4><blockquote><p><code>Elasticsearch</code> 是一个实时的分布式搜索和分析引擎，它可以用于全文搜索，结构化搜索以及分</p><p>析。它是一个建立在全文搜索引擎 <code>Apache Lucene</code> 基础上的搜索引擎，使用 <code>Java</code> 语言编写。</p><p><strong>主要特点</strong>:</p><ul><li>实时分析</li><li>分布式实时文件存储，并将每一个字段都编入索引</li><li>文档导向，所有的对象全部是文档</li><li>高可用性，易扩展，支持集群（<code>Cluster</code>）、分片和复制（<code>Shards</code> 和 <code>Replicas</code>）。见图 2 和图 3</li><li>接口友好，支持<code> JSON</code></li></ul></blockquote><h4 id="2-2、Logstash"><a href="#2-2、Logstash" class="headerlink" title="2.2、Logstash"></a>2.2、<code>Logstash</code></h4><blockquote><p><code>Logstash</code> 是一个具有实时渠道能力的数据收集引擎。使用<code>JRuby</code>语言编写。其作者是世界著名的运</p><p>维工程师乔丹西塞 (<code>JordanSissel</code>)。</p><p><strong>主要特点</strong>：</p><ul><li>几乎可以访问任何数据</li><li>可以和多种外部应用结合</li><li>支持弹性扩展  它由三个主要部分组成</li><li><code>Shipper</code>－发送日志数据</li><li><code>Broker</code>－收集数据，缺省内置 <code>Redis</code></li><li><code>Indexer</code>－数据写入</li></ul></blockquote><h4 id="2-3、Kibana"><a href="#2-3、Kibana" class="headerlink" title="2.3、Kibana"></a>2.3、<code>Kibana</code></h4><blockquote><p><code>Kibana</code> 是一款基于 Apache 开源协议，使用<code> JavaScript</code> 语言编写，为 <code>Elasticsearch </code>提供分析和可</p><p>视化的 <code>Web</code> 平台。它可以在 <code>Elasticsearch</code> 的索引中查找，交互数据，并生成各种维度的表图。</p></blockquote><h3 id="3、ELK整体架构"><a href="#3、ELK整体架构" class="headerlink" title="3、ELK整体架构"></a>3、<code>ELK</code>整体架构</h3><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220807105930828.png"></p><h3 id="4、参考文档"><a href="#4、参考文档" class="headerlink" title="4、参考文档"></a>4、参考文档</h3><hr><blockquote><p><code>ELK</code>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p><p><code>ELK</code>官网文档：<a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></p><p><code>ELK</code>中文手册：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p><code>ELK</code>中文社区：<a href="https://elasticsearch.cn/">https://elasticsearch.cn/</a></p><p><code>ELK API</code> :<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/travelansport-client.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/travelansport-client.html</a></p></blockquote><h2 id="二、-Elasticsearch"><a href="#二、-Elasticsearch" class="headerlink" title="二、 Elasticsearch"></a>二、 <code>Elasticsearch</code></h2><hr><h3 id="1、什么是ElasticSearch"><a href="#1、什么是ElasticSearch" class="headerlink" title="1、什么是ElasticSearch"></a>1、什么是<code>ElasticSearch</code></h3><hr><blockquote><p><code>Elasticsearch</code>，简称为<code>es</code>， <code>es</code>是一个开源的高扩展的分布式全文检索引擎，它可以<strong>近乎实时的存</strong></p><p><strong>储、检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。<code>es</code>也使用<code>Java</code>开</p><p>发并使用<code>Lucene</code>作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<code>RESTful </code></p><p><code>API</code>来隐藏<code>Lucene</code>的复杂性，从而让全文搜索变得简单。</p></blockquote><h3 id="2、ElasticSearch使用案例"><a href="#2、ElasticSearch使用案例" class="headerlink" title="2、ElasticSearch使用案例"></a>2、<code>ElasticSearch</code>使用案例</h3><hr><blockquote><ul><li><p>2013年初，<code>GitHub</code>抛弃了<code>Solr</code>，采取<code>ElasticSearch</code> 来做<code>PB</code>级的搜索。 <code>GitHub</code>使用<code>ElasticSearch</code>搜索<code>20TB</code>的数据，包括13亿文件和1300亿行代码</p></li><li><p>维基百科：启动以<code>elasticsearch</code>为基础的核心搜索架构</p></li><li><p><code>SoundCloud</code>：“<code>SoundCloud</code>使用<code>ElasticSearch</code>为1.8亿用户提供即时而精准的音乐搜索服务</p></li><li><p>百度：百度目前广泛使用<code>ElasticSearch</code>作为文本数据分析，采集百度所有服务器上的各类指标数</p><p>据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。</p><p>目前覆盖百度内部20多个业务线（包括<code>casio</code>、云分析、网盟、预测、文库、直达号、钱包、风控</p><p>等），单集群最大100台机器，200个<code>ES</code>节点，每天导入<code>30TB</code>+数据</p></li><li><p>新浪使用<code>ES </code>分析处理32亿条实时日志</p></li><li><p>阿里使用<code>ES</code> 构建自己的日志采集和分析体系</p></li></ul></blockquote><h3 id="3、-ElasticSearch对比Solr"><a href="#3、-ElasticSearch对比Solr" class="headerlink" title="3、 ElasticSearch对比Solr"></a>3、 <code>ElasticSearch</code>对比<code>Solr</code></h3><hr><blockquote><ul><li><p><code>Solr</code> 利用 <code>Zookeeper</code> 进行分布式管理，而 <code>Elasticsearch</code> 自身带有分布式协调管理功能;</p></li><li><p><code>Solr</code> 支持更多格式的数据，而 <code>Elasticsearch</code> 仅支持<code>json</code>文件格式；</p></li><li><p><code>Solr </code>官方提供的功能更多，而 <code>Elasticsearch</code> 本身更注重于核心功能，高级功能多有第三方插</p><p>件提供；</p></li><li><p><code>Solr </code>在传统的搜索应用中表现好于<code> Elasticsearch</code>，但在处理实时搜索应用时效率明显低于 </p><p><code>Elasticsearch</code></p></li></ul></blockquote><h3 id="4、-Elasticsearch-Single-Node-Mode部署"><a href="#4、-Elasticsearch-Single-Node-Mode部署" class="headerlink" title="4、 Elasticsearch Single-Node Mode部署"></a>4、 <code>Elasticsearch Single-Node Mode</code>部署</h3><hr><blockquote><p><code>Elasticsearch</code>是一个分布式全文搜索引擎，支持单节点模式(<code>Single-Node Mode</code>)和集群模式</p><p>(<code>Cluster Mode</code>)部署，一般来说，小公司的业务场景往往使用<code>Single-Node Mode</code>部署即可。先以</p><p><code>Single-Node Mode</code>部署感受下<code>ES</code>，后续搭建分布式集群深入学习。</p></blockquote><h4 id="4-1、虚拟环境准备"><a href="#4-1、虚拟环境准备" class="headerlink" title="4.1、虚拟环境准备"></a>4.1、虚拟环境准备</h4><blockquote><ul><li><p>准备一台虚拟机 =&gt; 操作系统：<code>CentOS 7.x 64 bit</code></p></li><li><p>客户端连接工具：<code>SecureCRT</code></p></li><li><p>关闭虚拟机的防火墙</p><ul><li><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalld.service <span class="token comment" spellcheck="true">#停止</span>firewall systemctl disable firewalld.service <span class="token comment" spellcheck="true">#禁止firewall开机启动 </span>firewall-cmd --state <span class="token comment" spellcheck="true"># 查看防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></blockquote><h4 id="4-2、-Elasticsearch-Single-Node-Mode部署"><a href="#4-2、-Elasticsearch-Single-Node-Mode部署" class="headerlink" title="4.2、 Elasticsearch Single-Node Mode部署"></a>4.2、 <code>Elasticsearch Single-Node Mode</code>部署</h4><blockquote><p> 下载<code>Elasticsearch</code> 地址： <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a> 最新版本</p><p>本课程使用<code>7.3.0</code>版本</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-3-0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选择<code>Linux</code>版本下载：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220807111615515.png"></p><h5 id="4-2-1、上传、解压tar-gz文件"><a href="#4-2-1、上传、解压tar-gz文件" class="headerlink" title="4.2.1、上传、解压tar.gz文件"></a>4.2.1、上传、解压<code>tar.gz</code>文件</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/software <span class="token function">tar</span> -zxvf elasticsearch-7.3.0-linux-x86_64.tar.gz -C <span class="token punctuation">..</span>/servers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-2-2、重命名"><a href="#4-2-2、重命名" class="headerlink" title="4.2.2、重命名"></a>4.2.2、重命名</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token punctuation">..</span>/servers/ <span class="token function">mv</span> elasticsearch-7.3.0/ elasticsearch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-2-3、-配置Elasticsearch"><a href="#4-2-3、-配置Elasticsearch" class="headerlink" title="4.2.3、 配置Elasticsearch"></a>4.2.3、 配置<code>Elasticsearch</code></h5><h6 id="4-2-3-1、编辑elasticsearch-yml"><a href="#4-2-3-1、编辑elasticsearch-yml" class="headerlink" title="4.2.3.1、编辑elasticsearch.yml"></a>4.2.3.1、编辑<code>elasticsearch.yml</code></h6><blockquote><ul><li>单机安装请取消注释：<code>node.name: node-1</code>，否则无法正常启动。</li><li>修改网络和端口，取消注释<code>master</code>节点，单机只保留一个<code>node</code></li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /opt/lagou/servers/elasticsearch/config/elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1 </span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux121 <span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set a custom port for HTTP: </span><span class="token comment" spellcheck="true">#</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200 </span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-2-3-2、按需修改jvm-options内存设置"><a href="#4-2-3-2、按需修改jvm-options内存设置" class="headerlink" title="4.2.3.2、按需修改jvm.options内存设置"></a>4.2.3.2、按需修改<code>jvm.options</code>内存设置</h6><blockquote><p>根据实际情况修改占用内存，默认都是<code>1G</code>，单机<code>1G</code>内存，启动会占用<code>700m+</code>然后在安装<code>kibana</code>后，</p><p>基本上无法运行了，运行了一会就挂了报内存不足。 内存设置超出物理内存，也会无法启动，启动报</p><p>错。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /opt/lagou/servers/elasticsearch/config/jvm.options-Xms2g -Xmx2g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-2-3-3、添加es用户"><a href="#4-2-3-3、添加es用户" class="headerlink" title="4.2.3.3、添加es用户"></a>4.2.3.3、添加<code>es</code>用户</h6><blockquote><p>添加<code>es</code>用户，<code>es</code>默认<code>root</code>用户无法启动，需要改为其他用户</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> estest <span class="token comment" spellcheck="true">#修改密码 </span> <span class="token function">passwd</span> estest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>改变<code>es</code>目录拥有者账号</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R estest /opt/lagou/servers/elasticsearch/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="4-2-3-4、修改-etc-sysctl-conf"><a href="#4-2-3-4、修改-etc-sysctl-conf" class="headerlink" title="4.2.3.4、修改/etc/sysctl.conf"></a>4.2.3.4、修改<code>/etc/sysctl.conf</code></h6><blockquote><p><code>ES</code>因为需要大量的创建索引文件，需要大量的打开系统的文件，所以我们需要解除<code>linux</code>系统当中打</p><p>开文件最大数目的限制，不然<code>ES</code>启动就会抛错</p></blockquote><blockquote><p>修改文件句柄数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>末尾添加：<code>vm.max_map_count=655360</code></p><p>执行<code>sysctl -p</code> 让其生效</p></blockquote><h6 id="4-2-3-5、修改-etc-security-limits-conf"><a href="#4-2-3-5、修改-etc-security-limits-conf" class="headerlink" title="4.2.3.5、修改/etc/security/limits.conf"></a>4.2.3.5、修改<code>/etc/security/limits.conf</code></h6><blockquote><p>修改<code>linux</code>系统对文件描述符的限制级别</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>末尾添加：</p></blockquote><pre class="line-numbers language-pro"><code class="language-pro">* soft nofile 65536 * hard nofile 65536 * soft nproc 4096 * hard nproc 4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-2-3-6、启动ES"><a href="#4-2-3-6、启动ES" class="headerlink" title="4.2.3.6、启动ES"></a>4.2.3.6、启动<code>ES</code></h6><blockquote><p>切换刚刚新建的用户</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> estest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>启动命令</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##清除缓存</span><span class="token keyword">echo</span> 1<span class="token operator">></span>/proc/sys/vm/drop_caches<span class="token keyword">echo</span> 2<span class="token operator">></span>/proc/sys/vm/drop_caches<span class="token keyword">echo</span> 3<span class="token operator">></span>/proc/sys/vm/drop_caches/opt/lagou/servers/elasticsearch/bin/elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-2-3-7、ES测试"><a href="#4-2-3-7、ES测试" class="headerlink" title="4.2.3.7、ES测试"></a>4.2.3.7、<code>ES</code>测试</h6><blockquote><p>配置完成：浏览器访问测试。<code> linux121:9200</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220807112557201.png"></p><h4 id="4-3、简单使用"><a href="#4-3、简单使用" class="headerlink" title="4.3、简单使用"></a>4.3、简单使用</h4><blockquote><p>创建<code>blog01</code>索引</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">curl -XPUT http://linux121:9200/blog01/?pretty<span class="token comment" spellcheck="true">##返回内容</span><span class="token punctuation">{</span>     <span class="token string">"acknowledged"</span> <span class="token keyword">:</span> true,     <span class="token string">"shards_acknowledged"</span> <span class="token keyword">:</span> true,    <span class="token string">"index"</span> <span class="token keyword">:</span> <span class="token string">"blog01"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>插入文档</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">curl -XPUT http://linux121:9200/blog01/article/1?pretty -d <span class="token string">'{"id": "1", "title": "What is lucene"}'</span> -H <span class="token string">"Content-Type: application/json"</span> curl -XPUT http://linux121:9200/blog01/article/2?pretty -d <span class="token string">'{"id": "2", "title": "Apache Spark is a unified analytics engine for large-scale data processing"}'</span> -H <span class="token string">"Content-Type: application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>查询文档</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">curl -XGET http://linux121:9200/blog01/article/1?pretty -H <span class="token string">"Content-Type: application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>更新文档</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">curl -XPUT http://linux121:9200/blog01/article/1?pretty -d <span class="token string">'{"id": "1", "title": " What is elasticsearch"}'</span> -H <span class="token string">"Content-Type: application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>搜索文档</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">curl -XGET <span class="token string">"http://linux121:9200/blog01/article/_search?q=title:'What'&amp;pretty"</span> -H <span class="token string">"Content- Type: application/json"</span> curl -XGET <span class="token string">"http://linux121:9200/blog01/article/_search?q=title:'is'&amp;pretty"</span> -H <span class="token string">"Content- Type: application/json"</span> curl -XGET <span class="token string">"http://linux121:9200/blog01/article/_search?q=title:'elasticsearch'&amp;pretty"</span> -H <span class="token string">"Content-Type: application/json"</span> curl -XGET <span class="token string">"http://linux121:9200/blog01/article/_search?q=title:'unified'&amp;pretty"</span> -H <span class="token string">"Content-Type: application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、ElasticSearch架构图以及基本概念-术语"><a href="#三、ElasticSearch架构图以及基本概念-术语" class="headerlink" title="三、ElasticSearch架构图以及基本概念(术语)"></a>三、<code>ElasticSearch</code>架构图以及基本概念(术语)</h2><hr><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><hr><blockquote><p><code>Elasticsearch</code>是面向文档(<code>document oriented</code>)的，这意味着它可以存储整个对象或文档</p><p>(<code>document</code>)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在</p><p><code>Elasticsearch</code>中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。</p><p><code>Elasticsearch</code>是基于<code>Lucene</code>的全文检索引擎，本质也是存储和检索数据。<code>ES</code>中的很多概念与<code>MySQL</code></p><p>类似 我们可以按照关系型数据库的经验去理解</p></blockquote><table><thead><tr><th>关系型数据库（比如<code>Mysql</code>）</th><th><strong>非关系型数据库（</strong><code>Elasticsearch</code>）</th></tr></thead><tbody><tr><td>数据库<code>Database</code></td><td>索引<code>Index</code></td></tr><tr><td>表<code>Table</code></td><td>索引<code>Index</code>类型（原为<code>Type</code>）</td></tr><tr><td>数据行<code>Row </code></td><td>文档<code>Document</code></td></tr><tr><td>数据列<code>Column</code></td><td>字段<code>Field</code></td></tr><tr><td>约束 <code>Schema</code></td><td>映射<code>Mapping</code></td></tr></tbody></table><h3 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h3><hr><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html#_multi_fifields_2">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html#_multi_fifields_2</a></p></blockquote><blockquote><ol><li><p><strong>索引<code>index</code></strong></p><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个</p><p>产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（<strong>必须全部是小写字母</strong></p><p><strong>的</strong>），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使</p><p>用到这个名字。在一个集群中，可以定义任意多的索引。</p></li><li><p><strong>类型</strong> <code>type</code></p></li></ol><p>   在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语</p><p>   义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个</p><p>   博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，</p><p>   为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。</p><p>   高版本<code>ES</code>中逐渐抛弃了<code>type</code>的概念，会有一个默认的<code>type:_doc</code></p><ol start="3"><li><p><strong>字段</strong><code>Field</code></p><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p></li><li><p><strong>映射</strong> <code>mapping</code></p><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是</p><p>否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫</p><p>做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映</p><p>射才能对性能更好。</p></li><li><p><strong>文档</strong> <code>document</code></p><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以<code>JSON</code>（<code>Javascript Object Notation</code>）格式来表示，而<code>JSON</code>是一个到处存在的互联网数据交互格式。</p><p>在一个<code>index</code>/<code>type</code>里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的<code>type</code>。</p></li><li><p><strong>接近实时</strong> <code>NRT</code></p></li></ol><p>   <code>Elasticsearch</code>是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒以内）</p><ol start="7"><li><p><code>cluster</code></p><ul><li><p>集群（<code>Cluster</code>） 一个<code>Elasticsearch</code>集群由多个节点（<code>Node</code>）组成，每个集群都有一</p><p>个共同的<strong>集群名称</strong>作为标识</p></li><li><p>节点（<code>Node</code>）</p><ul><li><p>一个<code>Elasticsearch</code>实例即一个<code>Node</code>，一台机器可以有多个实例，正常使用下每</p><p>个实例都应该会部署在不同的机器上。<code>Elasticsearch</code>的配置文件中可以通过</p><p><code>node.master</code>、<code>node.data</code>来设置节点类型。</p></li><li><p><code>node.master</code>：表示节点是否具有成为主节点的资格（<code>true</code>代表的是有资格竞选</p><p>主节点，<code>false</code>代表的是没有资格竞选主节点）</p></li><li><p><code>node.data</code>：表示节点是否存储数据</p></li></ul></li><li><p><code>Node</code>节点组合</p><ul><li><p>主节点+数据节点（<code>master</code>+<code>data</code>） 默认</p><ul><li><p>节点既有成为<strong>主节点的资格</strong>，<strong>又存储数据</strong></p><pre class="line-numbers language-bash"><code class="language-bash">node.master: <span class="token boolean">true</span> node.data: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>数据节点（data）</p><p>节点没有成为主节点的资格，不参与选举，只会存储数据</p><pre class="line-numbers language-bash"><code class="language-bash">node.master: <span class="token boolean">false</span> node.data: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>客户端节点（<code>client</code>）</p><p>不会成为主节点，也不会存储数据，主要是针对海量请求的时候可以进行负载均衡</p><pre class="line-numbers language-bash"><code class="language-bash">node.master: <span class="token boolean">false</span> node.data: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>分片</p><p>每个索引有1个或多个分片，每个分片存储不同的数据。分片可分为主分片（<code>primary </code></p><p><code>shard</code>）和复制分片（<code>replica shard</code>），复制分片是主分片的拷贝。默认每个主分片</p><p>有一个复制分片，每个索引的复制分片的数量可以动态地调整，复制分片从不与它的主分片</p><p>在同一个节点上</p></li><li><p>副本</p><p>这里指主分片的副本分片（主分片的拷贝）:</p><pre class="line-numbers language-tex"><code class="language-tex">提高恢复能力：当主分片挂掉时，某个复制分片可以变成主分片；提高性能：get 和 search 请求既可以由主分片又可以由复制分片处理；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><p><strong>注意</strong>：每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制</p><p>了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。<strong>分片和复</strong></p><p><strong>制的数量可以在索引创建</strong>的时候指定。</p><p>在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。默认情</p><p>况下，<code>Elasticsearch</code>中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两</p><p>个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10</p><p>个分片。</p></blockquote><h2 id="四、Elasticsearch集群部署"><a href="#四、Elasticsearch集群部署" class="headerlink" title="四、Elasticsearch集群部署"></a>四、<code>Elasticsearch</code>集群部署</h2><hr><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><hr><h4 id="1-1、-创建用户"><a href="#1-1、-创建用户" class="headerlink" title="1.1、 创建用户"></a>1.1、 创建用户</h4><blockquote><p>创建一个<code>es</code>专门的用户（必须），因为es不能用root用户启动</p><p>使用<code>root</code>用户在三台机器执行以下命令</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> es <span class="token function">mkdir</span> -p /opt/lagou/servers/es <span class="token function">mkdir</span> -p /opt/lagou/servers/data/es <span class="token function">mkdir</span> -p /opt/lagou/servers/logs/es <span class="token function">chown</span> -R es /opt/lagou/servers/es <span class="token function">chown</span> -R es /opt/lagou/servers/data/es <span class="token function">chown</span> -R es /opt/lagou/servers/logs/es <span class="token function">passwd</span> es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2、为es用户添加sudo权限"><a href="#1-2、为es用户添加sudo权限" class="headerlink" title="1.2、为es用户添加sudo权限"></a>1.2、为<code>es</code>用户添加<code>sudo</code>权限</h4><blockquote><p>三台机器使用<code>root</code>用户执行<code>visudo</code>然后为es用户添加权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sudoers<span class="token comment" spellcheck="true">##添加以下内容</span>es ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3、分布式安装部署"><a href="#1-3、分布式安装部署" class="headerlink" title="1.3、分布式安装部署"></a>1.3、分布式安装部署</h4><blockquote><p>关闭所有的会话，重新连接，一定要记得使用es的用户来连接服务器</p></blockquote><h5 id="1-3-1、解压"><a href="#1-3-1、解压" class="headerlink" title="1.3.1、解压"></a>1.3.1、解压</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf elasticsearch-7.3.0-linux-x86_64.tar.gz -C <span class="token punctuation">..</span>/servers/es <span class="token function">cd</span> /opt/lagou/servers/es<span class="token function">mv</span> elasticsearch-7.3.0/ elasticsearch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>修改配置文件：</p><p><code>elasticsearch.yml</code>配置文件说明：</p></blockquote><table><thead><tr><th>配置项</th><th>作用</th></tr></thead><tbody><tr><td><code>cluster.name </code></td><td>集群名称，相同名称为一个集群</td></tr><tr><td><code>node.name</code></td><td>节点名称，集群模式下每个节点名称唯一</td></tr><tr><td><code>node.master</code></td><td>当前节点是否可以被选举为<code>master</code>节点，是：<code>true</code>、否：<code>false</code></td></tr><tr><td><code>node.data</code></td><td>当前节点是否用于存储数据，是：<code>true</code>、否：<code>false</code></td></tr><tr><td><code>path.data</code></td><td>索引数据存放的位置</td></tr><tr><td><code>path.logs</code></td><td>日志文件存放的位置</td></tr><tr><td><code>bootstrap.memory_lock</code></td><td>需求锁住物理内存，是：<code>true</code>、否：<code>false</code></td></tr><tr><td><code>network.host </code></td><td>监听地址，用于访问该es</td></tr><tr><td><code>http.port </code></td><td><code>es</code>对外提供的<code>http</code>端口，默认 9200</td></tr><tr><td><code>transport.port</code></td><td>节点选举的通信端口 默认是9300</td></tr><tr><td><code>discovery.seed_hosts</code></td><td><code>es7.x </code>之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</td></tr><tr><td><code>cluster.initial_master_nodes</code></td><td><code>es7.x</code> 之后新增的配置，初始化一个新的集群时需要此配置来选举<code>master</code></td></tr><tr><td><code>http.cors.enabled</code></td><td>是否支持跨域，是：<code>true</code>，在使用head插件时需要此配置</td></tr><tr><td><code>http.cors.allow-origin</code></td><td>表示支持所有域名</td></tr></tbody></table><blockquote><p>修改配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/elasticsearch/config vim elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 集群名字 </span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> myes <span class="token comment" spellcheck="true">## 集群中当前的节点 </span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> linux121 <span class="token comment" spellcheck="true">## 数据目录 </span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /opt/lagou/servers/data/es <span class="token comment" spellcheck="true"># # 日志目录 </span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /opt/lagou/servers/logs/es<span class="token comment" spellcheck="true"># # 当前主机的ip地址 </span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux121 http.port<span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment" spellcheck="true">#初始化一个新的集群时需要此配置来选举master </span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span><span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#写入候选主节点的设备地址 </span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span> <span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>三台机器修改<code>jvm</code>内存大小</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/elasticsearch/config <span class="token function">vi</span> jvm.options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">-Xms2g -Xmx2g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-3-2、安装包分发到其他两台机器上"><a href="#1-3-2、安装包分发到其他两台机器上" class="headerlink" title="1.3.2、安装包分发到其他两台机器上"></a>1.3.2、安装包分发到其他两台机器上</h5><blockquote><p><code>linux121</code>服务器执行以下命令</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es <span class="token function">scp</span> -r elasticsearch/ linux122:<span class="token variable">$PWD</span> <span class="token function">scp</span> -r elasticsearch/ linux123:<span class="token variable">$PWD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-3、LInux122-Linux-123修改配置文件"><a href="#1-3-3、LInux122-Linux-123修改配置文件" class="headerlink" title="1.3.3、LInux122 Linux 123修改配置文件"></a>1.3.3、<code>LInux122</code> <code>Linux 123</code>修改配置文件</h5><blockquote><p><code>linux122</code>服务器修改配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/elasticsearch/config/ vim elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 集群名字 </span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> myes <span class="token comment" spellcheck="true">## 集群中当前的节点 </span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> linux122 <span class="token comment" spellcheck="true">## 数据目录 </span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /opt/lagou/servers/data/es <span class="token comment" spellcheck="true"># # 日志目录 </span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /opt/lagou/servers/logs/es <span class="token comment" spellcheck="true"># # 当前主机的ip地址 </span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux122 http.port<span class="token punctuation">:</span> <span class="token number">9200 </span><span class="token comment" spellcheck="true">#初始化一个新的集群时需要此配置来选举master </span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span><span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#写入候选主节点的设备地址 </span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span> <span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>linux123</code>服务器修改配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/es/elasticsearch/config/ vim elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 集群名字 </span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> myes <span class="token comment" spellcheck="true">## 集群中当前的节点 </span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> linux123 <span class="token comment" spellcheck="true">## 数据目录</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /opt/lagou/servers/data/es <span class="token comment" spellcheck="true"># # 日志目录 </span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /opt/lagou/servers/logs/es <span class="token comment" spellcheck="true"># # 当前主机的ip地址 </span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux123 http.port<span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment" spellcheck="true">#初始化一个新的集群时需要此配置来选举master</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span><span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#写入候选主节点的设备地址 </span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux121"</span><span class="token punctuation">,</span> <span class="token string">"linux122"</span><span class="token punctuation">,</span><span class="token string">"linux123"</span><span class="token punctuation">]</span> <span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> true http.cors.allow<span class="token punctuation">-</span><span class="token key atrule">origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-4、修改三台机器-etc-sysctl-conf"><a href="#1-3-4、修改三台机器-etc-sysctl-conf" class="headerlink" title="1.3.4、修改三台机器/etc/sysctl.conf"></a>1.3.4、修改三台机器<code>/etc/sysctl.conf</code></h5><blockquote><p><code>ES</code>因为需要大量的创建索引文件，需要大量的打开系统的文件，所以我们需要解除<code>linux</code>系统当中打</p><p>开文件最大数目的限制，不然<code>ES</code>启动就会抛错</p></blockquote><blockquote><p>修改文件句柄数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>末尾添加：<code>vm.max_map_count=655360</code></p><p>执行<code>sysctl -p</code> 让其生效</p></blockquote><h5 id="1-3-5、修改三台机器-etc-security-limits-conf"><a href="#1-3-5、修改三台机器-etc-security-limits-conf" class="headerlink" title="1.3.5、修改三台机器/etc/security/limits.conf"></a>1.3.5、修改三台机器<code>/etc/security/limits.conf</code></h5><blockquote><p>修改<code>linux</code>系统对文件描述符的限制级别</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>末尾添加：</p></blockquote><pre class="line-numbers language-pro"><code class="language-pro">* soft nofile 65536 * hard nofile 65536 * soft nproc 4096 * hard nproc 4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、启动ES服务"><a href="#2、启动ES服务" class="headerlink" title="2、启动ES服务"></a>2、启动<code>ES</code>服务</h3><hr><h4 id="2-1、启动"><a href="#2-1、启动" class="headerlink" title="2.1、启动"></a>2.1、启动</h4><blockquote><p>这里是后台启动，要发现错误的话，去<code>/opt/lagou/servers/logs/es</code>目录下查看。</p><p>三台机器均执行</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> /opt/lagou/servers/es/elasticsearch/bin/elasticsearch <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2、测试访问ES"><a href="#2-2、测试访问ES" class="headerlink" title="2.2、测试访问ES"></a>2.2、测试访问<code>ES</code></h4><blockquote><p>在Google Chrome浏览器中，访问以下地址</p><p><a href="http://linux121:9200/?pretty">http://linux121:9200/?pretty</a></p><p><a href="http://linux122:9200/?pretty">http://linux122:9200/?pretty</a></p><p><a href="http://linux123:9200/?pretty">http://linux123:9200/?pretty</a></p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"linux12?"</span><span class="token punctuation">,</span>     <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"myes"</span><span class="token punctuation">,</span>     <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"3nUDlA_hTjaiZQfBqygrLQ"</span><span class="token punctuation">,</span>     <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.3.0"</span><span class="token punctuation">,</span>         <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>         <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>        <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"de777fa"</span><span class="token punctuation">,</span>        <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2019-07-24T18:30:11.767338Z"</span><span class="token punctuation">,</span>        <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.1.0"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>         <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3、安装elasticsearch-head插件"><a href="#2-3、安装elasticsearch-head插件" class="headerlink" title="2.3、安装elasticsearch-head插件"></a>2.3、安装<code>elasticsearch-head</code>插件</h4><blockquote><p><strong>谷歌浏览其插件方式安装</strong></p><p><code>Chrome</code>插件安装地址</p></blockquote><pre class="line-numbers language-tex"><code class="language-tex">https://chrome.google.com/webstore/detail/elasticsearch- head/ffmkiejjmecolpfloofpjologoblkegm/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808141811419.png"></p><blockquote><p>添加完成后可以从以下地方找到扩展程序</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808141828783.png"></p><h2 id="五、安装配置kibana"><a href="#五、安装配置kibana" class="headerlink" title="五、安装配置kibana"></a>五、<strong>安装配置</strong><code>kibana</code></h2><hr><blockquote><p>什么是<code>Kibana</code>?</p><p><code>Kibana</code>是一个基于<code>Node.js</code>的<code>Elasticsearch</code>索引库数据统计工具，可以利用<code>Elasticsearch</code>的聚</p><p>合功能，生成各种图表，如柱形图，线状图，饼图等。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808142724396.png"></p><h3 id="1、下载Kibana"><a href="#1、下载Kibana" class="headerlink" title="1、下载Kibana"></a>1、下载<code>Kibana</code></h3><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808142855781.png"></p><h3 id="2、安装kibana"><a href="#2、安装kibana" class="headerlink" title="2、安装kibana"></a>2、安装<code>kibana</code></h3><hr><blockquote><p><code>root</code>账户下操作！！</p><p>上传到<code>linux121</code>服务器</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/software/ <span class="token function">tar</span> -zxvf kibana-7.3.0-linux-x86_64.tar.gz -C <span class="token punctuation">..</span>/servers/ <span class="token function">cd</span> <span class="token punctuation">..</span>/servers/ <span class="token function">mv</span> kibana-7.3.0-linux-x86_64/ kibana/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>改变<code>kibana</code>目录拥有者账号</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R es /opt/lagou/servers/kibana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>设置访问权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> -R 777 /opt/lagou/servers/kibana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>修改配置文件</strong> </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim /opt/lagou/servers/kibana/config/kibana.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改端口，访问<code>ip</code>,<code>elasticsearch</code>服务器<code>ip</code></p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server.port</span><span class="token punctuation">:</span> 5601 s<span class="token key atrule">erver.host</span><span class="token punctuation">:</span> <span class="token string">"linux121"</span> <span class="token comment" spellcheck="true"># The URLs of the Elasticsearch instances to use for all your queries. elasticsearch.hosts: ["http://linux121:9200","http://linux122:9200","http://linux123:9200"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>配置完成启动：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##切换用户 </span><span class="token function">su</span> es<span class="token function">cd</span> /opt/lagou/servers/kibana/ /bin/kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808143402994.png"></p><blockquote><p>没有<code>error</code>错误启动成功</p><p>访问<code>linux121:5601</code>，即可看到安装成功</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808143435093.png"></p><h3 id="3、kidbana使用页面"><a href="#3、kidbana使用页面" class="headerlink" title="3、kidbana使用页面"></a>3、<code>kidbana</code>使用页面</h3><hr><blockquote><p>选择左侧的<code>DevTools</code>菜单，即可进入控制台页面：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808144708358.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808144725488.png"></p><blockquote><p>在页面右侧，我们就可以输入请求，访问<code>Elasticsearch</code>了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/elk/image-20220808144745327.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ELK </tag>
            
            <tag> 日志系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gifts detail</title>
      <link href="/2022/08/05/gifts/"/>
      <url>/2022/08/05/gifts/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><h2 id="一、公司"><a href="#一、公司" class="headerlink" title="一、公司"></a>一、公司</h2><h3 id="1、同方"><a href="#1、同方" class="headerlink" title="1、同方"></a>1、同方</h3><hr><table><thead><tr><th>姓名</th><th>事项</th><th>金额</th><th>时间</th></tr></thead><tbody><tr><td>王银川</td><td>结婚</td><td>300</td><td></td></tr><tr><td>杜云超</td><td>结婚</td><td>200</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="2、朝阳银行"><a href="#2、朝阳银行" class="headerlink" title="2、朝阳银行"></a>2、朝阳银行</h3><hr><table><thead><tr><th>姓名</th><th>事项</th><th>金额</th><th>时间</th></tr></thead><tbody><tr><td>赵占丛</td><td>结婚</td><td>300</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="二、朋友"><a href="#二、朋友" class="headerlink" title="二、朋友"></a>二、朋友</h2><hr><table><thead><tr><th>姓名</th><th>事项</th><th>金额</th><th>时间</th></tr></thead><tbody><tr><td>吴爽</td><td>结婚</td><td>500</td><td></td></tr><tr><td>吴爽</td><td>孩子百天</td><td>500</td><td></td></tr><tr><td>刘威</td><td>结婚</td><td>500</td><td>20220805</td></tr><tr><td>大新</td><td>结婚</td><td>500</td><td>20230507</td></tr><tr><td>吴民杰</td><td>买楼</td><td>300</td><td>20230518</td></tr><tr><td>王楠</td><td>结婚</td><td>1000</td><td>20230518</td></tr></tbody></table><p><a href="https://api.github.com/users/hcs-21/events/public">https://api.github.com/users/hcs-21/events/public</a></p>]]></content>
      
      
      <categories>
          
          <category> person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> person </tag>
            
            <tag> gifts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid的使用教程</title>
      <link href="/2022/08/05/druid/"/>
      <url>/2022/08/05/druid/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本片文章仅供参考</p></blockquote><h2 id="一、Apache-Druid-简介及架构"><a href="#一、Apache-Druid-简介及架构" class="headerlink" title="一、Apache Druid 简介及架构"></a>一、<code>Apache Druid </code>简介及架构</h2><hr><h3 id="1、Druid-概述"><a href="#1、Druid-概述" class="headerlink" title="1、Druid 概述"></a>1、Druid 概述</h3><hr><h4 id="1-1、什么是Druid"><a href="#1-1、什么是Druid" class="headerlink" title="1.1、什么是Druid"></a>1.1、什么是<code>Druid</code></h4><blockquote><p>数据分析的基础架构可以分为以下几类：</p><ul><li><p>使用<code>Hadoop</code>/<code>Spark</code>进行分析</p></li><li><p>将<code>Hadoop</code>/<code>Spark</code>的结果导入 <code>RDBMS</code> 中提供数据分析</p></li><li><p>将结果保存到容量更大的 <code>NoSQL</code> 数据库中，解决数据分析的存储瓶颈，例如：<code>HBase</code></p></li><li><p>将数据源进行流式处理，对接流式计算框架（如<code>Storm</code>、<code>Spark</code>、<code>Flink</code>），结果保存到 <code>RDBMS</code>或</p><p><code>NoSQL</code>中</p></li><li><p>将数据源进行流式处理，对接分析数据库，例如：<code>Druid</code></p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805092522768.png"></p><blockquote><p><code>Druid</code> 是 <code>Metamarkets</code> 公司（一家为在线媒体或广告公司提供数据分析服务的公司）推出的一个分布</p><p>式内存实时分析系统，用于解决<strong>如何在大规模数据集下进行快速的、交互式的查询和分析</strong>。</p></blockquote><blockquote><p><code>Druid</code> 是一个开源的<strong>数据分析引擎工具</strong>，为实时和历史数据的次秒级（多于一秒）查询设计。主要应用</p><p>于对数据的<code>OLAP</code>查询，<code>Druid</code> 提供低延迟（实时）的数据摄取、灵活的数据探索、快速的数据聚合。</p><p>现有的 <code>Druid</code> 部署已支持扩展到数万亿时间和 <code>PB</code> 级数据。</p></blockquote><h4 id="1-2、与其他OLAP技术对比"><a href="#1-2、与其他OLAP技术对比" class="headerlink" title="1.2、与其他OLAP技术对比"></a>1.2、与其他<code>OLAP</code>技术对比</h4><table><thead><tr><th></th><th>Druid</th><th>Kylin</th><th>ES</th><th>SparkSql</th><th>ClickHouse</th></tr></thead><tbody><tr><td>数据规模</td><td>超大</td><td>超大</td><td>中等</td><td>超大</td><td>中</td></tr><tr><td>查询效率</td><td>高</td><td>高</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>并发度</td><td>高</td><td>高</td><td>高</td><td>低</td><td>中</td></tr><tr><td>灵活性</td><td>中</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>SQL支持</td><td>中</td><td>高</td><td>中</td><td>高</td><td>高</td></tr></tbody></table><h4 id="1-3、技术特点"><a href="#1-3、技术特点" class="headerlink" title="1.3、技术特点"></a>1.3、技术特点</h4><blockquote><p><code>Apache Druid</code>是一个<strong>开源的</strong>、<strong>分布式</strong>、<strong>实时OLAP分析工具</strong>。<code>Druid</code>的核心设计结合了<strong>数据仓库</strong>、<strong>时间</strong></p><p><strong>序列数据库</strong>和<strong>搜索系统的思想</strong>，适用于多种场景的高性能数据实时分析。<code>Druid</code>将这三个系统中的每</p><p>个系统的关键特征合并到其接收层、存储格式、查询层和核心体系结构中。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805102955342.png"></p><blockquote><p><strong>时间序列数据库</strong>主要用于指处理，带时间标签（按照时间的顺序变化）的数据，带时间标签的数据</p><p>也称为时间序列数据。</p><p><strong>时间序列数据</strong>主要由电力行业、化工行业等各类型实时监测、检查与分析设备所采集、产生的数</p><p>据，这些工业数据的典型特点是：<strong>产生频率快</strong>（每一个监测点一秒钟内可产生多条数据）、<strong>严重依赖于</strong></p><p><strong>采集时间</strong>（每一条数据均要求对应唯一的时间）、<strong>测点多信息量大</strong>（常规的实时监测系统均有成千上万</p><p>的监测点，<strong>监测点每秒钟都产生数据</strong>，每天产生几十GB的数据量）。</p></blockquote><h5 id="1-3-1、主要特点"><a href="#1-3-1、主要特点" class="headerlink" title="1.3.1、主要特点"></a>1.3.1、主要特点</h5><ul><li><p><strong>列式存储</strong></p><p><code>Druid </code>独立的存储和压缩每一列，只需要读取特定查询所需的内容，这可以支持快速扫描、排名和聚合</p></li><li><p><strong>流式和批量摄取</strong>(<code>Ingestion</code>)</p><p>支持 <code>Apache Kafka</code>、<code>HDFS</code>、<code>AWS S3</code>、<code>stream processors</code> 等现成连接器</p></li><li><p><strong>本地的搜索索引</strong></p><p><code>Druid</code> 为字符串创建倒排索引，以支持快速搜索和排序</p></li><li><p><strong>灵活的</strong> <code>schema</code></p><p><code>Druid</code> 可以处理变化的 <code>schema</code> 和嵌套数据</p></li><li><p><strong>基于时间优化</strong> <code>partition</code></p><p><code>Druid </code>基于时间智能的对数据进行分区，基于时间的查询比传统数据库要快得多</p></li><li><p><strong>支持</strong> <code>SQL</code></p><p><code>Druid</code> 支持本机的 <code>JSON</code> 语言，还支持基于 <code>HTTP</code> 或者 <code>JDBC</code> 的 <code>SQL</code></p></li><li><p><strong>水平扩展性</strong></p><p><code>Druid</code> 已经用户生产环境中，每秒接收数百万个事件，保存多年的数据并提供次秒级查询</p></li><li><p><strong>操作简单</strong></p><p>只需要增加或删除服务器即可扩展或缩小规模，<code>Druid </code>会自动平衡，容错架构通过服务器的故障进行路由</p></li></ul><h5 id="1-3-2、集成"><a href="#1-3-2、集成" class="headerlink" title="1.3.2、集成"></a>1.3.2、集成</h5><blockquote><p><code>Druid</code>是开源大数据技术的补充，包括<code>Apache Kafka</code>，<code>Apache Hadoop</code>，<code>Apache Flink</code>等，通常位</p><p>于存储或处理层与最终应用之间，充当查询层或数据分析服务。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805103540604.png"></p><h5 id="1-3-3、Ingestion（摄取）"><a href="#1-3-3、Ingestion（摄取）" class="headerlink" title="1.3.3、Ingestion（摄取）"></a>1.3.3、<code>Ingestion</code><strong>（摄取）</strong></h5><blockquote><p><code>Druid</code>支持<strong>流式传输</strong>和<strong>批量摄取</strong>。<code>Druid</code>连接到数据源，包括：<code>Kafka</code>（用于流数据加载），或分布式</p><p>文件系统，如<code>HDFS</code>（用于批处理数据加载）。</p><p><code>Druid</code>在 “索引” 过程中<strong>将数据源中的原始数据转换为支持高效读取的优化格式</strong>（<code>Segment</code>，段）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805103713641.png"></p><h5 id="1-3-4、存储"><a href="#1-3-4、存储" class="headerlink" title="1.3.4、存储"></a>1.3.4、存储</h5><blockquote><p><code>Druid</code>的数据存储采用列式存储格式。根据列的类型（字符串，数字等），应用不同的压缩和编码方</p><p>法，根据列类型构建不同类型的索引。</p></blockquote><blockquote><p><code>Druid</code>为字符串列构建倒排索引，以进行快速搜索和过滤。<code>Druid</code>可按时间对数据进行智能分区，以</p><p>实现面向时间的快速查询。</p></blockquote><blockquote><p><code>Druid</code>在摄取数据时对数据进行预聚合，节省大量存储空间。</p></blockquote><h5 id="1-3-5、查询方式"><a href="#1-3-5、查询方式" class="headerlink" title="1.3.5、查询方式"></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805105207860.png">1.3.5、查询方式</h5><blockquote><p><code>Druid</code>支持<code>JSON</code>、<code>SQL</code>两种方式查询数据。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805105331149.png"></p><h3 id="1-4、应用场景"><a href="#1-4、应用场景" class="headerlink" title="1.4、应用场景"></a>1.4、应用场景</h3><h5 id="1-4-1、Druid擅长的部分"><a href="#1-4-1、Druid擅长的部分" class="headerlink" title="1.4.1、Druid擅长的部分"></a>1.4.1、Druid擅长的部分</h5><blockquote><ul><li>对于大部分查询场景可以亚秒级响应</li><li>事件流实时写入与批量数据导入兼备</li><li>数据写入前预聚合节省存储空间，提升查询效率</li><li>水平扩容能力强</li><li>社区活跃</li></ul></blockquote><h5 id="1-4-2、是否需要使用Druid"><a href="#1-4-2、是否需要使用Druid" class="headerlink" title="1.4.2、是否需要使用Druid"></a>1.4.2、是否需要使用<code>Druid</code></h5><blockquote><ul><li>处理时间序列事件</li><li>快速的聚合以及探索式分析</li><li>近实时分析亚秒级响应</li><li>存储大量(<code>TB</code>级、<code>PB</code>级)可以预先定义若干维度的事件</li><li>无单点问题的数据存储</li></ul></blockquote><h2 id="2、体系架构"><a href="#2、体系架构" class="headerlink" title="2、体系架构"></a>2、体系架构</h2><hr><h3 id="2-1、进程和服务"><a href="#2-1、进程和服务" class="headerlink" title="2.1、进程和服务"></a>2.1、进程和服务</h3><blockquote><ul><li><p><strong><code>Coordinator</code></strong> 进程<strong>管理群集上的数据可用性</strong>。从<code>metastore</code>中读取<code>Segment</code>的元数据，并决定哪</p><p>些<code>Segments</code>需要被加载到集群中。使用<code>ZooKeeper</code>查看已经存在的历史节点，了解集群各个节点负</p><p>载情况。创建一个ZK的条目告诉历史节点加载、删除、或者移动<code>Segments</code></p></li><li><p><strong>Overlord</strong> 进程控制数据提取工作负载的分配</p></li><li><p><strong>Historical</strong> 进程存储可查询数据。提供对<code>Segment</code>的数据查询服务。与<code>ZooKeeper</code>通信，上报节点</p><p>信息，告知ZK自己拥有哪些<code>Segments</code>。从<code>ZooKeeper</code>中获取执行任务</p></li><li><p><strong>MiddleManager</strong> 进程负责提取数据</p></li><li><p><strong>Broker</strong> 进程处理来自外部客户端的查询。负责将查询请求分发到历史节点和实时节点,并聚合这些节</p><p>点返回的查询结果数据。<code>Broker</code>节点通过<code>zooeeper</code>知道<code>Segment</code>都存放在哪些节点上</p></li><li><p><strong>Router</strong> 进程是可选的进程，可以将请求路由到<code>Broker</code>、<code>Coordinator</code>、<code>Overlords</code></p></li></ul></blockquote><blockquote><p>根据线程的服务类型分为：</p><ul><li><strong>Master</strong>：<code>Coordinator</code> &amp; <code>Overload</code> 进程，<strong>管理数据可用性和数据摄取</strong></li><li><strong>Data</strong>：<code>Historical &amp; MiddleManager</code>，<strong>执行提取工作负载并存储所有可查询数据</strong></li><li><strong>Query</strong>：<code>Broker</code> &amp; <code>Router</code>，<strong>处理来自外部客户端的查询</strong></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805115054727.png"></p><h3 id="2-2、外部依赖"><a href="#2-2、外部依赖" class="headerlink" title="2.2、外部依赖"></a>2.2、外部依赖</h3><ul><li><code>Deep Storage</code>：深度存储，例如<code>HDFS</code>或者<code>S3</code>。不是用来存储查询数据的。而是作为数据的备份或者进程间数据交换</li><li><code>Metadata Storage</code>：元数据存储，可以用<code>RDBMS</code></li><li><code>ZooKeeper</code>：服务发现、leader选举、服务协调</li></ul><h1 id="二、Druid部署"><a href="#二、Druid部署" class="headerlink" title="二、Druid部署"></a>二、<code>Druid</code>部署</h1><hr><blockquote><p><code>Druid官网</code>：<a href="https://druid.apache.org/">https://druid.apache.org/</a></p><p>下载 <code>Druid</code> 安装包、并解压缩：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/software <span class="token function">wget</span> http://apache.communilink.net/druid/0.19.0/apache-druid-0.19.0-bin.tar.gz <span class="token function">tar</span> -zxvf apache-druid-0.19.0-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看主目录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805115419071.png"></p><pre class="line-numbers language-bash"><code class="language-bash">tree -L 1 ./ ./├── bin 运行相关脚本文件 ├── conf 生产环境配置文件├── extensions 各种jar包，第三方扩展 ├── hadoop-dependencies hadoop相关依赖 ├── lib Druid所有核心软件包├── LICENSE 许可证 ├── licenses ├── NOTICE 对快速入门很有用帮助的文档├── quickstart 单机测试部署用到的配置及数据 ├── README └── var 启动时生成文件，数据文件在这里了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、单服务器部署"><a href="#1、单服务器部署" class="headerlink" title="1、单服务器部署"></a>1、单服务器部署</h3><hr><blockquote><p>单服务器部署的配置文件：</p></blockquote><pre><code>conf/druid/single-server/ ├── large ├── medium ├── micro-quickstart ├── nano-quickstart ├── small └── xlarge</code></pre><blockquote><p>但服务器参考配置</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Nano-Quickstart：1个CPU，4GB RAM     启动命令:bin/start-nano-quickstart     配置目录： conf/druid/single-server/nano-quickstart/* 微型快速入门：4个CPU，16GB RAM     启动命令： bin/start-micro-quickstart    配置目录： conf/druid/single-server/micro-quickstart/* 小型：8 CPU，64GB RAM（〜i3.2xlarge）     启动命令： bin/start-small     配置目录： conf/druid/single-server/small/* 中：16 CPU，128GB RAM（〜i3.4xlarge）    启动命令： bin/start-medium     配置目录： conf/druid/single-server/medium/* 大型：32 CPU，256GB RAM（〜i3.8xlarge）     启动命令： bin/start-large     配置目录： conf/druid/single-server/large/* 大型X：64 CPU，512GB RAM（〜i3.16xlarge）    启动命令： bin/start-xlarge     配置目录： conf/druid/single-server/xlarge/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动<code>Druid</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">./bin/start-nano-quickstart start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805142259586.png"></p><blockquote><p>登录界面 ：<a href="http://linux121:8888/%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2">http://linux121:8888/查看页面</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805142336720.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805142412372.png"></p><blockquote><p>使用<code>jps</code>可以看见启动了很多服务：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805142433622.png"></p><h3 id="2、集群部署"><a href="#2、集群部署" class="headerlink" title="2、集群部署"></a>2、集群部署</h3><hr><h3 id="2-1、部署规化"><a href="#2-1、部署规化" class="headerlink" title="2.1、部署规化"></a>2.1、部署规化</h3><blockquote><ul><li>主节点部署 <code>Coordinator</code> 和 <code>Overlord</code>进程</li><li>数据节点运行<code> Historical</code> 和 <code>MiddleManager</code>进程</li><li>查询节点 部署 <code>Broker</code> 和<code> Router</code> 进程</li></ul></blockquote><table><thead><tr><th>主机</th><th><code>Druid</code>服务</th><th>其他服务</th></tr></thead><tbody><tr><td>linux121</td><td><code>Coordinator</code> 和 <code>Overlord</code></td><td>Zookeeper、Kafka</td></tr><tr><td>linux122</td><td><code> Historical</code> 和 <code>MiddleManager</code></td><td>Zookeeper、Kafka</td></tr><tr><td>linux123</td><td><code>Broker</code> 和<code> Router</code></td><td>Zookeeper、Kafka、MySql</td></tr></tbody></table><blockquote><p>虚拟机每个节点<code>2core</code>、<code>3G</code></p><p><code>DeepStorage</code>：<code>Hadoop 2.9.2</code></p></blockquote><h3 id="2-2、设置环境变量"><a href="#2-2、设置环境变量" class="headerlink" title="2.2、设置环境变量"></a>2.2、设置环境变量</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile <span class="token comment" spellcheck="true"># 在文件中增加以下内容 </span><span class="token function">export</span> DRUID_HOME<span class="token operator">=</span>/opt/lagou/servers/druid-0.19.0 <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$DRUID_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、MySQL中创建相关数据库"><a href="#2-3、MySQL中创建相关数据库" class="headerlink" title="2.3、MySQL中创建相关数据库"></a>2.3、<code>MySQ</code>L中创建相关数据库</h3><blockquote><p>使用 <code>root</code> 账号登录<code>MySQL</code>，<code> mysql -uroot -p12345678</code> </p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> druid <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER SET</span> utf8mb4<span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'druid'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">12345678</span><span class="token string">'; GRANT ALL PRIVILEGES ON druid.* TO '</span>druid<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- ERROR 1819 (HY000): Your password does not satisfy the current policy requirements </span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4、配置Druid参数"><a href="#2-4、配置Druid参数" class="headerlink" title="2.4、配置Druid参数"></a>2.4、配置<code>Druid</code>参数</h3><blockquote><p>将<code>hadoop</code>配置文件<code>core-site.xml</code>、<code>hdfs-site.xml</code>、<code>yarn-site.xml</code>、`mapred-site.xml链接到</p><p><code>conf/druid/cluster/_common/</code> 下</p></blockquote><pre class="line-numbers language-bass"><code class="language-bass">cd /opt/lagou/servers/druid-0.19.0/conf/druid/cluster/_common ln -s $HADOOP_HOME/etc/hadoop/core-site.xml core-site.xml ln -s $HADOOP_HOME/etc/hadoop/hdfs-site.xml hdfs-site.xml ln -s $HADOOP_HOME/etc/hadoop/yarn-site.xml yarn-site.xml ln -s $HADOOP_HOME/etc/hadoop/mapred-site.xml mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将<code>MySQL</code>的驱动程序，链接到<code> **$DRUID_HOME/extensions/mysql-metadata-storage/</code>下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -s <span class="token variable">$HIVE_HOME</span>/lib/mysql-connector-java-5.1.46.jar mysql-connector-java-5.1.46.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改配置文件(<code>$DRUID_HOME/conf/druid/cluster/_common/common.runtime.properties</code>)</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 增加"mysql-metadata-storage" </span><span class="token attr-name">druid.extensions.loadList</span><span class="token punctuation">=</span><span class="token attr-value">["mysql-metadata-storage", "druid-hdfs-storage", "druid-kafka- indexing-service", "druid-datasketches"] </span><span class="token comment" spellcheck="true"># 每台机器写自己的ip或hostname </span><span class="token attr-name">druid.host</span><span class="token punctuation">=</span><span class="token attr-value">linux121 </span><span class="token comment" spellcheck="true"># 填写zk地址 </span><span class="token attr-name">druid.zk.service.host</span><span class="token punctuation">=</span><span class="token attr-value">linux121:2181,linux122:2181,linux123:2181 druid.zk.paths.base=/druid </span><span class="token comment" spellcheck="true"># 注释掉前面 derby 的配置</span><span class="token comment" spellcheck="true"># 增加 mysql 的配置 </span><span class="token attr-name">druid.metadata.storage.type</span><span class="token punctuation">=</span><span class="token attr-value">mysql druid.metadata.storage.connector.connectURI=jdbc:mysql://linux123:3306/druid druid.metadata.storage.connector.user=druid druid.metadata.storage.connector.password=12345678 </span><span class="token comment" spellcheck="true"># 注释掉local的配置 </span><span class="token comment" spellcheck="true"># 增加HDFS的配置，即使用HDFS作为深度存储 </span><span class="token attr-name">druid.storage.type</span><span class="token punctuation">=</span><span class="token attr-value">hdfs </span><span class="token attr-name">druid.storage.storageDirectory</span><span class="token punctuation">=</span><span class="token attr-value">/druid/segments </span><span class="token comment" spellcheck="true"># 注释掉 indexer.logs For local disk的配置</span><span class="token comment" spellcheck="true"># 增加 indexer.logs For HDFS 的配置 </span><span class="token attr-name">druid.indexer.logs.type</span><span class="token punctuation">=</span><span class="token attr-value">hdfs </span><span class="token attr-name">druid.indexer.logs.directory</span><span class="token punctuation">=</span><span class="token attr-value">/druid/indexing-logs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-1、配置主节点参数"><a href="#2-4-1、配置主节点参数" class="headerlink" title="2.4.1、配置主节点参数"></a>2.4.1、配置主节点参数</h4><blockquote><p>配置主节点文件(<strong>参数大小根据实际情况配置</strong>) </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$DRUID_HOME</span>/conf/druid/cluster/master/coordinator-overlord/jvm.config-server -Xms512m-Xmx512m -XX:+ExitOnOutOfMemoryError -XX:+UseG1GC -Duser.timezone<span class="token operator">=</span>UTC+8 -Dfile.encoding<span class="token operator">=</span>UTF-8 -Djava.io.tmpdir<span class="token operator">=</span>var/tmp -Djava.util.logging.manager<span class="token operator">=</span>org.apache.logging.log4j.jul.LogManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2、配置数据节点参数"><a href="#2-4-2、配置数据节点参数" class="headerlink" title="2.4.2、配置数据节点参数"></a>2.4.2、配置数据节点参数</h4><blockquote><p>配置数据节点文件(<strong>参数大小根据实际情况配置</strong>)</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$DRUID_HOME</span>/conf/druid/cluster/data/historical/jvm.config-server -Xms512m -Xmx512m -XX:MaxDirectMemorySize<span class="token operator">=</span>1g -XX:+ExitOnOutOfMemoryError -Duser.timezone<span class="token operator">=</span>UTC+8 -Dfile.encoding<span class="token operator">=</span>UTF-8 -Djava.io.tmpdir<span class="token operator">=</span>var/tmp -Djava.util.logging.manager<span class="token operator">=</span>org.apache.logging.log4j.jul.LogManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$DRUID_HOME</span>/conf/druid/cluster/data/historical/runtime.properties<span class="token comment" spellcheck="true"># 修改这一个参数 </span>druid.processing.buffer.sizeBytes<span class="token operator">=</span>50000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>备注：</strong><code>druid.processing.buffffer.sizeBytes</code> 每个查询用于聚合的堆外哈希表的大小</p><p><code>maxDirectMemory</code>= </p><p><code>druid.processing.buffffer.sizeBytes</code> * (<code>druid.processing.numMergeBuffffers</code> +</p><p><code>druid.processing.numThreads</code> + 1)</p><p>如果 <code>druid.processing.buffffer.sizeBytes</code> 太大，那么需要加大<code>maxDirectMemory</code>，否则 </p><p><code>historical </code>服务无法启动</p></blockquote><pre class="line-numbers language-ba"><code class="language-ba">cd $DRUID_HOME/conf/druid/cluster/data/middleManager/jvm.config-server -Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError -Duser.timezone=UTC+8 -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3、配置查询节点的参数"><a href="#2-4-3、配置查询节点的参数" class="headerlink" title="2.4.3、配置查询节点的参数"></a>2.4.3、配置查询节点的参数</h4><blockquote><p>配置查询节点文件(<strong>参数大小根据实际情况配置</strong>)</p></blockquote><pre class="line-numbers language-bas"><code class="language-bas">cd $DRUID_HOME/conf/druid/cluster/query/broker/jvm.config-server -Xms512m -Xmx512m -XX:MaxDirectMemorySize=512m -XX:+ExitOnOutOfMemoryError -Duser.timezone=UTC+8 -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$DRUID_HOME</span>/conf/druid/cluster/query/broker/runtime.properties<span class="token comment" spellcheck="true"># 修改这一个参数 </span>druid.processing.buffer.sizeBytes<span class="token operator">=</span>50000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>备注：</strong></p><p><code>druid.processing.buffffer.sizeBytes </code>每个查询用于聚合的堆外哈希表的大小</p><p><code>maxDirectMemory</code> = </p><p><code>druid.processing.buffffer.sizeBytes</code>*(<code>druid.processing.numMergeBuffffers</code> +</p><p><code>druid.processing.numThreads + 1</code>)</p><p>如果 <code>druid.processing.buffffer.sizeBytes</code> 太大，那么需要加大<code>maxDirectMemory</code>，否则 </p><p>broker 服务无法启动</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$DRUID_HOME</span>/conf/druid/cluster/query/router/jvm.config-server -Xms128m -Xmx128m -XX:+UseG1GC -XX:MaxDirectMemorySize<span class="token operator">=</span>128m -XX:+ExitOnOutOfMemoryError -Duser.timezone<span class="token operator">=</span>UTC+8 -Dfile.encoding<span class="token operator">=</span>UTF-8 -Djava.io.tmpdir<span class="token operator">=</span>var/tmp -Djava.util.logging.manager<span class="token operator">=</span>org.apache.logging.log4j.jul.LogManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-4、小结"><a href="#2-4-4、小结" class="headerlink" title="2.4.4、小结"></a>2.4.4、小结</h4><blockquote><ul><li><code>coordinator-overlord</code>，512m</li><li><code>historical</code>，512m、堆外1g</li><li><code>middleManager</code>，128m</li><li><code>broker</code>，512m、堆外 512m</li><li><code>router</code>，128m、堆外 128m</li></ul></blockquote><h3 id="3、分发并启动服务"><a href="#3、分发并启动服务" class="headerlink" title="3、分发并启动服务"></a>3、分发并启动服务</h3><hr><h4 id="3-1、分发"><a href="#3-1、分发" class="headerlink" title="3.1、分发"></a>3.1、分发</h4><blockquote><p><strong>备注：</strong></p><ul><li><font color="red"><strong>分发后一定要修改</strong> <strong><code>common.runtime.properties</code></strong> <strong>中的</strong> <strong><code>druid.host</code></strong> <strong>为所在节点的</strong><code>ip</code></font></li><li>在<code>linux122</code>、<code>linux123</code>上添加环境变量 <code>$DRUID_HOME</code></li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> -r druid-0.19.0/ linux122:<span class="token variable">$PWD</span> <span class="token function">scp</span> -r druid-0.19.0/ linux123:<span class="token variable">$PWD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2、启动服务"><a href="#3-2、启动服务" class="headerlink" title="3.2、启动服务"></a>3.2、启动服务</h4><blockquote><p>先启动<code>zk</code>的服务：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># linux121 </span>zk.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在主节点（<code>linux121</code>）上启动服务：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> start-cluster-master-no-zk-server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用<code>jps</code>检查可看见2个名为<code>Main</code>的后台进程，如下图所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805150513410.png"></p><blockquote><p>在数据节点（<code>linux122</code>）上启动服务：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> start-cluster-data-server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用<code>jps</code>检查可看见2个名为<code>Main</code>的后台进程，如下图所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805150605278.png"></p><blockquote><p>在查询节点（<code>linux123</code>）上启动服务：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> start-cluster-query-server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用<code>jps</code>检查可看见2个名为<code>Main</code>的后台进程，如下图所示:</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805150654610.png"></p><h4 id="3-3、查看界面"><a href="#3-3、查看界面" class="headerlink" title="3.3、查看界面"></a>3.3、查看界面</h4><blockquote><p>使用浏览器查看：<a href="http://linux123:8888/">http://linux123:8888/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805150725929.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805150732681.png"></p><h4 id="3-4、关闭服务"><a href="#3-4、关闭服务" class="headerlink" title="3.4、关闭服务"></a>3.4、关闭服务</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在各个节点运行 </span><span class="token function">cd</span> /opt/lagou/servers/druid-0.19.0/bin ./service --down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、入门案例"><a href="#三、入门案例" class="headerlink" title="三、入门案例"></a>三、入门案例</h2><hr><h3 id="1、从Kafka中加载数据"><a href="#1、从Kafka中加载数据" class="headerlink" title="1、从Kafka中加载数据"></a>1、从<code>Kafka</code>中加载数据</h3><hr><h4 id="1-1、数据及需求说明"><a href="#1-1、数据及需求说明" class="headerlink" title="1.1、数据及需求说明"></a>1.1、数据及需求说明</h4><blockquote><p>典型应用 <strong>不在</strong><code>Druid</code><strong>中处理复杂的数据转换清洗工作</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805151441472.png"></p><blockquote><p>假设有以下网络流量数据：(数据为<code>json</code>格式，通过<code>Kafka</code>传输)</p><ul><li><code>ts</code> ：时间戳</li><li><code>srcip</code> ：发送端 IP 地址</li><li><code>srcport</code> ：发送端端口号</li><li><code>dstip</code> ：接收端 IP 地址</li><li><code>dstport</code> ：接收端端口号</li><li><code>protocol</code> ：协议</li><li><code>packets</code> ：传输包的数量</li><li><code>bytes</code> ：传输字节数</li><li><code>cost</code> ：传输耗费的时间</li></ul></blockquote><blockquote><p>每行数据包含：时间戳（ts）、维度列、指标列</p><p>维度列：<code>srcip</code>、<code>srcport</code>、<code>dstip</code>、<code>dstport</code>、<code>protocol</code></p><p>指标列：<code>packets</code>、<code>bytes</code>、<code>cost</code></p></blockquote><blockquote><p>需要计算的指标：(数据汇总的粒度：<strong>分钟</strong>)</p><ul><li>记录的条数：<code>count</code></li><li><code>packets</code>：<code>max</code></li><li><code>bytes</code>：<code>min</code></li><li><code>cost</code>：<code>sum</code></li></ul></blockquote><blockquote><p>测试数据</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:35Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:36Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:37Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:38Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:08Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:09Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">6000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:10Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:11Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:12Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span> <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最后执行查询：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 有两个返回值，以下仅为示意 </span>{<span class="token string">"ts"</span>:<span class="token string">"2020-10-01T00:01"</span><span class="token punctuation">,</span><span class="token string">"srcip"</span>:<span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token string">"dstip"</span>:<span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token string">"srcport"</span>:<span class="token number">6666</span><span class="token punctuation">,</span> <span class="token string">"dstPort"</span>:<span class="token number">8888</span><span class="token punctuation">,</span> <span class="token string">"protocol"</span>: <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"packets"</span>:<span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span>:<span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"cost"</span>: <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token string">"count"</span>:<span class="token number">4</span>}{<span class="token string">"ts"</span>:<span class="token string">"2020-10-01T00:02"</span><span class="token punctuation">,</span><span class="token string">"srcip"</span>:<span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token string">"dstip"</span>:<span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token string">"srcport"</span>:<span class="token number">6666</span><span class="token punctuation">,</span> <span class="token string">"dstPort"</span>:<span class="token number">8888</span><span class="token punctuation">,</span> <span class="token string">"protocol"</span>: <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token string">"packets"</span>:<span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span>:<span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">"cost"</span>: <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token string">"count"</span>:<span class="token number">5</span>} <span class="token comment" spellcheck="true">-- 其他查询 </span><span class="token keyword">select</span> dstPort<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>packets<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token keyword">from</span> tab <span class="token keyword">group</span> <span class="token keyword">by</span> dstPort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2、创建Topic发送消息"><a href="#1-2、创建Topic发送消息" class="headerlink" title="1.2、创建Topic发送消息"></a>1.2、创建<code>Topic</code>发送消息</h4><blockquote><p>启动<code>Kafka</code>集群，并创建一个名为 <code>lagoudruid1</code> 的 <code>Topic</code> ：</p><p><strong>备注</strong>：<code>--zookeeper linux121:2181,linux122:2181/kafka1.0</code> =&gt; <code>kafka1.0</code>为<code>namespace</code>，请注</p><p>意自己是否添加了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">-- 创建topic kafka-topics.sh --create --zookeeper linux121:2181,linux122:2181/kafka1.0 --replication- factor 2 --partitions 6 --topic lagoudruid1 -- 启动生产者 kafka-console-producer.sh --broker-list linux121:9092,linux122:9092 --topic lagoudruid1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3、摄取数据"><a href="#1-3、摄取数据" class="headerlink" title="1.3、摄取数据"></a>1.3、摄取数据</h4><blockquote><p>浏览器访问 <code>linux123:8888</code>，点击控制台中的 <code>Load data</code> </p></blockquote><h5 id="1-3-1、Start"><a href="#1-3-1、Start" class="headerlink" title="1.3.1、Start"></a>1.3.1、<code>Start</code></h5><blockquote><p>选择 <code>Apache Kafka</code> ，点击 <code>Connect data</code> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154258968.png"></p><h5 id="1-3-2、Connect"><a href="#1-3-2、Connect" class="headerlink" title="1.3.2、Connect"></a>1.3.2、<code>Connect</code></h5><blockquote><ul><li>在 <code>Bootstrap servers</code> 输入<code> linux121:9092</code>,<code>linux122:9092</code> </li><li>在 <code>Topic</code> 输入 <code>lagoudruid1</code></li><li>点击 <code>Preview</code> 确保看到的数据是正确的</li><li>后点击<code>Next: Parse data</code>进入下一步</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154359056.png"></p><h5 id="1-3-2、Parse-data"><a href="#1-3-2、Parse-data" class="headerlink" title="1.3.2、Parse data"></a>1.3.2、<code>Parse data</code></h5><blockquote><ul><li>数据加载器将尝试自动为数据确定正确的解析器。可以使用多种解析器解析数据</li><li>这里使用 <code>json</code> 解析器解析数据</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154441115.png"></p><h5 id="1-3-3、Parse-Time"><a href="#1-3-3、Parse-Time" class="headerlink" title="1.3.3、Parse Time"></a>1.3.3、<code>Parse Time</code></h5><blockquote><p>定义数据的主时间列</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154512768.png"></p><h5 id="1-3-5、Tranform"><a href="#1-3-5、Tranform" class="headerlink" title="1.3.5、Tranform"></a>1.3.5、<code>Tranform</code></h5><blockquote><ul><li>不建议在<code>Druid</code>中进行复杂的数据转换操作，可考虑将这些操作放在数据预处理</li><li>这里没有定义数据转换</li></ul></blockquote><h5 id="1-3-6、Filter"><a href="#1-3-6、Filter" class="headerlink" title="1.3.6、Filter"></a>1.3.6、<code>Filter</code></h5><blockquote><ul><li>不建议在<code>Druid</code>中进行复杂的数据过滤操作，可考虑将这些操作放在数据预处理</li><li>这里没有定义数据过滤</li></ul></blockquote><h5 id="1-3-7、confifigure-Schema"><a href="#1-3-7、confifigure-Schema" class="headerlink" title="1.3.7、confifigure Schema"></a>1.3.7、<code>confifigure Schema</code></h5><blockquote><ul><li>定义指标列、维度列</li><li>定义如何在维度列上进行计算</li><li>定义是否在摄取数据时进行数据的合并（即<code>Rollup</code>），以及<code>Rollup</code>的粒度</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154650014.png"></p><h5 id="1-3-8、Partition"><a href="#1-3-8、Partition" class="headerlink" title="1.3.8、Partition"></a>1.3.8、<code>Partition</code></h5><blockquote><ul><li><p>定义如何进行数据分区</p></li><li><p><code>Secondary partitioning</code></p><ul><li><code>Max rows per segment</code>，每个<code>Segment</code>最大的数据条数</li><li><code>Max total rows</code>，<code>Segment</code>等待发布的最大数据条数</li></ul></li><li><p><code>Primary partitioning</code>有两种方式</p><ul><li><p><code>uniform</code>，以一个固定的时间间隔聚合数据，建议使用这种方式。这里将每天的数据作为</p><p>一个分区</p></li><li><p><code>arbitrary</code>，尽量保证每个<code>segments</code>大小一致，时间间隔不固定</p></li></ul></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154853350.png"></p><h5 id="1-3-9、Tune"><a href="#1-3-9、Tune" class="headerlink" title="1.3.9、Tune"></a>1.3.9、<code>Tune</code></h5><blockquote><p>定义任务执行和优化的相关参数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154920919.png"></p><h5 id="1-3-10、Publish"><a href="#1-3-10、Publish" class="headerlink" title="1.3.10、Publish"></a>1.3.10、<code>Publish</code></h5><blockquote><ol><li>定义<code>Datasource</code>的名称</li><li>定义数据解析失败后采取的动作</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805154954721.png"></p><h5 id="1-3-11、Edit-spec"><a href="#1-3-11、Edit-spec" class="headerlink" title="1.3.11、Edit spec"></a>1.3.11、<code>Edit spec</code></h5><blockquote><ul><li><code>json</code>串为数据摄取规范。可返回之前的步骤中进行更改，也可以直接编辑规范，并在前面的步骤中看到它</li><li>摄取规范定义完成后，单击 <code>Submit</code> 将创建一个数据摄取任务</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805155036382.png"></p><h4 id="1-4、查询数据"><a href="#1-4、查询数据" class="headerlink" title="1.4、查询数据"></a>1.4、查询数据</h4><blockquote><ul><li>数据摄取规范发布后创建 <code>Supervisor</code></li><li><code>Supervisor</code> 会启动一个<code>Task</code>，从<code>Kafka</code>中摄取数据</li><li>等待一小段时间，<code>Datasource</code>被创建，此时可以进行数据的查询</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805155118650.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805155139250.png"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看全部的数据 </span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"lagoutab1"</span> <span class="token comment" spellcheck="true">-- 其他查询 </span><span class="token keyword">select</span> dstPort<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>sum_packets<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>min_bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token string">"lagoutab1"</span> <span class="token keyword">group</span> <span class="token keyword">by</span> dstPort <span class="token comment" spellcheck="true">-- count字段加引号，表示是一个列名(本质是进行转义，否则认为count是一个函数，将报错)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Druid/image-20220805155206924.png"></p><h4 id="1-5、数据摄取规范"><a href="#1-5、数据摄取规范" class="headerlink" title="1.5、数据摄取规范"></a>1.5、数据摄取规范</h4><blockquote><ul><li><code>dataSchema</code>。指定传入数据的<code>Schema</code></li><li><code>ioConfifig</code>。指定数据的来源和去向</li><li><code>tuningConfifig</code>。指定各种摄取参数</li></ul></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"kafka"</span><span class="token punctuation">,</span>     <span class="token property">"spec"</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token property">"ioConfig"</span><span class="token operator">:</span>Object<span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"tuningConfig"</span><span class="token operator">:</span>Object<span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"dataSchema"</span><span class="token operator">:</span>Object<span class="token punctuation">{</span>...<span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-5-1、dataSchema的定义"><a href="#1-5-1、dataSchema的定义" class="headerlink" title="1.5.1、dataSchema的定义"></a>1.5.1、<code>dataSchema</code>的定义</h5><blockquote><p><code>Druid</code>摄入数据规范的核心是<code>dataSchema</code>,<code>dataSchema</code>定义了如何解析输入的数据，并将数据存储</p><p>到<code>Druid</code>中</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"dataSchema"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"dataSource"</span><span class="token operator">:</span><span class="token string">"lagoutab1"</span><span class="token punctuation">,</span>    <span class="token property">"granularitySpec"</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"uniform"</span><span class="token punctuation">,</span>        <span class="token property">"queryGranularity"</span><span class="token operator">:</span><span class="token string">"MINUTE"</span><span class="token punctuation">,</span>        <span class="token property">"segmentGranularity"</span><span class="token operator">:</span><span class="token string">"DAY"</span><span class="token punctuation">,</span>         <span class="token property">"rollup"</span><span class="token operator">:</span><span class="token boolean">true</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"timestampSpec"</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token property">"column"</span><span class="token operator">:</span><span class="token string">"ts"</span><span class="token punctuation">,</span>         <span class="token property">"format"</span><span class="token operator">:</span><span class="token string">"iso"</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"dimensionsSpec"</span><span class="token operator">:</span>Object<span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"metricsSpec"</span><span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>dataSource</code>。摄取数据后生成 <code>dataSource </code>的名称（<code>dataSource</code>是在查询中使用的表）</li><li><code>granularitySpec</code>。如何创建段和汇总数据</li><li><code>timestampSpec</code>。设置时间戳的列和格式</li><li><code>dimensionsSpec</code>。指定数据的维度列</li><li><code>metricsSpec</code>。指定数据的指标列，以及<code>Rollup</code>时指标列如何计算</li><li><code>transformSpec</code>。指定数据的转换规则和过滤规则，这里没有定义</li></ul><p><strong>备注</strong>：如果没有定义<code>Rollup</code>，在摄取数据时维度和度量之间没有区别</p></blockquote><h5 id="1-5-2、ioConfifig的定义"><a href="#1-5-2、ioConfifig的定义" class="headerlink" title="1.5.2、ioConfifig的定义"></a>1.5.2、<code>ioConfifig</code>的定义</h5><blockquote><p>输入数据的数据源在<code>ioConfifig</code>中指定，每个任务类型都有自己的<code>ioConfifig</code>，这里从<code> kafka</code> 获</p><p>取数据，配置如下：</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"ioConfig"</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"kafka"</span><span class="token punctuation">,</span>     <span class="token property">"consumerProperties"</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token property">"bootstrap.servers"</span><span class="token operator">:</span><span class="token string">"linux121:9092,linux122:9092"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"lagoudruid1"</span><span class="token punctuation">,</span>      <span class="token property">"inputFormat"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"useEarliestOffset"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"appendToExisting"</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-5-3、tuningConfifig的定义"><a href="#1-5-3、tuningConfifig的定义" class="headerlink" title="1.5.3、tuningConfifig的定义"></a>1.5.3、<code>tuningConfifig</code>的定义</h5><blockquote><p><code>tuningConfifig</code>规范根据摄取任务类型而有所不同。</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"tuningConfig"</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"kafka"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、从HDFS中加载数据"><a href="#2、从HDFS中加载数据" class="headerlink" title="2、从HDFS中加载数据"></a>2、从<code>HDFS</code>中加载数据</h3><hr><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -cat /data/druidlog.dat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json">-- druidlog.dat <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:35Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:36Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:37Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span> <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:01:38Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"6.6.6.6"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:08Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span> <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:09Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">6000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:10Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:11Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token string">"2020-10-01T00:02:12Z"</span><span class="token punctuation">,</span><span class="token property">"srcip"</span><span class="token operator">:</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span> <span class="token property">"dstip"</span><span class="token operator">:</span><span class="token string">"2.2.2.2"</span><span class="token punctuation">,</span> <span class="token property">"srcport"</span><span class="token operator">:</span><span class="token number">6666</span><span class="token punctuation">,</span>  <span class="token property">"dstPort"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token property">"packets"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1、定义数据摄取规范"><a href="#2-1、定义数据摄取规范" class="headerlink" title="2.1、定义数据摄取规范"></a>2.1、定义数据摄取规范</h4><blockquote><ul><li><code>HDFS</code>文件，数据格式 <code>json</code>，时间戳<code> ts</code></li><li>不定义<code>Rollup</code>；保留所有的明细数据</li><li><code>Segment granularity</code>：<code>Day</code></li><li><code>DataSource Name</code>：<code>lagoutab2</code></li></ul></blockquote><h2 id="四、Druid架构与原理"><a href="#四、Druid架构与原理" class="headerlink" title="四、Druid架构与原理"></a>四、<code>Druid</code>架构与原理</h2><hr><h3 id="1、基础架构"><a href="#1、基础架构" class="headerlink" title="1、基础架构"></a>1、基础架构</h3><hr>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kettle 的使用教程</title>
      <link href="/2022/07/29/kettle/"/>
      <url>/2022/07/29/kettle/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本篇文章仅供参考</p></blockquote><h2 id="1、ETL概念"><a href="#1、ETL概念" class="headerlink" title="1、ETL概念"></a>1、<code>ETL</code>概念</h2><hr><blockquote><p><code>ETL</code>（<code>Extract-Transform-Load</code>的缩写，即数据<strong>抽取</strong>、<strong>转换</strong>、<strong>装载</strong>的过程），对于企业或行业应用来</p><p>说，我们经常会遇到各种数据的<strong>处理</strong>，<strong>转换</strong>，<strong>迁移</strong>，所以了解并掌握一种<code>ETL</code>工具的使用，必不可少，</p><p>这里我要学习的<code>ETL</code>工具是<code>KETTLE</code>！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801092954779.png" alt="数据仓库结构框架"></p><h2 id="2、为什么要用ETL工具"><a href="#2、为什么要用ETL工具" class="headerlink" title="2、为什么要用ETL工具"></a>2、为什么要用<code>ETL</code>工具</h2><hr><blockquote><ol><li>数据来自<strong>不同的物理主机</strong>，这时候如使用SQL语句去处理的话，就显得比较吃力且开销也更大</li><li>数据来源可以是各种<strong>不同的数据库</strong>或者<strong>文件</strong>，这时候需要先把他们整理成统一的格式后才可以进行数据的处理，这一过程用代码实现显然有些麻烦。</li><li>数据库中我们当然可以使用<strong>存储过程</strong>去处理数据，但是处理海量数据的时候存储过程显然比较吃力，而且会占用<strong>较多数据库的资源</strong>，这可能会<strong>导致数据资源不足</strong>，进而影响数据库的性能</li></ol></blockquote><h2 id="3、ETL工具的优势"><a href="#3、ETL工具的优势" class="headerlink" title="3、ETL工具的优势"></a>3、<code>ETL</code>工具的优势</h2><hr><blockquote><ol><li>支持多种<strong>异构数据源</strong>的连接</li><li>图形化的界面操作十分方便</li><li>处理海量数据速度快、流程更清晰等</li></ol></blockquote><h2 id="4、KETTLE简介"><a href="#4、KETTLE简介" class="headerlink" title="4、KETTLE简介"></a>4、<code>KETTLE</code>简介</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801094237373.png" alt="概念模型图"></p><h3 id="4-1、Transformation"><a href="#4-1、Transformation" class="headerlink" title="4.1、Transformation"></a>4.1、<code>Transformation</code></h3><blockquote><p><code>Transformation</code>（转换）是由一系列被称之为<code>step</code>（步骤）的逻辑工作的网络。<strong>转换</strong>本质上是<strong>数据</strong></p><p><strong>流</strong>。下图是一个转换的例子，这个转换从<strong>文本文件</strong>中读取数据，过滤，然后排序，最后将数据加载到<strong>数</strong></p><p><strong>据库</strong>。本质上，转换是一组图形化的数据转换配置的逻辑结构。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801094507327.png"></p><blockquote><ul><li>转换的两个相关的主要组成部分是<code>step</code>（步骤）和<code>hops</code>（节点连接）。</li><li>转换文件的扩展名是<code>.ktr</code>。</li></ul></blockquote><h4 id="4-1-1、Steps（步骤）"><a href="#4-1-1、Steps（步骤）" class="headerlink" title="4.1.1、Steps（步骤）"></a>4.1.1、<code>Steps</code>（步骤）</h4><blockquote><p><code>Steps</code>（步骤）是转换的建筑模块，比如一个文本文件输入或者一个表输出就是一个步骤。在<code>PDI</code>中有</p><p>140多个步骤，它们按不同功能进行分类，比如<strong>输入类</strong>、<strong>输出类</strong>、<strong>脚本类</strong>等。每个步骤用于完成某种特定</p><p>的功能，通过配置一系列的步骤就可以完成你所需要完成的任务</p></blockquote><h4 id="4-1-2、Hops（节点连接）"><a href="#4-1-2、Hops（节点连接）" class="headerlink" title="4.1.2、Hops（节点连接）"></a>4.1.2、<code>Hops</code>（节点连接）</h4><blockquote><p><code>Hops</code>（节点连接）是<strong>数据的通道</strong>，用于<strong>连接两个步骤</strong>，使得元数据从一个步骤传递到另一个步骤。在上</p><p>图所示的转换中，它像似顺序执行发生的，但事实并非如此。节点连接决定了<strong>贯穿在步骤之间的数据</strong></p><p><strong>流</strong>，步骤之间的顺序不是转换执行的顺序。当执行一个转换时，<strong>每个步骤都以自己的线程启动</strong>，并</p><p>不断的接受和推送数据。</p></blockquote><blockquote><p><strong>注意：所以的步骤是同步开启和运行的，所以步骤的初始化的顺序是不可知的。因为我们不能在第一</strong></p><p><strong>个步骤中设置一个变量，然后在接下来的步骤中使用它。</strong></p></blockquote><blockquote><p>在一个转换中，一个步骤可以有<strong>多个连接</strong>，数据流可以从一个步骤流到多个步骤。在<code>Spoon</code>中，<code>hops</code></p><p>就想是箭，它不仅允许数据从一个步骤流向另一个步骤，也决定了数据流的方向和所经步骤。如果一个</p><p>步骤的数据输出到了多个步骤，那么数据既可以是<strong>复制</strong>的，也可以是<strong>分发</strong>的。</p></blockquote><h3 id="4-2、Jobs（工作）"><a href="#4-2、Jobs（工作）" class="headerlink" title="4.2、Jobs（工作）"></a>4.2、<code>Jobs</code>（工作）</h3><blockquote><p><code>Jobs</code>（工作）是基于工作流模型的，协调数据源、执行过程和相关依赖性的<code>ETL</code>活动。</p><p><code>Jobs</code>（工作）将功能性和实体过程聚合在了一起。下图是一个工作的例子。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801102129378.png"></p><blockquote><p>一个工作中展示的任务有从FTP获取文件、核查一个必须存在的数据库表是否存在、执行一个转换、发送</p><p>邮件通知一个转换中的错误等。最终工作的结果可能是数据仓库的更新等。</p></blockquote><blockquote><ul><li>工作由工作节点连接、工作实体和工作设置组成。</li><li>工作文件的扩展名是<code>.kjb</code>。</li></ul></blockquote><h3 id="4-3、Variable（变量）"><a href="#4-3、Variable（变量）" class="headerlink" title="4.3、Variable（变量）"></a>4.3、<code>Variable</code>（变量）</h3><blockquote><p>根据变量的作用域，变量被分为两类：<strong>环境变量</strong>和**<code>KETTLE</code>变量**</p></blockquote><h4 id="4-3-1、环境变量"><a href="#4-3-1、环境变量" class="headerlink" title="4.3.1、环境变量"></a>4.3.1、环境变量</h4><blockquote><p>环境变量可以通过<strong>edit menu</strong>下面的<strong>set environment variables</strong>对话框进行设置。使用环境变量的唯</p><p>一的问题是，它<strong>不能被动态的使用</strong>。如果在同一个应用服务器中执行两个或多个使用同一环境变量的转</p><p>换，将可能发生冲突。</p></blockquote><h4 id="4-3-2、KETTLE变量"><a href="#4-3-2、KETTLE变量" class="headerlink" title="4.3.2、KETTLE变量"></a>4.3.2、<code>KETTLE</code>变量</h4><blockquote><p><code>KETTLE</code>变量用于在<strong>一个小的动态范围内存储少量的信息</strong>。<code>KETTLE</code>变量是**<code>KETTLE</code>本地**的，作用范围可</p><p>以是<strong>一个工作或转换</strong>，在工作或转换中可以设置或修改。<code>Set variable</code>步骤用来设置与此变量有关的</p><p>工作从此设置其作用域，如：<strong>父工作</strong>、<strong>祖父工作</strong>或<strong>根工作</strong>。</p></blockquote><h3 id="4-4、KETTLE执行器的使用"><a href="#4-4、KETTLE执行器的使用" class="headerlink" title="4.4、KETTLE执行器的使用"></a>4.4、<code>KETTLE</code>执行器的使用</h3><h4 id="4-4-1、-Kitchen执行器的参数"><a href="#4-4-1、-Kitchen执行器的参数" class="headerlink" title="4.4.1、 Kitchen执行器的参数"></a>4.4.1、 <code>Kitchen</code>执行器的参数</h4><pre class="line-numbers language-bash"><code class="language-bash">-rep      <span class="token keyword">:</span> Repository name   任务包所在存储名-user     <span class="token keyword">:</span> Repository username   执行人-pass     <span class="token keyword">:</span> Repository password   执行人密码-job      <span class="token keyword">:</span> The name of the job to launch 任务包名称-dir      <span class="token keyword">:</span> The directory <span class="token punctuation">(</span>don<span class="token string">''</span>t forget the leading / or \<span class="token punctuation">)</span> -file     <span class="token keyword">:</span> The filename <span class="token punctuation">(</span>Job XML<span class="token punctuation">)</span> to launch -level    <span class="token keyword">:</span> The logging level <span class="token punctuation">(</span>Basic, Detailed, Debug, Rowlevel, Error, Nothing<span class="token punctuation">)</span> 指定日志级别-log      <span class="token keyword">:</span> The logging <span class="token function">file</span> to <span class="token function">write</span> to  指定日志文件-listdir  <span class="token keyword">:</span> List the directories <span class="token keyword">in</span> the repository 列出指定存储中的目录结构。-listjobs <span class="token keyword">:</span> List the <span class="token function">jobs</span> <span class="token keyword">in</span> the specified directory 列出指定目录下的所有任务-listrep  <span class="token keyword">:</span> List the defined repositories 列出所有的存储-norep    <span class="token keyword">:</span> Don<span class="token string">''</span>t log into the repository  不写日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5、-Windows下kitchen的执行方式的实例"><a href="#4-5、-Windows下kitchen的执行方式的实例" class="headerlink" title="4.5、 Windows下kitchen的执行方式的实例"></a>4.5、 <code>Windows</code>下<code>kitchen</code>的执行方式的实例</h3><pre class="line-numbers language-sh"><code class="language-sh">kitchen.bat /norep -file=D:/kettledata/mysal2orcle.kjb >> kitchen_%date:~0,10%.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>上面的含义是，使用<code>kitchen.bat</code> 命令来执行<code>job</code>文件，<code>job</code>文件的存放路径是</p><p><code>D:/kettledata/mysal2orcle.kjb</code>，并且将执行的结果输出到 <code>kitchen_%date:~0,10%.log</code>文件中。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Kitchen.sh -rep tfods -user admin -pass admin -dir / -logfile  /home/tfods/KETTLEV/log/.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>上面的含义是，使用<code>kitchen.sh</code> 命令来执行<code>job</code>文件，<code>job</code>文件的存放路径是<code>/</code>，并且将执行的结</p><p>果输出到 <code>/home/tfods/KETTLEV/log/.log</code>文件中。</p></blockquote><h2 id="5、KETTLE安装"><a href="#5、KETTLE安装" class="headerlink" title="5、KETTLE安装"></a>5、<code>KETTLE</code>安装</h2><hr><blockquote><p>默认已安装<code>JDK</code>，<code>JDK1.6</code>以上。</p></blockquote><blockquote><p>直接解压文件即可</p></blockquote><h3 id="5-1、配置文件"><a href="#5-1、配置文件" class="headerlink" title="5.1、配置文件"></a>5.1、配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801123609788.png"></p><blockquote><p><code>kettle.properties</code> ：<strong>全局变量</strong>，打开文件，直接在里面定义，如： TODAY=to_char(sysdate,’yyyy-</p><p>mm-dd’)，这里支持<strong>数据库函数</strong>，说的更直白点，就是这里定义是个啥，那么在<code>transformation</code>里边</p><p>取到的它就是啥。在需要的地方，直接**%%V_YES_DATE%%<strong>，或者</strong>${V_YES_DATE}**就可以得到。定义后</p><p><strong>保存重启</strong><code>spoon</code>才生效。</p></blockquote><blockquote><p><code>repositories.xml</code>：<code>KETTLE</code>资源库的定义</p></blockquote><h3 id="5-2、创建资源库"><a href="#5-2、创建资源库" class="headerlink" title="5.2、创建资源库"></a>5.2、创建资源库</h3><h3 id="5-2-1、创建数据库相关资源"><a href="#5-2-1、创建数据库相关资源" class="headerlink" title="5.2.1、创建数据库相关资源"></a>5.2.1、创建数据库相关资源</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询表空间数据文件</span><span class="token keyword">select</span>   <span class="token number">b</span><span class="token punctuation">.</span>file_name 物理文件名<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span>tablespace_name 表空间<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span>bytes<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> 大小M<span class="token keyword">from</span>   dba_free_space <span class="token number">a</span><span class="token punctuation">,</span>   dba_data_files <span class="token number">b</span> <span class="token keyword">where</span>  <span class="token number">a</span><span class="token punctuation">.</span>file_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>file_id <span class="token operator">and</span>  <span class="token number">b</span><span class="token punctuation">.</span>tablespace_name <span class="token operator">=</span> <span class="token string">'TSP_TFODS'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token number">b</span><span class="token punctuation">.</span>tablespace_name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>file_name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>bytes<span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token number">b</span><span class="token punctuation">.</span>tablespace_name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>file_name <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建表空间</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> TSP_KETTLE DATAFILE <span class="token string">'?'</span> SIZE 30G<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> kettle IDENTIFIED <span class="token keyword">BY</span> kettle <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span> TSP_KETTLE <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLESPACE</span> <span class="token keyword">TEMP</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--给用户赋予权限</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> kettle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801140115193.png"></p><blockquote><p>采用数据库存储资源库</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801140252494.png"></p><blockquote><p>新建数据库连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801141322013.png"></p><blockquote><p>填写数据库信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801141150200.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801141514487.png"></p><blockquote><p>创建之后数据库中会初始化相关表</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801151015362.png"></p><blockquote><p>创建之后进入界面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801145543943.png"></p><h2 id="6、KETTLE使用"><a href="#6、KETTLE使用" class="headerlink" title="6、KETTLE使用"></a>6、<code>KETTLE</code>使用</h2><h3 id="6-1、创建数据库连接"><a href="#6-1、创建数据库连接" class="headerlink" title="6.1、创建数据库连接"></a>6.1、创建数据库连接</h3><blockquote><p>探索资源库</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801151436664.png"></p><blockquote><p>新建数据库连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801151623065.png"></p><blockquote><p>填写数据库连接信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801151828658.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801151953217.png"></p><h3 id="6-2、创建转换"><a href="#6-2、创建转换" class="headerlink" title="6.2、创建转换"></a>6.2、创建转换</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801152314727.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801152641679.png"></p><h3 id="6-3、创建作业"><a href="#6-3、创建作业" class="headerlink" title="6.3、创建作业"></a>6.3、创建作业</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801152749889.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801153030001.png"></p><h3 id="6-4插件功能描述"><a href="#6-4插件功能描述" class="headerlink" title="6.4插件功能描述"></a>6.4插件功能描述</h3><h4 id="6-4-1、输入插件介绍"><a href="#6-4-1、输入插件介绍" class="headerlink" title="6.4.1、输入插件介绍"></a>6.4.1、输入插件介绍</h4><h5 id="6-4-1-1、CSV输入组件"><a href="#6-4-1-1、CSV输入组件" class="headerlink" title="6.4.1.1、CSV输入组件"></a>6.4.1.1、<code>CSV</code>输入组件</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220801175143784.png"></p><h5 id="6-4-1-2、EXCEL输入组件"><a href="#6-4-1-2、EXCEL输入组件" class="headerlink" title="6.4.1.2、EXCEL输入组件"></a>6.4.1.2、<code>EXCEL</code>输入组件</h5><blockquote><p>增加<code>EXCEL</code>文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145448767.png"></p><blockquote><p>增加工作表</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145545153.png"></p><blockquote><p>文件内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145725755.png"></p><blockquote><p>获取字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145629626.png"></p><h5 id="6-4-1-3、TXT文本文件输入组件"><a href="#6-4-1-3、TXT文本文件输入组件" class="headerlink" title="6.4.1.3、TXT文本文件输入组件"></a>6.4.1.3、<code>TXT</code>文本文件输入组件</h5><blockquote><p>添加文本文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150217961.png"></p><blockquote><p>文件内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150258357.png"></p><blockquote><p>获取字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150329874.png"></p><h5 id="6-4-1-4、表输入"><a href="#6-4-1-4、表输入" class="headerlink" title="6.4.1.4、表输入"></a>6.4.1.4、表输入</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150853990.png" alt="image-20220811150853990"></p><h5 id="6-4-1-5、XML文件输入"><a href="#6-4-1-5、XML文件输入" class="headerlink" title="6.4.1.5、XML文件输入"></a>6.4.1.5、<code>XML</code>文件输入</h5><blockquote><p>基础信息设置，文件导入</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151240116.png"></p><blockquote><p>内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151317817.png"></p><blockquote><p>获取字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151340685.png"></p><h4 id="6-4-2、输出插件介绍"><a href="#6-4-2、输出插件介绍" class="headerlink" title="6.4.2、输出插件介绍"></a>6.4.2、输出插件介绍</h4><h5 id="6-4-2-1、Excel输出插件"><a href="#6-4-2-1、Excel输出插件" class="headerlink" title="6.4.2.1、Excel输出插件"></a>6.4.2.1、<code>Excel</code>输出插件</h5><blockquote><p><code>Excel</code>文件基础设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220802091529850.png"></p><blockquote><p><code>Excel</code>文件内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220802091823967.png"></p><blockquote><p><code>Excel</code>文件的格式设置，默认</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220802091942297.png"></p><blockquote><p><code>Excel</code>文件字段设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220802092203316.png"></p><h5 id="6-4-2-2、TXT输出插件"><a href="#6-4-2-2、TXT输出插件" class="headerlink" title="6.4.2.2、TXT输出插件"></a>6.4.2.2、<code>TXT</code>输出插件</h5><blockquote><p>文件基础信息设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145849307.png"></p><blockquote><p>文件内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811145952583.png"></p><blockquote><p>文件字段获取</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150059945.png" alt="image-20220811150059945"></p><h5 id="6-4-2-3、表输出"><a href="#6-4-2-3、表输出" class="headerlink" title="6.4.2.3、表输出"></a>6.4.2.3、表输出</h5><blockquote><p>表输出基本设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150551195.png"></p><blockquote><p>获取字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150656430.png"></p><h5 id="6-4-2-4、XML输出"><a href="#6-4-2-4、XML输出" class="headerlink" title="6.4.2.4、XML输出"></a>6.4.2.4、<code>XML</code>输出</h5><blockquote><p>文件基础信息设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811150935999.png"></p><blockquote><p>文件内容设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151101378.png"></p><blockquote><p>获取字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151141980.png"></p><h4 id="6-5、通用JOB组件详解"><a href="#6-5、通用JOB组件详解" class="headerlink" title="6.5、通用JOB组件详解"></a>6.5、通用<code>JOB</code>组件详解</h4><h5 id="6-5-1、开始结束组件"><a href="#6-5-1、开始结束组件" class="headerlink" title="6.5.1、开始结束组件"></a>6.5.1、开始结束组件</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151417941.png"></p><h5 id="6-5-2、设置变量"><a href="#6-5-2、设置变量" class="headerlink" title="6.5.2、设置变量"></a>6.5.2、设置变量</h5><h6 id="6-5-2-1、JOB"><a href="#6-5-2-1、JOB" class="headerlink" title="6.5.2.1、JOB"></a>6.5.2.1、<code>JOB</code></h6><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151459336.png"></p><h6 id="6-5-2-2、transform"><a href="#6-5-2-2、transform" class="headerlink" title="6.5.2.2、transform"></a>6.5.2.2、<code>transform</code></h6><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151522974.png"></p><blockquote><p>表输入</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151547567.png"></p><blockquote><p>设置变量</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151617239.png"></p><h6 id="6-5-2-3、环境变量的使用"><a href="#6-5-2-3、环境变量的使用" class="headerlink" title="6.5.2.3、环境变量的使用"></a>6.5.2.3、环境变量的使用</h6><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151707847.png" alt="image-20220811151707847"></p><h4 id="6-6、流程控制组件"><a href="#6-6、流程控制组件" class="headerlink" title="6.6、流程控制组件"></a>6.6、流程控制组件</h4><h5 id="6-6-1、Switch-x2F-case"><a href="#6-6-1、Switch-x2F-case" class="headerlink" title="6.6.1、Switch/case"></a>6.6.1、<code>Switch</code>/<code>case</code></h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151819001.png"></p><blockquote><p>组件接收字段</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811151928407.png"></p><blockquote><p>组件设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152051238.png"></p><h5 id="6-6-2、校验字段的值"><a href="#6-6-2、校验字段的值" class="headerlink" title="6.6.2、校验字段的值"></a>6.6.2、校验字段的值</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152404586.png"></p><h5 id="6-6-3、检查文件是否存在"><a href="#6-6-3、检查文件是否存在" class="headerlink" title="6.6.3、检查文件是否存在"></a>6.6.3、检查文件是否存在</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152459790.png"></p><h5 id="6-6-4、校验文件大小或者文件数目"><a href="#6-6-4、校验文件大小或者文件数目" class="headerlink" title="6.6.4、校验文件大小或者文件数目"></a>6.6.4、校验文件大小或者文件数目</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152619958.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152702891.png"></p><h4 id="6-7、文件传输"><a href="#6-7、文件传输" class="headerlink" title="6.7、文件传输"></a>6.7、文件传输</h4><h5 id="6-7-1、FTP传输"><a href="#6-7-1、FTP传输" class="headerlink" title="6.7.1、FTP传输"></a>6.7.1、<code>FTP</code>传输</h5><blockquote><p>上传</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152757340.png"></p><blockquote><p>文件设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152840915.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kettle/image-20220811152914050.png"></p><blockquote><p>文件下载与上传类似</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kettle </tag>
            
            <tag> ETL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kylin的使用教程</title>
      <link href="/2022/07/28/kylin/"/>
      <url>/2022/07/28/kylin/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本片文章仅供参考</p></blockquote><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><hr><blockquote><p><code>Apache Kylin</code>是一个开源的、分布式的分析引擎，提供 <code>Hadoop </code>之上的 <code>SQL </code>查询</p><p>接口及多维分析（<code>OLAP</code>）能力以支持超大规模数据，最初由 <code>eBay</code> 开发并贡献至开</p><p>源社区，<strong>它能在亚秒内查询巨大的表</strong>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220728144252537.png"></p><h3 id="1、背景、历史以及特点"><a href="#1、背景、历史以及特点" class="headerlink" title="1、背景、历史以及特点"></a>1、背景、历史以及特点</h3><hr><h4 id="1-1、背景"><a href="#1-1、背景" class="headerlink" title="1.1、背景"></a>1.1、背景</h4><blockquote><p><code>Apache Kylin</code>，一种<code>MOLAP</code>的数据分析引擎。最早脱胎于<code>eBay</code>中国研发中心，并贡献给<code>Apache</code>基金</p><p>会，目前<code>Apache Kylin</code>的核心开发团队已经自立门户，创建了<code>Kyligence</code> (<code>Kylin Intelligence</code>) 公</p><p>司。值得一提的是，<code>Apache Kylin</code>是第一个由中国人主导的<code>Apache</code>顶级项目。</p><p><code>eBay</code>使用的传统数据仓库和商业智能平台遇到瓶颈，<code>Hadoop</code>平台虽然可以批量处理大规模数据，但无</p><p>法提供高效的数据交互分析。于是，<code>Kylin</code>被<code>eBay</code>孵化了。</p></blockquote><h4 id="1-2、发展历史"><a href="#1-2、发展历史" class="headerlink" title="1.2、发展历史"></a>1.2、发展历史</h4><ul><li>2014 年 <code>Kylin </code>诞生，支持 <code>Hive</code> 批数据源，从海量历史数据挖掘价值</li><li>2015 年 V1.5 首次支持 <code>Kafka</code> 数据源，采用单机微批次构建</li><li>2016 年 V1.6 发布准实时（<code>NRT Streaming</code>）， 使用 <code>Hadoop </code>微批次消费流数据2017 年 V2.0 支持雪花模型和 <code>Spark </code>引擎</li><li><code>eBay</code> 团队开始尝试 <code>real-time</code></li><li>2018 年 V2.4 支持 <code>Kafka 流数据 与 </code>Hive<code>维度表</code>join`</li><li><code>eBay</code> 开源 <code>real-time </code> <code>OLAP</code> 实现</li><li>2019 年 Q1，经过社区 <code>review</code> 和完善，合并 <code>master</code></li><li>2019 年 Q4，v3.0 发布 <code>Real-time</code> <code> OLAP</code>，实现秒级数据准备延迟</li></ul><h4 id="1-3、特点"><a href="#1-3、特点" class="headerlink" title="1.3、特点"></a>1.3、特点</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220728144744711.png"></p><ul><li><strong>数据源和模型：</strong>主要支持<code>Hive</code>、<code>Kafka</code></li><li><strong>构建引擎：</strong>早期支持<code>MapReduce</code>计算引擎，新版本支持<code>Spar</code>k、<code>Flink</code>计算引擎。除了全量构建外，对基于时间的分区特性，支持增量构建</li><li><strong>存储引擎：</strong>构建好的<code>Cube</code>以<code>Key-Value</code>的形式存储在<code>HBase</code>中，通过优化<code>Rowkey</code>加速查询。每一种维度的排列组合计算结果被保存为一个物化视图，叫<code>Cuboid</code></li><li><strong>优化算法：</strong><code>Cube</code>本身就是用空间换时间，也会根据算法，剪枝优化掉一些多余的<code>Cuboid</code>，寻求平衡</li><li><strong>访问接口：</strong>支持标准<code>SQL</code>接口，可以对接 <code>Zeppelin</code>、<code>Tableau</code> 等 BI 工具。<code>SQL</code>通过查询引擎，可以被路由到对应的<code>Cuboid上</code></li></ul><h4 id="1-4应用场景"><a href="#1-4应用场景" class="headerlink" title="1.4应用场景"></a>1.4应用场景</h4><blockquote><p><code>Kylin</code> 的核心思想是<strong>预计算</strong>，将数据按照指定的维度和指标，预先计算出所有可能的查询结果，</p><p><strong>利用空间换时间</strong>来加速模式固定的 OLAP 查询。<code>Kylin</code><strong>在亚秒内返回海量数据的查询结果。</strong></p></blockquote><ul><li>巨大的数据量，单个数据源表千亿行数据级别，且单个数据源达百TB级别</li><li>巨大的查询压力（查询的高并发）</li><li>查询的快速响应</li><li>下游较灵活的查询方式, 需支持带有复杂条件的 SQL 查询</li></ul><h4 id="1-5、基本术语"><a href="#1-5、基本术语" class="headerlink" title="1.5、基本术语"></a>1.5、基本术语</h4><blockquote><p><strong>数据仓库</strong>：数据仓库是一种<strong>信息系统的资料储存理论</strong>，强调的是利用某些特殊的资料储存方式，</p><p>让所包含的资料特别有利于分析和处理，从而产生有价值的资讯，并可依此做出决策。</p><p>利用数据仓库的方式存放的资料，具有一旦存入，便不会随时间发生变动的特性，此外，存入的</p><p>资料必定包含时间属性，通常一个数据仓库中会含有大量的历史性资料，并且它可利用特定的分</p><p>析方式，从其中发掘出特定的资讯。</p></blockquote><blockquote><p><code>OLTP</code>：<strong>联机事务处理</strong>。传统的关系型数据库的应用。</p></blockquote><blockquote><p><code>OLAP</code>分类：</p><p>​<strong><code>ROLAP</code></strong>(<code>Relational OLAP</code>)：细节数据、聚合后的数据都保存在类关系型的数据库中。<code>Hive</code>、</p><p>​<code>SparkSQL</code>等属于<code>ROLAP</code>。</p><p>​<strong><code>MOLAP</code></strong>(<code>Multidimensional OLAP</code>)：事先将汇总数据计算好，存放在自己特定的多维数据库中，</p><p>​用户的<code>OLAP</code>操作可以直接映射到多维数据库的访问，不通过<code>SQL</code>访问，其实质是空间换时间。</p><p>​<code>Apache Kylin</code>本质上是<code> MOLAP</code>。</p></blockquote><blockquote><p>​<strong><code>HOLAP</code></strong>(<code>Hybrid OLAP</code>)：表示基于混合数据组织的<code>OLAP</code>实现（<code>Hybrid OLAP</code>）。如<strong>低层是关系型</strong></p><p>​的，<strong>高层是多维矩阵型的</strong>。这种方式具有更好的灵活性。</p></blockquote><blockquote><p><strong>事实表</strong>（<code>Fact Table</code>）：是指存储有<strong>事实记录的表</strong>，如<strong>系统日志</strong>、<strong>销售记录</strong>、<strong>传感器数值</strong>等；事实</p><p>表的记录是动态增长的，所以它的体积通常远大于维度表。</p></blockquote><blockquote><p><strong>维度表</strong>（<code>Dimension Table</code>）：也称为<strong>查找表</strong>（<code>Lookup Table</code>），是与事实表相对应的一种表；</p><p>它保存了维度的属性值，可以跟事实表做关联；相当于将事实表上经常重复的属性抽取、规范出来</p><p>用一张表进行管理。常见的维度表有：<strong>日期表</strong>（存储与日期对应的周、月、季度等属性）、<strong>地区表</strong></p><p>（包含国家、省/州、城市等属性）等。维度表的变化通常不会太大。</p><p>使用维度表有许多好处：</p><ul><li>缩小了事实表的大小</li><li>便于维度的管理和维护，增加、删除和修改维度的属性，不必对事实表的大量记录进行改动</li><li>维度表可以为多个事实表重用</li></ul></blockquote><blockquote><p><strong>维度</strong>：是指审视数据的角度，它通常是数据记录的一个属性，例如时间、地点等。</p></blockquote><blockquote><p><strong>度量</strong>：就是被聚合的统计值，也就是聚合运算的结果。通常是一个数值，如总销售额、不同的用</p><p>户数等。</p></blockquote><blockquote><p><strong>星型模型</strong>（Star Schema）：是数据仓库维度建模中常用的数据模型之一。它的特点是**一张事实表，</p><p>以及一到多个维度表**，事实表与维度表通过主外键相关联，维度表之间没有关联，就像许多小星星</p><p>围绕在一颗恒星周围，所以名为星型模型。</p></blockquote><blockquote><p><strong>雪花模型</strong>（<code>SnowFlake Schema</code>）：就是<strong>将星型模型中的某些维表抽取成更细粒度的维表</strong>，然后让维表</p><p>之间也进行关联，这种形状酷似雪花的的模型称为雪花模型。</p></blockquote><blockquote><p><strong>多维立方体</strong>（<code>Cube</code>）：也叫数据立方体</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220802095356153.png"></p><p>这是由三个维度（维度数可以超过 3 个，上图仅为了方便画图表达）构成的一个<code>OLAP</code> 立方体，立方体</p><p>中包含了满足条件的 <code>cell</code>（子立方块）值，这些 <code>cell</code> 里面包含了要分析的数据，称之为<strong>度量值</strong>。</p><p><strong>关键字</strong>：</p><ul><li><p><strong>立方体</strong>：由维度构建出来的多维空间，包含了所有要分析的基础数据，所有的聚合数据操作都在立方体上进行</p></li><li><p><strong>维度</strong>：观察数据的角度。一般是一组离散的值。对于N个维度来说，所有可能的组合有2 的 N 次方个</p></li><li><p><strong>度量</strong>：即聚合计算的结果，一般是连续的值</p></li><li><p><code>Cuboid</code>：特指<code>Kylin</code>中在某一种维度组合下所计算的数据</p></li><li><p>事实表中的一个字段，要么是维度，要么是度量（可以被聚合）</p></li><li><p>给定一个数据模型，可以对其上的所有维度进行组合。对于N个维度来说，所有可能的组合有2 的 N 次方个</p></li><li><p><code>Cuboid</code> 特指 <code>Kylin</code> 中在某一种维度组合下所计算的数据</p></li><li><p><code>Cube</code>（或称<code>Data Cube</code>）：即数据立方体，是一种常用于数据分析与索引技术，它可以对原始数据</p><p>建立多维度索引，大大加快查询效率。数据立方体只是多维模型的一个形象的说法</p></li></ul></blockquote><h4 id="1-6、Kylin的技术架构"><a href="#1-6、Kylin的技术架构" class="headerlink" title="1.6、Kylin的技术架构"></a>1.6、<code>Kylin</code>的技术架构</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220802100147640.png"></p><blockquote><p><code>Apache Kylin</code>系统可以分为：<strong>在线查询</strong>和<strong>离线构建</strong>两部分。</p></blockquote><blockquote><p>在线查询模式主要处于上半部分，离线构建处于下半部分。<code>Kylin</code>技术架构如下：</p><ul><li><p>数据源主要是<code>Hadoop Hive</code>，数据以关系表的形式输入，保存着待分析的数据。根据元数据的定</p><p>义，构建引擎从数据源抽取数据，并构建<code>Cube</code></p></li><li><p><code>Kylin</code>可以使用 <code>MapReduce</code> 或 <code>Spark </code>作为构建引擎。构建后的<code>Cube</code>保存在右侧的存储引擎中，一</p><p>般选用<code>HBase</code>作为存储</p></li><li><p>完成了离线构建后，用户可以从查询系统发送<code>SQL</code>进行查询分析</p></li><li><p><code>Kylin</code>提供了各种<code>Rest API</code>、<code>JDBC/ODBC</code>接口。无论从哪个接口进入，<code>SQL</code>最终都会来到<code>Rest</code>服</p><p>务层，再转交给查询引擎进行处理</p></li><li><p><code>SQL</code>语句是基于数据源的关系模型书写的，而不是<code>Cube</code></p><ul><li><p><code>Kylin</code>在设计时，刻意对查询用户屏蔽了<code>Cube</code>的概念</p></li><li><p>只需要理解关系模型就可以使用<code>Kylin</code>，没有额外的学习门槛，传统的<code>SQL</code>应用也很容易迁移</p></li><li><p>查询引擎解析<code>SQL</code>，生成基于关系表的逻辑执行计划，然后将其转换为基于<code>Cube</code>的物理执</p><p>行计划，最后查询预计算生成的<code>Cube</code>并产生结果，<strong>整个过程不会访问原始数据源</strong></p></li></ul><p><strong>组件的功能</strong>：</p><ul><li><p><code>REST Server</code>：提供 <code>Restful </code>接口，例如创建、构建、刷新、合并等 <code>Cube</code> 相关操作，</p><p><code>Kylin</code> 的 <code>Projects</code>、<code>Tables </code>等元数据管理，用户访问权限控制，<code>SQL</code> 的查询等</p></li><li><p><code>Query Engine</code>：使用开源的 <code>Apache Calcite</code> 框架来实现 <code>SQL</code> 解析，可以理解为<code>SQL</code> </p><p>引擎层</p></li><li><p><code>Routing</code>：负责将解析 <code>SQL</code> 生成的执行计划转换成 <code>Cube</code> 缓存的查询，这部分查询是可以</p><p>在秒级甚至毫秒级完成</p></li><li><p><code>Metadata</code>：<code>Kylin </code>中有大量的元数据信息，包括 <code>Cube</code> 的定义、星型模型的定义、Job 和</p><p>执行 <code>Job</code> 的输出信息、模型的维度信息等等，<code>Kylin</code> 的元数据和 <code>Cube</code>都存储在 <code>HBase</code> </p><p>中，存储的格式是<code> json</code> 字符串</p></li><li><p><code>Cube Build Engine</code>：所有模块的基础，它主要负责<code> Kylin</code> 预计算中创建 <code>Cube</code>，创建的</p><p>过程是首先通过<code> Hive</code> 读取原始数据，然后通过一些 <code>MapReduce</code> 或<code>Spark</code> 计算生成 </p><p><code>Htable</code>，最后将数据 <code>load</code> 到 <code>HBase</code> 表中</p></li></ul></li></ul></blockquote><h4 id="1-7、工作原理"><a href="#1-7、工作原理" class="headerlink" title="1.7、工作原理"></a>1.7、工作原理</h4><blockquote><p><code>Apache Kylin</code>的工作原理是对数据模型做<code>Cube</code>预计算，并利用计算的结果加速查</p><p>询。具体工作过程如下：</p><ol><li>指定数据模型，定义维度和度量</li><li>预计算<code>Cube</code>，计算所有<code>Cuboid</code>并保存为物化视图（存储到<code>HBase</code>中）</li><li>执行查询时，读取Cuboid，计算并产生查询结果</li></ol></blockquote><blockquote><p>高效<code>OLAP</code>分析：</p><ul><li><p><code>Kylin</code>的查询过程不会扫描原始记录，而是通过预计算预先完成表的关联、聚合等复杂运算</p></li><li><p>利用预计算的结果来执行查询，相比非预计算的查询技术，其速度一般要快一到两个数量级，</p><p>在超大的数据集上优势更明显</p></li><li><p>数据集达到千亿乃至万亿级别时，<code>Kylin</code>的速度可以超越其他非预计算技术1000倍以上</p></li></ul></blockquote><h4 id="1-8、Kylin生态"><a href="#1-8、Kylin生态" class="headerlink" title="1.8、Kylin生态"></a>1.8、<code>Kylin</code>生态</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220802101427732.png"></p><blockquote><ul><li><p><code>Apache Kylin</code>核心：<code>Kylin</code>的<code>OALP</code> 引擎由元数据引擎、查询引擎、任务引擎、存储引擎组成。</p><p>另外，它还有一个 <code>REST</code> 服务器对外提供查询请求的服务</p></li><li><p>可扩展性：提供插件机制支持额外的特性和功能</p></li><li><p>与其他系统的整合：可整合任务调度器，<code>ETL</code>工具、监控及告警系统</p></li><li><p>驱动包（<code>Drivers</code>）：提供<code>ODBC</code>、<code>JDBC</code>驱动支持与其他工具（如<code>Tableau</code>）的整合</p></li></ul></blockquote><h2 id="二、Kylin实践"><a href="#二、Kylin实践" class="headerlink" title="二、Kylin实践"></a>二、<code>Kylin</code>实践</h2><hr><h3 id="2、Kylin安装"><a href="#2、Kylin安装" class="headerlink" title="2、Kylin安装"></a>2、<code>Kylin</code>安装</h3><h4 id="2-1、依赖环境"><a href="#2-1、依赖环境" class="headerlink" title="2.1、依赖环境"></a>2.1、依赖环境</h4><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Hive</td><td>2.3.7</td></tr><tr><td>Hadoop</td><td>2.9.2</td></tr><tr><td>Hbase</td><td>1.3.1</td></tr><tr><td>Zookeeper</td><td>3.4.14</td></tr><tr><td>Kafka</td><td>1.0.2</td></tr><tr><td>Spark</td><td>2.4.5</td></tr></tbody></table><h4 id="2-2、集群规划"><a href="#2-2、集群规划" class="headerlink" title="2.2、集群规划"></a>2.2、集群规划</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220802102122387.png"></p><blockquote><p>注意：</p><p><strong>要求<code>hbase</code>的<code>hbase.zookeeper.quorum</code>值必须只能是<code>host1</code>、<code>host2</code>、…。不允许出现</strong></p><p><strong><code>host:2181</code>。 <code>hbase-site.xml</code>文件：</strong></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">&lt;configuration></span> <span class="token attr-name">    &lt;!--</span> <span class="token attr-value">指定hbase在HDFS上存储的路径 --></span><span class="token attr-name">    &lt;property></span> <span class="token attr-name">        &lt;name>hbase.rootdir&lt;/name></span> <span class="token attr-name">        &lt;value>hdfs</span><span class="token punctuation">:</span><span class="token attr-value">//linux121:9000/hbase&lt;/value> </span><span class="token attr-name">    &lt;/property></span>     <span class="token attr-name">    &lt;!--</span> <span class="token attr-value">指定hbase是分布式的 --> </span><span class="token attr-name">    &lt;property></span> <span class="token attr-name">        &lt;name>hbase.cluster.distributed&lt;/name></span> <span class="token attr-name">        &lt;value>true&lt;/value></span> <span class="token attr-name">    &lt;/property></span>     <span class="token attr-name">    &lt;!--</span> <span class="token attr-value">指定zk的地址，多个用“,”分割 --> </span><span class="token attr-name">    &lt;property></span> <span class="token attr-name">        &lt;name>hbase.zookeeper.quorum&lt;/name></span> <span class="token attr-name">        &lt;value>linux121,linux122,linux123&lt;/value></span> <span class="token attr-name">    &lt;/property></span> &lt;/configuration><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-3、Kylin的安装配置"><a href="#2-3、Kylin的安装配置" class="headerlink" title="2.3、Kylin的安装配置"></a>2.3、<code>Kylin</code>的安装配置</h4><blockquote><p>解压缩软件(<code>apache-kylin-3.1.1-bin-hbase1x.tar.gz</code>)，并移动到<code>/opt/lagou/servers</code> 目录下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/software <span class="token function">tar</span> zxvf apache-kylin-3.1.1-bin-hbase1x.tar.gz <span class="token function">mv</span> apache-kylin-3.1.1-bin-hbase1x/ <span class="token punctuation">..</span>/servers/kylin-3.1.1 <span class="token function">cd</span> <span class="token punctuation">..</span>/servers/kylin-3.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>添加环境变量，并使之生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile <span class="token comment" spellcheck="true"># 增加以下内容 </span><span class="token function">export</span> KYLIN_HOME<span class="token operator">=</span>/opt/lagou/servers/kylin-3.1.1 <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$KYLIN_HOME</span>/bin <span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>增加<code>kylin</code>依赖组件的配置</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$KYLIN_HOME</span>/conf <span class="token comment" spellcheck="true">##软连接</span><span class="token function">ln</span> -s <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/hdfs-site.xml hdfs-site.xml<span class="token function">ln</span> -s <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/core-site.xml core-site.xml <span class="token function">ln</span> -s <span class="token variable">$HBASE_HOME</span>/conf/hbase-site.xml hbase-site.xml <span class="token function">ln</span> -s <span class="token variable">$HIVE_HOME</span>/conf/hive-site.xml hive-site.xml <span class="token function">ln</span> -s <span class="token variable">$SPARK_HOME</span>/conf/spark-defaults.conf spark-defaults.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改<code> kylin.sh</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$KYLIN_HOME</span>/bin vim kylin.sh <span class="token comment" spellcheck="true"># 在 kylin.sh 文件头部添加 </span><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/opt/lagou/servers/hadoop-2.9.2 <span class="token function">export</span> HIVE_HOME<span class="token operator">=</span>/opt/lagou/servers/hive-2.3.7 <span class="token function">export</span> HBASE_HOME<span class="token operator">=</span>/opt/lagou/servers/hbase-1.3.1 <span class="token function">export</span> SPARK_HOME<span class="token operator">=</span>/opt/lagou/servers/spark-2.4.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>检查依赖</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$KYLIN_HOME</span>/bin/check-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>错误处理：</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">/opt/lagou/servers/kylin-3.1.1/bin/check-port-availability.sh: line 30: netstat: <span class="token function">command</span> not found <span class="token comment" spellcheck="true">##解决：</span>yum <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4、启动集群"><a href="#2-4、启动集群" class="headerlink" title="2.4、启动集群"></a>2.4、启动集群</h4><blockquote><ol><li><p>启动<code>Zookeeper</code></p></li><li><p>启动<code>Hdfs</code></p></li><li><p>启动<code>Yarn</code></p></li><li><p>启动<code>Hbase</code></p></li><li><p>启动<code>Hive metastore</code> </p></li><li><p>启动<code>Yarn history server</code></p></li><li><p>启动 <code>kylin </code></p><pre class="line-numbers language-bash"><code class="language-bash">kylin.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录 <code>Kylin Web</code>界面</p></li></ol></blockquote><table><thead><tr><th>URL</th><th><strong><a href="http://linux122:7070/kylin">http://linux122:7070/kylin</a></strong></th></tr></thead><tbody><tr><td>默认用户名</td><td>ADMIN</td></tr><tr><td>默认密码</td><td>KYLIN</td></tr></tbody></table><h3 id="3、使用Kylin构建Cube"><a href="#3、使用Kylin构建Cube" class="headerlink" title="3、使用Kylin构建Cube"></a>3、使用<code>Kylin</code>构建<code>Cube</code></h3><blockquote><p>备注：以下操作均在<code>Kylin</code>上执行</p></blockquote><h4 id="3-1、准备数据"><a href="#3-1、准备数据" class="headerlink" title="3.1、准备数据"></a>3.1、准备数据</h4><h5 id="3-1-1、准备脚本"><a href="#3-1-1、准备脚本" class="headerlink" title="3.1.1、准备脚本"></a>3.1.1、准备脚本</h5><blockquote><p>将4个数据文件：<code>dw_sales_data.txt</code>、<code>dim_channel_data.txt</code>、<code>dim_product_data.txt</code>、</p><p><code>dim_region_data.txt</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220802154347850.png"></p><blockquote><p><code>kylin_examples.sql </code>脚本内容：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建订单数据库、表结构 </span><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span>lagou_kylin<span class="token punctuation">`</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 1、销售表：dw_sales </span><span class="token comment" spellcheck="true">-- id 唯一标识 </span><span class="token comment" spellcheck="true">-- date1 日期 </span><span class="token comment" spellcheck="true">-- channelId 渠道ID</span><span class="token comment" spellcheck="true">-- productId 产品ID</span><span class="token comment" spellcheck="true">-- regionId 区域ID </span><span class="token comment" spellcheck="true">-- amount 数量 </span><span class="token comment" spellcheck="true">-- price 金额 </span><span class="token keyword">create</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales<span class="token punctuation">(</span>     id string<span class="token punctuation">,</span>    date1 string<span class="token punctuation">,</span>     channelId string<span class="token punctuation">,</span>     productId string<span class="token punctuation">,</span>     regionId string<span class="token punctuation">,</span>    amount <span class="token keyword">int</span><span class="token punctuation">,</span>     price <span class="token keyword">double</span> <span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 2、渠道表：dim_channel </span><span class="token comment" spellcheck="true">-- channelId 渠道ID </span><span class="token comment" spellcheck="true">-- channelName 渠道名称 </span><span class="token keyword">create</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dim_channel<span class="token punctuation">(</span>     channelId string<span class="token punctuation">,</span>     channelName string<span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 3、产品表：dim_product </span><span class="token keyword">create</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dim_product<span class="token punctuation">(</span>     productId string<span class="token punctuation">,</span>    productName string<span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--4、区域表：dim_region </span><span class="token keyword">create</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dim_region<span class="token punctuation">(</span>     regionId string<span class="token punctuation">,</span>    regionName string <span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 导入数据 </span><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> INPATH <span class="token string">'/root/kylin/dw_sales_data.txt'</span> OVERWRITE <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> lagou_kylin<span class="token punctuation">.</span>dw_sales<span class="token punctuation">;</span> <span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> INPATH <span class="token string">'/root/kylin/dim_channel_data.txt'</span> OVERWRITE <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> lagou_kylin<span class="token punctuation">.</span>dim_channel<span class="token punctuation">;</span> <span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> INPATH <span class="token string">'/root/kylin/dim_product_data.txt'</span> OVERWRITE <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> lagou_kylin<span class="token punctuation">.</span>dim_product<span class="token punctuation">;</span><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> INPATH <span class="token string">'/root/kylin/dim_region_data.txt'</span> OVERWRITE <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> lagou_kylin<span class="token punctuation">.</span>dim_region<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-2、执行脚本"><a href="#3-1-2、执行脚本" class="headerlink" title="3.1.2、执行脚本"></a>3.1.2、执行脚本</h5><pre class="line-numbers language-bash"><code class="language-bash"> hive -f kylin_examples.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-1-3、检查建表、数据导入操作是否成功"><a href="#3-1-3、检查建表、数据导入操作是否成功" class="headerlink" title="3.1.3、检查建表、数据导入操作是否成功"></a>3.1.3、检查建表、数据导入操作是否成功</h5><h5 id="3-1-4、按照日期统计订单量、订单总金额"><a href="#3-1-4、按照日期统计订单量、订单总金额" class="headerlink" title="3.1.4、按照日期统计订单量、订单总金额"></a>3.1.4、按照日期统计订单量、订单总金额</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> lagou_kylin<span class="token punctuation">;</span> <span class="token keyword">select</span>     date1<span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total_money<span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">as</span> total_amount <span class="token keyword">from</span>     dw_sales <span class="token keyword">group</span> <span class="token keyword">by</span> date1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-5、维表优化"><a href="#3-1-5、维表优化" class="headerlink" title="3.1.5、维表优化"></a>3.1.5、维表优化</h5><blockquote><ul><li><p>要具有数据一致性，<strong>主键值必须是唯一的</strong>（否则 <code>Kylin</code> 构建过程会报错）</p></li><li><p>维度表越小越好，因为 <code>Kylin</code> 会将<strong>维度表加载到内存中</strong>供查询，过大的表不适合</p><p>作为维度表，默认的阈值是 <code>300MB</code></p></li><li><p><strong>改变频率低</strong>，<code>Kylin</code> 会在每次构建中试图重用维度表的快照（<code>Snapshot</code>），如果</p><p>维度表经常改变的话，重用就会失效，这就会导致要经常对维度表创建快照</p></li><li><p>维度表最好<strong>不要是 <code>Hive</code> 视图（<code>View</code>）</strong>，因为每次都需要将视图进行物化，从而</p><p>导致额外的时间开销</p></li></ul></blockquote><h5 id="3-1-6、事实表的优化"><a href="#3-1-6、事实表的优化" class="headerlink" title="3.1.6、事实表的优化"></a>3.1.6、事实表的优化</h5><blockquote><ul><li><strong>移除不参与 <code>Cube</code> 构建的字段</strong>，可以提升构建速度，降低 <code>Cube</code> 构建结果的大小</li><li>尽可能将事实表进行维度拆分，提取公用的维度</li><li>保证维度表与事实表的映射关系，过滤无法映射的记录</li></ul></blockquote><h4 id="3-2创建Cube-按照日期"><a href="#3-2创建Cube-按照日期" class="headerlink" title="3.2创建Cube(按照日期)"></a>3.2创建<code>Cube</code>(按照日期)</h4><blockquote><p><strong>核心步骤</strong>：</p><ol><li><p>定义数据源</p></li><li><p>定义<code>Model</code>:描述了一个星型模式的数据结构，定义事实表（<code>Fact Table</code>）和维度表（<code>Lookup Tbale</code>）,以及他们之间的关系。基于一个<code>Model</code>可以构建多个<code>Cube</code>，可以减少重复定义的工作</p></li><li><p>构建<code>Cube</code>：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--维度  日期</span><span class="token comment" spellcheck="true">--指标（度量）  订单商品销售量、销售金额</span><span class="token comment" spellcheck="true">--SQL</span><span class="token keyword">select</span> date1<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">from</span> dw_sales <span class="token keyword">group</span> <span class="token keyword">by</span> date1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h5 id="3-2-1、创建项目"><a href="#3-2-1、创建项目" class="headerlink" title="3.2.1、创建项目"></a>3.2.1、创建项目</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803090950559.png"></p><h5 id="3-2-2、创建数据源（DataSource）"><a href="#3-2-2、创建数据源（DataSource）" class="headerlink" title="3.2.2、创建数据源（DataSource）"></a>3.2.2、创建数据源（<code>DataSource</code>）</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091041214.png"></p><h5 id="3-2-3、创建模型（Model）"><a href="#3-2-3、创建模型（Model）" class="headerlink" title="3.2.3、创建模型（Model）"></a>3.2.3、创建模型（<code>Model</code>）</h5><table><thead><tr><th>1、选择<code>New Model</code></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091401310.png"></td></tr><tr><td>2、指定模型名称</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091420103.png"></td></tr><tr><td>3、选择事实表</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091522509.png"></td></tr><tr><td>4、选择维度</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091539041.png"></td></tr><tr><td>5、指定度量</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091604162.png"></td></tr><tr><td>6、指定分区和过滤条件</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091642525.png"></td></tr><tr><td></td></tr></tbody></table><h5 id="3-2-4、创建立方体（Cube）"><a href="#3-2-4、创建立方体（Cube）" class="headerlink" title="3.2.4、创建立方体（Cube）"></a>3.2.4、创建立方体（<code>Cube</code>）</h5><table><thead><tr><th>1、新建<code>Cube</code></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803091953674.png"></td></tr><tr><td>2、选择数据模型&amp;指定<code>Cube</code>名称</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092025176.png"></td></tr><tr><td>2、指定维度</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092132293.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092429330.png"></td></tr><tr><td>3、指定度量</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092544636.png"></td></tr><tr><td>4、指定刷新设置</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092612699.png"></td></tr><tr><td>5、高级设置</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092640960.png" alt="image-20220803092640960"></td></tr><tr><td>6、执行构建</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803092924865.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803093005459.png"></td></tr></tbody></table><h5 id="3-2-5、执行SQL语句"><a href="#3-2-5、执行SQL语句" class="headerlink" title="3.2.5、执行SQL语句"></a>3.2.5、执行<code>SQL</code>语句</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803093243502.png"></p><h4 id="3-3创建Cube（按照渠道）"><a href="#3-3创建Cube（按照渠道）" class="headerlink" title="3.3创建Cube（按照渠道）"></a>3.3创建<code>Cube</code>（按照渠道）</h4><blockquote><p><code>Cube</code>设计：</p><p>​维度：渠道</p><p>​指标：销售金额，最大订单金额，订单的平均金额</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803093602452.png"></p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--SQL</span><span class="token keyword">select</span>     t2<span class="token punctuation">.</span>channelid<span class="token punctuation">,</span>     t2<span class="token punctuation">.</span>channelname<span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">max</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">avg</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span>     dw_sales t1 <span class="token keyword">join</span>     dim_channel t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>channelid <span class="token operator">=</span> t2<span class="token punctuation">.</span>channelid <span class="token keyword">group</span> <span class="token keyword">by</span>     t2<span class="token punctuation">.</span>channelid<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>channelname<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>1、创建`model</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803094843634.png"></td></tr><tr><td>2、创建<code>Cube</code></td></tr><tr><td>2.1、定义提维度</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803094935914.png"></td></tr><tr><td>2.2、定义度量</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803094952589.png"></td></tr><tr><td>3、执行构建</td></tr><tr><td>4、执行<code>SQL</code></td></tr></tbody></table><h4 id="3-4创建Cube（按照日期、区域、产品、渠道）"><a href="#3-4创建Cube（按照日期、区域、产品、渠道）" class="headerlink" title="3.4创建Cube（按照日期、区域、产品、渠道）"></a>3.4创建<code>Cube</code>（按照日期、区域、产品、渠道）</h4><blockquote><p><code>Cube</code>设计：</p><p>​维度：日期、区域、产品、渠道</p><p>​指标（度量）：销售总金额、订单总比数</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095233929.png"></p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>    t1<span class="token punctuation">.</span>date1<span class="token punctuation">,</span>    t2<span class="token punctuation">.</span>regionid<span class="token punctuation">,</span>     t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span>     t3<span class="token punctuation">.</span>productid<span class="token punctuation">,</span>     t3<span class="token punctuation">.</span>productname<span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total_money<span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">as</span> total_amount <span class="token keyword">from</span>    dw_sales t1 <span class="token keyword">inner</span> <span class="token keyword">join</span>     dim_region t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>regionid <span class="token operator">=</span> t2<span class="token punctuation">.</span>regionid <span class="token keyword">inner</span> <span class="token keyword">join</span>     dim_product t3 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>productid <span class="token operator">=</span> t3<span class="token punctuation">.</span>productid <span class="token keyword">group</span> <span class="token keyword">by</span>     t1<span class="token punctuation">.</span>date1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>regionid<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span> t3<span class="token punctuation">.</span>productid<span class="token punctuation">,</span> t3<span class="token punctuation">.</span>productname <span class="token keyword">order</span> <span class="token keyword">by</span>     t1<span class="token punctuation">.</span>date1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span> t3<span class="token punctuation">.</span>productname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-1创建Model"><a href="#3-4-1创建Model" class="headerlink" title="3.4.1创建Model"></a>3.4.1创建<code>Model</code></h5><table><thead><tr><th>1、指定关联表、关联条件</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095636566.png"></td></tr><tr><td>2、指定维度字段</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095652823.png"></td></tr><tr><td>3、指定度量字段</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095721463.png" alt="image-20220803095721463"></td></tr></tbody></table><h5 id="3-4-2、创建Cube"><a href="#3-4-2、创建Cube" class="headerlink" title="3.4.2、创建Cube"></a>3.4.2、创建<code>Cube</code></h5><table><thead><tr><th>1、指定维度</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095811421.png"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095823686.png"></td></tr><tr><td>2、指定指标(度量)</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803095852462.png"></td></tr><tr><td>3、执行构建<code>Cube</code></td></tr><tr><td>4、执行<code>SQL</code></td></tr></tbody></table><h3 id="4、增量构建Cube"><a href="#4、增量构建Cube" class="headerlink" title="4、增量构建Cube"></a>4、增量构建<code>Cube</code></h3><blockquote><ul><li>在大多数业务场景下，<code>Hive</code>中的数据处于不断增长的状态</li><li>为了支持在构建<code>Cube</code>时，<strong>无需重复处理历史数据，引入增量构建功能</strong></li></ul></blockquote><h4 id="4-1、Segment"><a href="#4-1、Segment" class="headerlink" title="4.1、Segment"></a>4.1、<code>Segment</code></h4><blockquote><p><code>Kylin</code>将<code>Cube</code>划分为多个<code>Segment</code>（物理上相当于是<code>HBase</code>中的一个表）：</p><ul><li><p>一个<code>Cube</code>可能由1个或多个 <code>Segment</code> 组成。<code>Segment</code>是指定时间范围的<code>Cube</code>，</p><p>可以理解为<code>Cube</code>的分区</p></li><li><p><code>Segment</code> 是针对源数据中的某一个片段计算出来的 <code>Cube</code> 数据，代表一段时间内</p><p>源数据的预计算结果</p></li><li><p>每个<code>Segment</code>用起始时间和结束时间来标志</p></li><li><p>一个 <code>Segment</code> 的起始时间等于它之前 <code>Segment </code>的结束时间；它的结束时间等于它</p><p>后面那个<code>Segment</code>的起始时间</p></li><li><p>同一个 Cube 下不同的 Segment 除了背后的源数据不同之外，其他如结构定义、构</p></li><li><p>建过程、优化方法、存储方式等都完全相同</p></li><li></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803101201509.png"></p><h4 id="4-2、全量构建与增量构建"><a href="#4-2、全量构建与增量构建" class="headerlink" title="4.2、全量构建与增量构建"></a>4.2、全量构建与增量构建</h4><h5 id="4-2-1、全量构建"><a href="#4-2-1、全量构建" class="headerlink" title="4.2.1、全量构建"></a>4.2.1、全量构建</h5><blockquote><ul><li><p><code>Cube中</code>只存在<strong>唯一</strong>的一个<code>Segment</code></p></li><li><p>该<code>Segment</code>没有分割时间的概念，即<strong>没有起始时间和结束时间</strong></p></li><li><p>对于全量构建来说，每当需要更新Cube数据时，它不会区分历史数据和新加入的数据，</p><p>即在<strong>构建时会导入并处理所有的数据</strong></p></li></ul></blockquote><h5 id="4-2-2、增量构建"><a href="#4-2-2、增量构建" class="headerlink" title="4.2.2、增量构建"></a>4.2.2、增量构建</h5><blockquote><p>只会导入新 <code>Segment</code> 指定的时间区间内的原始数据，并只对这部分原始数据进</p><p>行预计算</p></blockquote><h5 id="4-3-3、全量构建与增量构建的对比"><a href="#4-3-3、全量构建与增量构建的对比" class="headerlink" title="4.3.3、全量构建与增量构建的对比"></a>4.3.3、全量构建与增量构建的对比</h5><table><thead><tr><th>全量构建</th><th>增量构建</th></tr></thead><tbody><tr><td>每次更新时都需要更新整个数据集</td><td>每次只对需要更新的时间范围进行更新，计算量相对较小</td></tr><tr><td>查询时不需要合并不同<code>Segment</code>的结果</td><td>查询时需要合并不同<code>Segment</code>的结果，因此查询性能会受影响</td></tr><tr><td>不需要后续的<code>Segment</code>合并</td><td>累计一定量的<code>Segment</code>之后，需要进行合并</td></tr><tr><td>适合小数据量或全表更新的<code>Cube</code></td><td>适合大数据量的Cube</td></tr></tbody></table><blockquote><p>查询方式的比对：</p><ul><li><p>全量构建</p><ul><li><p>查询引擎只需向存储引擎访问单个<code>Segment</code>所对应的数据，无需进行</p><p><code>Segment</code>之间的聚合</p></li><li><p>为了加强性能，单个Segment的数据也有可能被分片存储到引擎的多个</p><p>分区上，查询引擎可能仍然需要对单个<code>Segment</code>不同分区的数据做进</p><p>一步的聚合</p></li></ul></li><li><p>增量构建</p><ul><li><p>由于不同时间的数据分布在不同的S<code>egment</code>之中，查询引擎需要向存储引</p><p>擎请求读取各个<code>Segment</code>的数据</p></li><li><p>增量构建的<code>Cube</code>上的查询会比全量构建的做更多的运行时聚合，通常来说</p><p>增量构建的<code>Cube</code>上的查询会比全量构建的<code>Cube</code>上的查询要慢一些</p></li></ul></li></ul></blockquote><h4 id="4-3、增量构建Cube"><a href="#4-3、增量构建Cube" class="headerlink" title="4.3、增量构建Cube"></a>4.3、增量构建<code>Cube</code></h4><blockquote><p>步骤：定义数据源 =&gt; 定义<code>model</code> =&gt; 定义<code>Cube</code> =&gt; 构建<code>Cube</code></p></blockquote><h5 id="4-3-1、定义数据源"><a href="#4-3-1、定义数据源" class="headerlink" title="4.3.1、定义数据源"></a>4.3.1、定义数据源</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 数据结构类似，只是改为了分区表 </span><span class="token keyword">drop</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1<span class="token punctuation">;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1<span class="token punctuation">(</span>     id string<span class="token punctuation">,</span>     channelId string<span class="token punctuation">,</span>     productId string<span class="token punctuation">,</span>    regionId string<span class="token punctuation">,</span>     amount <span class="token keyword">int</span><span class="token punctuation">,</span>     price <span class="token keyword">double</span><span class="token punctuation">)</span>partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>dt string<span class="token punctuation">)</span> <span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 加载数据 </span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">"/root/kylin/dw_sales1001_data.txt"</span> <span class="token keyword">into</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1 <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">"2020-10-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">"/root/kylin/dw_sales1002_data.txt"</span> <span class="token keyword">into</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1 <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">"2020-10-02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">"/root/kylin/dw_sales1003_data.txt"</span> <span class="token keyword">into</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1 <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">"2020-10-03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">"/root/kylin/dw_sales1004_data.txt"</span> <span class="token keyword">into</span> <span class="token keyword">table</span> lagou_kylin<span class="token punctuation">.</span>dw_sales1 <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">"2020-10-04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803103302496.png"></p><h5 id="4-3-2、定义Model"><a href="#4-3-2、定义Model" class="headerlink" title="4.3.2、定义Model"></a>4.3.2、定义<code>Model</code></h5><blockquote><p><strong>增量构建的Cube需要指定分割时间列</strong>。例如：将日期分区字段添加到维度列中</p></blockquote><table><thead><tr><th><strong>将日期分区字段添加到维度列中</strong></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803103437823.png"></td></tr><tr><td>配置分区列，并指定日期格式</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803103453883.png"></td></tr></tbody></table><h5 id="4-3-3、定义Cube"><a href="#4-3-3、定义Cube" class="headerlink" title="4.3.3、定义Cube"></a>4.3.3、定义<code>Cube</code></h5><h5 id="4-3-4、构建Cube"><a href="#4-3-4、构建Cube" class="headerlink" title="4.3.4、构建Cube"></a>4.3.4、构建<code>Cube</code></h5><blockquote><p>需要输入分割时间</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803104653019.png"></p><h5 id="4-3-5、查看Segment"><a href="#4-3-5、查看Segment" class="headerlink" title="4.3.5、查看Segment"></a>4.3.5、查看<code>Segment</code></h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803104801019.png"></p><h5 id="4-3-6、增量构建Cube"><a href="#4-3-6、增量构建Cube" class="headerlink" title="4.3.6、增量构建Cube"></a>4.3.6、增量构建<code>Cube</code></h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803104840863.png"></p><h5 id="4-3-7、查看对应的Segment"><a href="#4-3-7、查看对应的Segment" class="headerlink" title="4.3.7、查看对应的Segment"></a>4.3.7、查看对应的<code>Segment</code></h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803104917783.png"></p><h4 id="4-4、Segment管理"><a href="#4-4、Segment管理" class="headerlink" title="4.4、Segment管理"></a>4.4、<code>Segment</code>管理</h4><blockquote><p>增量构建的<code>Cube</code>每天都可能会有新的增量，这样的<code>Cube</code>中最终可能包含很多</p><p><code>Segment</code>，这将导致<code>Kylin</code>性能受到严重影响：</p><ul><li>从执行引擎的角度来说，运行时的查询引擎需要聚合多个<code>Segment</code>的结果才能返回正确的查询结果</li><li>从存储引擎的角度来说，大量的<code>Segment</code>会带来大量的文件，给存储空间带来巨大的压力</li></ul><p>为了保持查询性能，需要：</p><ul><li>需要定期地将某些<code>Segment</code>合并在一起</li><li>根据 <code>Segment</code> 保留策略自动地淘汰那些不会再被查询到的陈旧<code>Segment</code></li></ul></blockquote><h5 id="4-4-1、手动触发合并Segment"><a href="#4-4-1、手动触发合并Segment" class="headerlink" title="4.4.1、手动触发合并Segment"></a>4.4.1、手动触发合并<code>Segment</code></h5><blockquote><p><code>Kylin</code>提供了一种简单的机制用于控制<code>Cube</code>中<code>Segment</code>的数量：合并<code>Segments</code>。在</p><p><code>Web GUI</code>中选中需要进行<code>Segments</code>合并的<code>Cube</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803105330497.png"></p><blockquote><p>选中需要合并的S<code>egment</code>，<strong>可以同时合并多个<code>Segment</code>，但这些Segment必须是连续的</strong></p><p>单击提交后系统会提交一个类型为<code>MERGE</code>的构建任务，它以选中的<code>Segment</code>中的数据作为</p><p>输入，将这些<code>Segment</code>的数据合并封装成为一个新的<code>Segment</code>。新的<code>Segmen</code>t的起始时间</p><p>为<strong>选中的最早的<code>Segment</code>的起始时间</strong>，它的结束时间为<strong>选中的最晚的<code>Segment</code>的结束时间</strong>。</p></blockquote><blockquote><p>查看合并任务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803105522559.png"></p><blockquote><p><strong>注意事项</strong>：</p><ul><li>在<code>MERGE</code>构建结束之前，所有选中用来合并的<code>Segment</code>仍然处于可用的状态</li><li>在<code>MERGE</code>类型的构建完成之前，系统将不允许提交这个<code>Cube</code>上任何类型的其他构建任务</li><li>当<code>MERGE</code>构建结束的时候，系统将选中合并的<code>Segment</code>替换为新的<code>Segment</code>，而被替换下的<code>Segment</code>等待将被垃圾回收和清理，以节省系统资源</li></ul></blockquote><h5 id="4-4-2、删除Segment"><a href="#4-4-2、删除Segment" class="headerlink" title="4.4.2、删除Segment"></a>4.4.2、删除<code>Segment</code></h5><blockquote><p><code>Disable  Cube</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803105850523.png"></p><blockquote><p>点击 <code>delete Segment</code>，删除指定的<code>segment</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803105933428.png"></p><h5 id="4-4-3、自动合并Segment"><a href="#4-4-3、自动合并Segment" class="headerlink" title="4.4.3、自动合并Segment"></a>4.4.3、自动合并<code>Segment</code></h5><blockquote><p>手动维护<code>Segment</code>很繁琐，人工成本很高，<code>Kylin</code>中是可以支持自动合<code>并Segment</code>。</p><p>在<code>Cube Designer</code>的<code>Refresh Settings</code>的页面中有：</p><ul><li>Auto Merge Thresholds  合并策略</li><li>Retention Threshold   保留策略</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803133954390.png"></p><blockquote><p><code>Auto Merge Thresholds</code></p><ol><li>允许用户设置几个层级的时间阈值，层级越靠后，时间阈值就越大</li><li>每当<code>Cube</code>中有新的<code>Segment</code>状态变为 <code>READY </code>的时候，会自动触发一次系统自动合并</li></ol><p><strong>合并策略</strong>：尝试最大一级的时间阈值。例如：针对（7天、28天）层级的日志，先检查能否</p><p>将<strong>连续</strong>的若干个Segment合并成为一个超过28天的大Segment</p></blockquote><h5 id="4-4-4、配置保留Segment"><a href="#4-4-4、配置保留Segment" class="headerlink" title="4.4.4、配置保留Segment"></a>4.4.4、配置保留<code>Segment</code></h5><blockquote><p>自动合并是将多个<code>Segment</code>合并为一个<code>Segment</code>，以达到清理碎片的目的。保留</p><p><code>Segment</code>则是及时清理不再使用的<code>Segment</code>。</p></blockquote><blockquote><p>在很多场景中，只会对过去一段时间内的数据进行查询，例如：</p><ul><li>对于某个只显示过去1年数据的报表</li><li>支撑它的<code>Cube</code>其实只需要保留过去一年类的<code>Segmen</code>即可</li><li>由于数据在Hive中已经存在备份，则无需在<code>Kylin</code>中备份超过一年的历史数据</li></ul></blockquote><blockquote><p>可以将<code>Retention Threshold</code>设置为365。每当有新的<code>Segment</code>状态变为 <code>READY</code> 的</p><p>时候，系统会检查每一个<code>Segment</code>。**如果它的结束时间距离最晚的一个 <code>Segment </code>的</p><p>结束时间已经大于等于 <code>Retention Threshold</code> ，那么这个<code>Segment</code>将被视为无需保</p><p>留。系统会自动地从<code>Cube</code>中删除这个Segment`。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803135656102.png"></p><h5 id="4-4-5、使用JDBC连接操作Kylin"><a href="#4-4-5、使用JDBC连接操作Kylin" class="headerlink" title="4.4.5、使用JDBC连接操作Kylin"></a>4.4.5、使用<code>JDBC</code>连接操作<code>Kylin</code></h5><blockquote><p>使用<code>Kylin</code>的<code>JDBC</code>与<code>JDBC</code>操作<code>MySQL</code>一致</p><ul><li><code>jdbc url</code>： <code>jdbc:kylin://linux122:7070/lagou_sales_olap</code> =&gt; <code>lagou_sales_olap</code>项目名曾</li><li>用户名密码：<code>ADMIN</code>/<code>KYLIN</code></li></ul></blockquote><blockquote><p>导入依赖</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kylin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kylin-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发流程</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>other <span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager     object KylinJDBC <span class="token punctuation">{</span>         def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 创建Connection连接对象 </span>        val url <span class="token operator">=</span> <span class="token string">"jdbc:kylin://linux122:7070/lagou_ sales_olap"</span>        val connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">,</span> <span class="token string">"KYLIN"</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 创建Statement对象，并执行executeQuery，获取ResultSet </span>        val statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 构建SQL和语句 </span>        val sql <span class="token operator">=</span> <span class="token string">""</span>"            <span class="token operator">|</span>select                 <span class="token operator">|</span> t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span>                 <span class="token operator">|</span> t2<span class="token punctuation">.</span>regionid<span class="token punctuation">,</span>                 <span class="token operator">|</span> t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span>                 <span class="token operator">|</span> t3<span class="token punctuation">.</span>productid<span class="token punctuation">,</span>                 <span class="token operator">|</span> t3<span class="token punctuation">.</span>productname<span class="token punctuation">,</span>                <span class="token operator">|</span> <span class="token function">sum</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>price<span class="token punctuation">)</span> as total_money<span class="token punctuation">,</span>                 <span class="token operator">|</span> <span class="token function">sum</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> as total_amount             <span class="token operator">|</span>from            <span class="token operator">|</span> dw_sales1 t1             <span class="token operator">|</span>inner join dim_region t2                     <span class="token operator">|</span>on t1<span class="token punctuation">.</span>regionid <span class="token operator">=</span> t2<span class="token punctuation">.</span>regionid                     <span class="token operator">|</span>inner join dim_product t3                     <span class="token operator">|</span>on t1<span class="token punctuation">.</span>productid <span class="token operator">=</span> t3<span class="token punctuation">.</span>productid                     <span class="token operator">|</span>group by                     <span class="token operator">|</span> t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span>         <span class="token operator">|</span> t2<span class="token punctuation">.</span>regionid<span class="token punctuation">,</span>         <span class="token operator">|</span> t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span>         <span class="token operator">|</span> t3<span class="token punctuation">.</span>productid<span class="token punctuation">,</span>         <span class="token operator">|</span> t3<span class="token punctuation">.</span>productname             <span class="token operator">|</span>order by             <span class="token operator">|</span> t1<span class="token punctuation">.</span>dt<span class="token punctuation">,</span>         <span class="token operator">|</span> t2<span class="token punctuation">.</span>regionname<span class="token punctuation">,</span>         <span class="token operator">|</span> t3<span class="token punctuation">.</span>productname             <span class="token operator">|</span><span class="token string">""</span>"<span class="token punctuation">.</span>stripMargin                     val resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dt regionname productname total_money total_amount "</span><span class="token punctuation">)</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 获取时间 </span>            val dt<span class="token operator">:</span> String <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"dt"</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">// 获取区域名称 </span>            val regionname<span class="token operator">:</span> String <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"regionname"</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">// 获取产品名称 </span>            val productname<span class="token operator">:</span> String <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"productname"</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">// 总金额 </span>            val total_money<span class="token operator">:</span> String <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"total_money"</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">// 总数量 </span>            val total_amount<span class="token operator">:</span> String <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>                             <span class="token function">println</span><span class="token punctuation">(</span>f<span class="token string">"$dt $regionname $productname%-10s $total_money%10s $total_amount%10s"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>        connection<span class="token punctuation">.</span>close     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、Cube优化"><a href="#5、Cube优化" class="headerlink" title="5、Cube优化"></a>5、<code>Cube</code>优化</h3><h4 id="5-1、Cuboid剪枝优化"><a href="#5-1、Cuboid剪枝优化" class="headerlink" title="5.1、Cuboid剪枝优化"></a>5.1、<code>Cuboid</code>剪枝优化</h4><blockquote><p><code>Cuboid</code> 特指 <code>Kylin</code> 中在某一种维度组合下所计算的所有数据。</p><p><strong>以减少<code>Cuboid</code>数量为目的的优化统称为<code>Cuboid</code>剪枝</strong>。</p></blockquote><blockquote><p>在没有采取任何优化措施的情况下，<code>Kylin</code>会对每一种维度的组合进行预计算:</p><ul><li>如果有4个维度，可能最终会有 2^4 =16个<code>Cuboid</code>需要计算</li><li>如果有10个维度，那么没有经过任何优化的Cube就会存在 2^10 =1024 个<code>Cuboid</code></li><li>如果有20个维度，那么Cube中总共会存在 2^20 = 1,048,576 个 <code>Cuboid</code></li></ul></blockquote><blockquote><p><strong>剪枝优化</strong>:</p><ul><li>需要选择跳过那些“多余”的<code>Cuboid</code></li><li>有的<code>Cuboid</code>因为查询样式的原因永远不会被查询到，因此显得多余</li><li>有的<code>Cuboid</code>的能力和其他<code>Cuboid</code>接近，因此显得多余</li></ul></blockquote><h4 id="5-2、检查Cuboid数量"><a href="#5-2、检查Cuboid数量" class="headerlink" title="5.2、检查Cuboid数量"></a>5.2、检查<code>Cuboid</code>数量</h4><blockquote><p>使用如下的命令行工具去检查这个<code>Cube</code>中的<code>Cuboid</code>状态：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">kylin.sh org.apache.kylin.engine.mr.common.CubeStatsReader lagou_sales_cube4<span class="token comment" spellcheck="true">##结果</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Statistics of lagou_sales_cube4<span class="token punctuation">[</span>20201001000000_20201004000000<span class="token punctuation">]</span> Cube statistics hll precision: 14 Total cuboids: 15 Total estimated rows: 203 Total estimated size<span class="token punctuation">(</span>MB<span class="token punctuation">)</span>: 0.0027539730072021484 Sampling percentage: 100 Mapper overlap ratio: 0.0 Mapper number: 0 Length of dimension LAGOU_KYLIN.DW_SALES1.DT is 1 Length of dimension LAGOU_KYLIN.DW_SALES1.PRODUCTID is 1 Length of dimension LAGOU_KYLIN.DW_SALES1.CHANNELID is 1 Length of dimension LAGOU_KYLIN.DW_SALES1.REGIONID is 1 <span class="token operator">|</span>---- Cuboid 1111, est row: 54, est MB: 0     <span class="token operator">|</span>---- Cuboid 0111, est row: 18, est MB: 0, shrink: 33.33%         <span class="token operator">|</span>---- Cuboid 0011, est row: 6, est MB: 0, shrink: 33.33%             <span class="token operator">|</span>---- Cuboid 0001, est row: 2, est MB: 0, shrink: 33.33%             <span class="token operator">|</span>---- Cuboid 0010, est row: 3, est MB: 0, shrink: 50%         <span class="token operator">|</span>---- Cuboid 0101, est row: 8, est MB: 0, shrink: 44.44%             <span class="token operator">|</span>---- Cuboid 0100, est row: 4, est MB: 0, shrink: 50%         <span class="token operator">|</span>---- Cuboid 0110, est row: 9, est MB: 0, shrink: 50%     <span class="token operator">|</span>---- Cuboid 1011, est row: 18, est MB: 0, shrink: 33.33%         <span class="token operator">|</span>---- Cuboid 1001, est row: 6, est MB: 0, shrink: 33.33%             <span class="token operator">|</span>---- Cuboid 1000, est row: 3, est MB: 0, shrink: 50%         <span class="token operator">|</span>---- Cuboid 1010, est row: 9, est MB: 0, shrink: 50%     <span class="token operator">|</span>---- Cuboid 1101, est row: 24, est MB: 0, shrink: 44.44%         <span class="token operator">|</span>---- Cuboid 1100, est row: 12, est MB: 0, shrink: 50%     <span class="token operator">|</span>---- Cuboid 1110, est row: 27, est MB: 0, shrink: 50%    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>所有的 <code>Cuboid</code> 及它的分析结果都以树状的形式打印了出来</li><li>在这棵树中，每个节点代表一个<code>Cuboid</code>，每个<code>Cuboid</code>都由一连串1或0的数字组成</li><li>数字串的长度等于有效维度的数量，从左到右的每个数字依次代表<code>Rowkeys</code>设置中的各个维度。如果数字为0，则代表这个<code>Cuboid</code>中不存在相应的维度；如果数字为1，则代表这个<code>Cuboid</code>中存在相应的维度</li><li>除了最顶端的<code>Cuboid</code>之外，每个<code>Cuboid</code>都有一个父亲<code>Cuboid</code>，且都比父亲<code>Cuboid</code>少了一个“1”。其意义是这个<code>Cuboid</code>就是由它的父亲节点减少一个维度聚合而来的（上卷）</li><li>最顶端的<code>Cuboid</code>称为<code>Base Cuboid</code>，它直接由源数据计算而来。<code>Base Cuboid</code>中包含所有的维度，因此它的数字串中所有的数字均为1</li><li>每行<code>Cuboid</code>的输出中除了0和1的数字串以外，后面还有每个Cuboid的具体信息，包括该<code>Cuboid</code>行数的估计值、该<code>Cuboid</code>大小的估计值，以及这个<code>Cuboid</code>的行数与父亲节点的对比（<code>Shrink值</code>）</li><li>所有<code>Cuboid</code>行数的估计值之和应该等于<code>Segment</code>的行数估计值，所有<code>Cuboid</code>的大小估计值应该等于该<code>segment</code>的大小估计值。每个<code>Cuboid</code>都是在它的父亲节点的基础上进一步聚合而成的</li></ul></blockquote><h4 id="5-3、检查Cube的大小"><a href="#5-3、检查Cube的大小" class="headerlink" title="5.3、检查Cube的大小"></a>5.3、检查<code>Cube</code>的大小</h4><blockquote><p>在<code>Web GUI</code>的<code>Model</code>页面选择一个<code>READY</code>状态的<code>Cube</code>，光标移到该<code>Cube</code>的<code>CubeSize</code>列时，</p><p><code>WebGUI</code>会提示<code>Cube</code>的源数据大小，以及当前<code>Cube</code>的大小除以源数据大小的比例，称为膨胀</p><p>率(Expansion Rate）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220803154136385.png"></p><blockquote><p>一般来说，<code>Cube</code>的膨胀率应该在0%~1000%之间，如果一个<code>Cube</code>的膨胀率超过1000%，那么应当查</p><p>找其中的原因。膨胀率高可能有以下几个方面的原因：</p><ul><li><p><code>Cube</code>中的维度数量较多，且没有进行很好的<code>Cuboid</code>剪枝优化，导致<code>Cuboid</code>数量极多</p></li><li><p><code>Cube</code>中存在较高基数的维度（基数的维度是指维度中有多少个不同的值），导致包含</p><p>这类维度的每一个<code>Cuboid</code>占用的空间都很大，这些<code>Cuboid</code>累积造成整体<code>Cube</code>体积变大</p></li><li><p>存在占用空间大的度量。例如<code>Count Distinct</code>，因此需要在Cuboid的每一行中都为其</p><p>保存一个较大度量数据，最坏的情况将会导致<code>Cuboid</code>中每一行都有数十KB，从而造成</p><p>整个<code>Cube</code>的体积变大</p></li></ul></blockquote><h4 id="5-4使用衍生维度"><a href="#5-4使用衍生维度" class="headerlink" title="5.4使用衍生维度"></a>5.4使用衍生维度</h4><blockquote><p>一个维度可以是<strong>普通维度</strong>或者是<strong>衍生维度</strong>(<code>Derived</code>)。</p></blockquote><blockquote><p>将维度表的维度设置为<strong>衍生维度</strong>，这个维度不会参与预计算，而是使用<strong>维度表的主键</strong>(或<strong>事实表的外键</strong>)</p><p>来替代它。</p><p><code>Kylin</code>会<strong>在底层记录维表主键与维度表其他维度之间的映射关系</strong>，以便在查询时能够动态地将维度表的</p><p>主键翻译成这些非主键维度，并进行实时聚合。</p></blockquote><blockquote><p>使用衍生维度会有效减少<code>Cube</code>中 <code>Cuboid</code>的数量；但在查询时会增加聚合的时间。</p><p><strong>不适用的场景</strong>：</p><p>如果从维度表主键到某个维度表维度所需要的聚合工作量非常大，此时作为一个普通的维度聚合更合</p><p>适，否则会影响<code>Kylin</code>的查询性能</p></blockquote><h4 id="5-5、高级设置"><a href="#5-5、高级设置" class="headerlink" title="5.5、高级设置"></a>5.5、高级设置</h4><blockquote><p>随着维度数目的增加，<code>Cuboid</code> 的数量会爆炸式地增长。为了缓解 <code>Cube</code>的构建压力，<code>Apache Kylin</code> 引</p><p>入了一系列的高级设置，帮助用户筛选出真正需要的<code>Cuboid</code>（本质是要减少<code>Cube</code>构建过程中的预计算）。这些高级设置包括：</p><ul><li>聚合组（<code>Aggregation Group</code>）</li><li>强制维度（<code>Mandatory Dimension</code>）</li><li>层级维度（<code>Hierachy Dimension</code>）</li><li>联合维度（<code>Joint Dimension</code>）</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804100730012.png"></p><h5 id="5-5-1、聚合组"><a href="#5-5-1、聚合组" class="headerlink" title="5.5.1、聚合组"></a>5.5.1、聚合组</h5><blockquote><p>默认 <code>Kylin</code>会把所有维度放在同一个聚合组中。</p><p>如果维度数较多（如维度数 &gt; 15），建议用户根据查询的习惯和模式，将维度分布到多个聚合组中。通</p><p>过使用多个聚合组，可以大大降低 <code>Cube</code> 中的 <code>Cuboid</code> 数量。</p></blockquote><blockquote><p>如一个<code>Cube</code>有 (<code>M+N</code>) 个维度：</p><ul><li><p>这些维度放在一个聚合组中，默认有 2^(<code>M+N</code>) 个 <code>Cuboid</code></p></li><li><p>将这些维度分为两个不相交的聚合组，第一个组有<code>M</code>个维度，第二个组有<code>N</code>个维度。那么 <code>Cuboid </code>的</p><p>总数为：（ <code>2^M + 2^N</code> ）个维度</p></li><li><p>一个维度可以出现在多个聚合组中</p></li></ul></blockquote><blockquote><p>构建<code> N</code> 个维度的 <code>Cube</code> 会生成 <code>2^N</code>个<code> Cuboid</code>。如下图所示，构建一个 4 个维度（A，B，C, D）的 </p><p><code>Cube</code>，需要生成 16 个<code>Cuboid</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804102524917.png"></p><blockquote><p>根据用户关注的维度组合，可以维度划分不同的组合类，这些组合类在 <code>Kylin</code> 中被称为聚合组。如用户</p><p>仅仅关注维度 <code>AB</code> 组合和维度 <code>CD</code> 组合，那么该 <code>Cube</code> 则可以被分化成两个聚合组，分别是聚合组 <code>AB</code> </p><p>和聚合组 <code>CD</code>。生成的 <code>Cuboid</code> 数目从 16 个缩减为 8 个</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804102626550.png"></p><blockquote><p>用户关心的聚合组之间可能包含相同的维度。如聚合组 <code>ABC</code> 和聚合组 <code>BCD</code> 都包含维度 <code>B</code> 和维度 <code>C</code>。</p><p>这些聚合组之间会衍生出相同的<code> Cuboid</code>。聚合组 <code>ABC </code>会产生<code>Cuboid BC</code>，聚合组 <code>BCD </code>也会产生 </p><p><code>Cuboid BC</code>。这些 Cuboid不会重复生成，一份<code>Cuboid </code>为这些聚合组所共有。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804102725205.png"></p><blockquote><p>有了聚合组就可以<strong>粗粒度</strong>地对 <code>Cuboid</code> 进行筛选，获取自己想要的维度组合。<code>Kylin</code>的建模需要业务</p><p>专家参与。</p></blockquote><h5 id="5-5-2、强制维度（Mandatory-Dimension）"><a href="#5-5-2、强制维度（Mandatory-Dimension）" class="headerlink" title="5.5.2、强制维度（Mandatory Dimension）"></a>5.5.2、强制维度（<code>Mandatory Dimension</code>）</h5><blockquote><p><strong>强制</strong>/<strong>必要</strong> 维度：指的是那些总会出现在<code>Where</code> 条件或<code>Group By</code> 语句中的维度。</p></blockquote><blockquote><p>通过指定某些维度为强制维度，<code>Kylin</code> 不预计算那些不包含此维度的 <code>Cuboid</code> ，从而减少计算量。</p></blockquote><blockquote><p>维度<code>A</code>是强制维度，那么生成的 <code>Cube</code> 如下图所示，维度数目从16变为9。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804103141737.png"></p><h5 id="5-5-3、层级维度（Hierachy-Dimension）"><a href="#5-5-3、层级维度（Hierachy-Dimension）" class="headerlink" title="5.5.3、层级维度（Hierachy Dimension）"></a>5.5.3、层级维度（<code>Hierachy Dimension</code>）</h5><blockquote><p><strong>层级维度：是指一组有层级关系的维度。</strong></p></blockquote><blockquote><p>维度中常常会出现具有层级关系的维度。例如国家、省份、城市这三个维度，从上而下来说国家／省份</p><p>／城市之间分别是一对多的关系。假设维度 A 代表国家，维度 B代表省份，维度 C 代表城市，ABC 三个</p><p>维度可以被设置为层级维度，生成的Cube 如下图所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804103435005.png"></p><blockquote><p><code>Cuboid [A,C,D]</code>=<code>Cuboid[A, B, C, D]</code>，<code>Cuboid[B, D]</code>=<code>Cuboid[A, B, D]</code>，因而</p><p><code>Cuboid[A, C, D]</code> 和<code> Cuboid[B, D]</code> 就不必重复存储</p></blockquote><h5 id="5-5-4、联合维度（Joint-Dimension）"><a href="#5-5-4、联合维度（Joint-Dimension）" class="headerlink" title="5.5.4、联合维度（Joint Dimension）"></a>5.5.4、联合维度（<code>Joint Dimension</code>）</h5><blockquote><p><strong>联合维度</strong>：是将多个维度视作一个维度，在进行组合计算的时候，它们要么<strong>一起出现</strong>，要么</p><p><strong>均不出现</strong>。通常适用于以下几种情形：</p><ul><li>总是在一起查询的维度</li><li>彼此之间有一定映射关系，如USER_ID和EMAIL</li><li>基数很低的维度。如性别、布尔类型的属性</li></ul></blockquote><blockquote><p>例如将维度 A、B、C 定义为联合维度，<code>Apache Kylin </code>就仅仅会构建 <code>Cuboid ABC</code>， </p><p>而 <code>Cuboid AB、BC、A</code> 等等<code>Cuboid</code> 都不会被生成。最终的 <code>Cube</code> 结果如下图所示，</p><p><code>Cuboid</code> 数目从 16 减少到 4。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804103918879.png"></p><h5 id="5-5-5、小结"><a href="#5-5-5、小结" class="headerlink" title="5.5.5、小结"></a>5.5.5、小结</h5><ul><li><p>在单个聚合组中，可以对维度进行设置，包括<strong>强制维度</strong>、<strong>层级维度</strong>、<strong>联合维度</strong>。<strong>一个维度</strong>只能出现在一个</p><p>属性组中</p></li><li><p>强制维度：指的是那些总会出现在<code>Where</code>条件或<code>Group By</code>子句中的维度</p></li><li><p>层级维度：一组具有层级关系的维度(如：国家、省、市)</p></li><li><p>联合维度：将多个维度看成一个维度。要么一起出现、要么都不出现</p></li></ul><h4 id="5-6、Rowkeys"><a href="#5-6、Rowkeys" class="headerlink" title="5.6、Rowkeys"></a>5.6、<code>Rowkeys</code></h4><blockquote><p>简单的说<code>Cuboid</code>的维度会映射为<code>HBase</code>的<code>Rowkey</code>，<code>Cuboid</code>的指标会映射为<code>HBase</code>的<code>Value</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804104141601.png"></p><blockquote><p>所有的<code>cuboid</code>计算完成后，会将<code>cuboid</code>转化为<code>HBase</code>的 <code>KeyValue</code> 格式生成<code>HBase</code>的<code>HFile</code>，最</p><p>后将<code>HFile</code>  <code>load</code>进<code>cube</code>对应的<code>HBase</code>表中。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804105117937.png"></p><h5 id="5-6-1、编码"><a href="#5-6-1、编码" class="headerlink" title="5.6.1、编码"></a>5.6.1、编码</h5><blockquote><p><code>Kylin</code> 以 <code>Key-Value</code> 的方式将 <code>Cube</code> 存储到 <code>HBase</code> 中，<code>HBase</code> 的 <code>key</code>就是<code>Rowkey</code>，是由各维度的</p><p>值拼接而成的。为了更高效地存储这些值，<code>Kylin</code> 会对它们进行编码和压缩；每个维度均可以选择合适</p><p>的编码方式，默认采用的是字典（<code>Dictionary</code>）编码技术。字段支持的基本编码类型如下：</p><ul><li><p><code>Dictionary </code>：字典编码将所有此维度下的值构成一张映射表，从而大大节约存储空间，适用于</p><p>大部分字段，<strong>默认推荐使用</strong>。<code>Dictionary</code>产生的编码非常紧凑，尤其在维度的值基数小且长度大的</p><p>情况下。但在<strong>超高基情况下，可能引起内存不</strong>足的问题，在<code>Kylin</code>中字典编码允许的基数上限默认</p><p>是500万(由参数<code>kylin.dictionary.max.cardinality</code> 配置)</p></li><li><p><code>boolean</code> ：适用于字段值为 <code>true</code>, <code>false</code>, <code>TRUE</code>, <code>FALSE</code>, <code>True</code>, <code>False</code>, <code>t</code>, <code>f</code>, <code>T</code>, <code>F</code>, <code>yes</code>, <code>no</code>,</p><p> <code>YES</code>, <code>NO</code>, <code>Yes</code>, <code>No</code>, <code>y</code>, <code>n</code>, <code>Y</code>, <code>N</code>, <code>1</code>, <code>0</code></p></li><li><p><code>integer</code> ：适用于字段值为<strong>整数字符</strong>，支持的整数区间为 <code>[ -2^(8N-1), 2^(8N- 1)] </code></p></li><li><p><code>date</code> ：适用于字段值为<strong>日期字符</strong>，支持的格式包括 <code>yyyyMMdd</code>、<code>yyyy-MM-dd</code>、 </p><p><code>yyyy-MM-dd</code> <code>HH:mm:ss</code>、<code>yyyy-MM-dd HH:mm:ss.SSS</code> </p></li><li><p><code>time</code> ：适用于字段值为<strong>时间戳字符</strong>，支持范围为 <code>[1970-01-01 00:00:00, 2038/01/19 </code></p><p><code>03:14:07]</code> ，毫秒部分会被忽略，<code>time</code>编码适用于 <code>time</code>、<code>datetime</code>、<code>timestamp</code> 等类型</p></li><li><p><code>fix_length</code> ：<strong>适用于超高基场景</strong>，将选取字段的前 <code>N </code>个字节作为编码值，当 <code>N</code>小于字段长度，</p><p>会造成字段截断，当 N 较大时，造成<code> RowKey</code> 过长，查询性能下降，只适用于 <code>varchar</code> 或 </p><p><code>nvarchar</code> 类型</p></li><li><p><code>fixed_length_hex</code> ：适用于字段值为十六进制字符，比如 <code>1A2BFF </code>或者<code>FF00FF</code>，每两个字符需</p><p>要一个字节，只适用于<code> varchar</code> 或 <code>nvarchar </code>类型</p></li></ul></blockquote><h5 id="5-6-2、顺序"><a href="#5-6-2、顺序" class="headerlink" title="5.6.2、顺序"></a>5.6.2、顺序</h5><blockquote><p>各维度在 <code>Rowkeys</code> 中的顺序，对于查询的性能会产生较明显的影响；在这里用户可以根据查询的模式和</p><p>习惯，<strong>通过拖曳的方式</strong>调整各个维度在<code>Rowkeys</code>上的顺序。推荐的顺序为：</p><ul><li><code>Mandatory</code> 维度</li><li><code>where</code> 过滤条件中出现频率较多的维度</li><li>高基数维度</li><li>低基数维度放后面</li><li>不常用的维度放在后面</li></ul></blockquote><h5 id="5-6-3、分片"><a href="#5-6-3、分片" class="headerlink" title="5.6.3、分片"></a>5.6.3、分片</h5><blockquote><p>指定 <code>ShardBy </code>的列，明细数据将按照该列的值分片；没有指定 <code>ShardBy </code>的列，则默</p><p>认将根据所有列中的数据进行分片；选择适当的 <code>ShardBy</code>列，可以使明细数据较为</p><p>均匀的分散在多个数据片上，提高并行性，进而获得更理想的查询效率；</p></blockquote><blockquote><p><strong>建议选择基数较大的列作为 <code>ShardBy</code>列，以避免数据分散不均匀</strong>。</p></blockquote><h3 id="6、流式构建"><a href="#6、流式构建" class="headerlink" title="6、流式构建"></a>6、流式构建</h3><blockquote><p>实时数据更新是一种普遍的需求，快速分析变化趋势才能做出正确的决策。</p><p><code>Kylin V1.6</code> 发布了可扩展的 <code>streaming cubing</code> 功能，它利用<code> Hadoop</code> 消费 <code>Kafka</code> 数</p><p>据的方式构建 <code>cube</code>，这种方式构建的<code>Cube</code>能满足分钟级的更新需求。</p></blockquote><blockquote><p><strong>步骤：项目</strong> <strong>=&gt;</strong> <strong>定义数据源（</strong><code>Kafka</code>） <strong>=&gt;</strong> <strong>定义</strong><code>Model</code> =&gt; **定义<code>Cube</code> =&gt; <code>Build Cube</code></p><p><strong>=&gt;</strong> <strong>作业调度（频率高）</strong></p></blockquote><h4 id="6-1、准备数据源"><a href="#6-1、准备数据源" class="headerlink" title="6.1、准备数据源"></a>6.1、准备数据源</h4><blockquote><p>从<code>Kafka</code>消费消息，每条消息都需要包含：<strong>维度信息、度量信息、业务时间戳</strong>。</p><p>每条消息的数据结构都应该相同，并且可以用同一个分析器将每条消息中的维度、度</p><p>量和时间戳信息提取出来。</p><p><strong>目前默认的分析器为</strong>：<code>org.apache.kylin.source.kafka.TimedJsonStreamParser</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建名为kylin_streaming_topic的topic，有三个分区 </span>kafka-topics.sh --create --zookeeper linux121:2181/kafka1.0 -- replication-factor 1 --partitions 3 --topic kylin_streaming_topic1 <span class="token comment" spellcheck="true"># 使用工具，向以上topic每秒发送100条记录 </span>kylin.sh org.apache.kylin.source.kafka.util.KafkaSampleProducer --topic kylin_streaming_topic1 --broker linux121:9092,linux122:9092 <span class="token comment" spellcheck="true"># 检查消息是否成功发送 </span>kafka-console-consumer.sh --bootstrap-server linux121:9092,linux122:9092 --topic kylin_streaming_topic1 -- from-beginning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Json</code>数据样例</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"INDIA"</span><span class="token punctuation">,</span>    <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">61.8908749389114</span><span class="token punctuation">,</span>    <span class="token property">"qty"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>     <span class="token property">"currency"</span><span class="token operator">:</span> <span class="token string">"USD"</span><span class="token punctuation">,</span>    <span class="token property">"order_time"</span><span class="token operator">:</span> <span class="token number">1604976730796</span><span class="token punctuation">,</span>     <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"ELECTRONIC"</span><span class="token punctuation">,</span>     <span class="token property">"device"</span><span class="token operator">:</span> <span class="token string">"Andriod"</span><span class="token punctuation">,</span>     <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"Female"</span><span class="token punctuation">,</span>         <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"d7454b73-e24e-2f28-513e-5ea3e03b082f"</span><span class="token punctuation">,</span>         <span class="token property">"first_name"</span><span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span>         <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2、定义数据源"><a href="#6-2、定义数据源" class="headerlink" title="6.2、定义数据源"></a>6.2、定义数据源</h4><table><thead><tr><th>Add Streaming Table</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804111642728.png"></td></tr><tr><td>定义<code>Schema</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804111701248.png"></td></tr><tr><td>定义<code>kafka</code>信息</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804111729032.png"></td></tr><tr><td>检查结果</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804111750414.png"></td></tr></tbody></table><h4 id="6-3、定义Model"><a href="#6-3、定义Model" class="headerlink" title="6.3、定义Model"></a>6.3、定义<code>Model</code></h4><table><thead><tr><th><code>Model Designer</code></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135535889.png"></td></tr><tr><td><code>Data Model</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135552706.png"></td></tr><tr><td><code>Dimensions</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135606933.png"></td></tr><tr><td><code>Measures</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135624624.png"></td></tr><tr><td><code>settings</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135645897.png"></td></tr></tbody></table><h4 id="6-4、定义Cube"><a href="#6-4、定义Cube" class="headerlink" title="6.4、定义Cube"></a>6.4、定义<code>Cube</code></h4><table><thead><tr><th><code>Cube Info</code></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135752113.png"></td></tr><tr><td><code>Dimensions</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135809650.png"></td></tr><tr><td><code>Measures</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135827946.png"></td></tr><tr><td><code>Refresh Setting</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804135844854.png"></td></tr><tr><td>Advanced Setting</td></tr><tr><td>将衍生时间维度设置为<code>Hierarchy</code>关系，减少非必要计算,<br>在<code>Rowkey</code>部分，将用户最频繁用作过滤的列、筛选性强的列放在<code>Rowkey</code>的开始</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804140016225.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804140030369.png"></td></tr></tbody></table><blockquote><p><code>Streaming Cube</code> <strong>和普通的</strong> <code>cube</code> <strong>大致上一样。以下几点需要注意：</strong></p><ul><li><p>分区时间列应该是 <code>Cube</code> 的一个 <code>dimension</code>。在 <code>Streaming OLAP</code> 中时间总是一个查询条件，</p><p><code>Kylin</code> 利用它来缩小扫描分区的范围</p></li><li><p>不要使用 <code>order_time </code>作为 <code>dimension</code> 因为它非常的精细；建议使用<code>mintue_start</code>、</p><p><code>hour_start</code> 或其他，取决于用户如何查询数据</p></li><li><p>定义 <code>year_start</code>、<code>quarter_start</code>、<code>month_start</code>、<code>day_start</code>，<code>hour_start</code>，</p><p><code>minute_start</code> 作为层级以减少组合计算</p></li><li><p>在 <code>refersh setting </code>设置中，创建更多合并的范围，如 0.5 小时、4 小时、1 天、7 天；这样设置</p><p>有助于控制 <code>cube segment</code> 的数量</p></li><li><p>在<code> rowkeys</code> 部分，拖拽 <code>minute_start</code> 到最上面的位置，对于 <code>streaming</code> 查询，时间条件会一</p><p>直显示；将其放到前面将会缩小扫描范围</p></li></ul></blockquote><h4 id="6-5构建Cube"><a href="#6-5构建Cube" class="headerlink" title="6.5构建Cube"></a>6.5构建<code>Cube</code></h4><pre class="line-numbers language-bash"><code class="language-bash">curl -X PUT --user ADMIN:KYLIN -H <span class="token string">"Content-Type: application/json;charset=utf-8"</span> -d <span class="token string">'{ "sourceOffsetStart": 0, "sourceOffsetEnd": 9223372036854775807, "buildType": "BUILD"}'</span> http://linux122:7070/kylin/api/cubes/streamingcube1/build2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804140451417.png"></p><h4 id="6-6、执行查询"><a href="#6-6、执行查询" class="headerlink" title="6.6、执行查询"></a>6.6、执行查询</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>     minute_start<span class="token punctuation">,</span>     <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">sum</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span> <span class="token keyword">from</span>     streamingds1 <span class="token keyword">group</span> <span class="token keyword">by</span>     minute_start <span class="token keyword">order</span> <span class="token keyword">by</span>     minute_start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-7、自动构建Cube"><a href="#6-7、自动构建Cube" class="headerlink" title="6.7、自动构建Cube"></a>6.7、自动构建<code>Cube</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -e */20 * * * * curl -X PUT --user ADMIN:KYLIN -H <span class="token string">"Content-Type: application/json;charset=utf-8"</span> -d <span class="token string">'{ "sourceOffsetStart": 0, "sourceOffsetEnd": 9223372036854775807, "buildType": "BUILD"}'</span> http://linux122:7070/kylin/api/cubes/streamingcube1/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7、实时OLAP"><a href="#7、实时OLAP" class="headerlink" title="7、实时OLAP"></a>7、实时<code>OLAP</code></h3><blockquote><p><code>Kylin V3.0.0</code>发布了全新的实时<code>OLAP</code>功能，借助新添加的流接收器群集的功能，<code>Kylin</code>可以以亚秒</p><p>级的延迟查询流数据。如果希望以微批量方式（大约10分钟的延迟）接收<code>kafka</code>事件，则可以考虑使</p><p>用流式构建。这两个功能全部用于<code> Kafka</code> 数据源，勿混合使用。</p></blockquote><h4 id="7-1、基本概念"><a href="#7-1、基本概念" class="headerlink" title="7.1、基本概念"></a>7.1、基本概念</h4><blockquote><p><code>Kylin</code>实时<code>OLAP</code>的组件:</p><ul><li><code>Kafka Cluster</code> [<code>data source</code>]</li><li><code>Kylin Process</code> [<code>job server/query server/coordinator</code>]</li><li><font color="red"><strong>Kylin streaming receiver Cluster [real-time part computation and storage]</strong></font></li><li><code>HBase Cluster</code> [<code>historical part storage</code>]</li><li><font color="red"><strong>Zookeeper Cluster [receiver metadata storage]</strong></font></li><li><code>MapReduce</code> [<code>distributed computation</code>]</li><li><code>HDFS</code> [<code>distributed storage</code>]</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220804143239386.png"></p><blockquote><p><strong>Streaming Coordinator</strong>：</p><p><code>Streaming coordinator</code>充当<code>streaming receiver cluster</code>的<code>master node</code>。其主要职</p><p>责包括：分配/取消分配特定的<code>topic partition</code>给特定的副本集，暂停或继续使用，收集消</p><p>费速率（每秒消息）等详细信息。</p></blockquote><blockquote><p><strong>Coordinator Cluster</strong>：</p><p>为了消除单点故障，我们可以启动多个<code>coordinator</code>程序。当集群具有多个<code>coordinator</code>程序时，</p><p><code>zookeeper</code>将选择一个<code>leader</code>。只有<code>leader</code>将回答<code>coordinator</code>客户端的请求，其他进程将</p><p>成为备用/候选者，因此将消除单点故障。</p></blockquote><blockquote><p><strong>Streaming Receiver</strong>：</p><p><code>Streaming Receiver</code>是工作节点。它由<code>Streaming Coordinator</code>管理，其职责如</p><p>下：</p><ul><li>摄取（<code>ingest</code>）实时事件</li><li>在本地构建基本<code>cuboid</code>（如果配置正确，则可以构建更多<code>cuboid</code>）</li><li>回答查询请求以获取分配给自身的部分数据</li><li>将本地<code>segment</code>缓存上传到<code>HDFS</code>或在<code>segment</code>状态更改为不可变时将其删除</li></ul></blockquote><blockquote><p><strong>Receiver Cluster</strong>：</p><p>所有<code>streaming receiver</code>的集合称为<code>receiver cluster</code>。</p></blockquote><blockquote><p><strong>Replica Set</strong>：</p><p><code>Replica Set</code>是<strong>一组</strong><code>streaming receivers</code>。<code>Replica Set</code>是任务分配的最小单位，这意味着一个</p><p><code>Replica Set</code>中的所有<code>receivers</code>都将执行相同的任务（包含相同的主题分区）。当某些<code>receiver</code>意</p><p>外关闭但所有<code>replica set</code>都具有至少一个可访问的<code>receiver</code>时，<code>receiver cluster</code>仍可查询，并</p><p>且数据不会丢失。</p></blockquote><h4 id="7-2、准备环境"><a href="#7-2、准备环境" class="headerlink" title="7.2、准备环境"></a>7.2、准备环境</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers<span class="token comment" spellcheck="true"># coordinator </span><span class="token function">cp</span> -r kylin-3.1.1/ kylin-3.1.1-master/ <span class="token comment" spellcheck="true"># receiver </span><span class="token function">cp</span> -r kylin-3.1.1/ kylin-3.1.1-receiver/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-2-1、开启Kylin进程"><a href="#7-2-1、开启Kylin进程" class="headerlink" title="7.2.1、开启Kylin进程"></a>7.2.1、开启<code>Kylin</code>进程</h5><blockquote><p><code>kylin</code>进程将充当<code>receiver cluster</code>的<code>coordinator</code>。7070是<code>coordinator</code>的默认端口。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/lagou/servers/kylin-3.1.1-master/bin ./kylin.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="7-2-2、开启Receiver-Process"><a href="#7-2-2、开启Receiver-Process" class="headerlink" title="7.2.2、开启Receiver Process"></a>7.2.2、开启<code>Receiver Process</code></h5><blockquote><p><code>receiver process</code>将作为<code>receiver cluster</code>的工作方。9090是<code>receiver</code>的默认端口。</p></blockquote><pre class="line-numbers language-ba"><code class="language-ba">cd /opt/lagou/servers/kylin-3.1.1-receiver/bin ./kylin.sh streaming start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="7-2-3、模拟数据流"><a href="#7-2-3、模拟数据流" class="headerlink" title="7.2.3、模拟数据流"></a>7.2.3、模拟数据流</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用工具，每秒会向以上topic每秒发送100条记录 </span>kylin.sh org.apache.kylin.source.kafka.util.KafkaSampleProducer --topic kylin_streaming_topic1 --broker linux121:9092,linux122:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-3、创建Cube"><a href="#7-3、创建Cube" class="headerlink" title="7.3、创建Cube"></a>7.3、创建<code>Cube</code></h4><blockquote><p>步骤：定义数据源 =&gt; 定义<code>Model</code> =&gt; 定义<code>Cube</code> =&gt; <code>Enable Cube</code> =&gt; <code>Kafka</code>发送消息</p><p><code>Model</code>、<code>Cube</code>与前面介绍的方式类似。</p></blockquote><h5 id="7-3-1、定义数据源"><a href="#7-3-1、定义数据源" class="headerlink" title="7.3.1、定义数据源"></a>7.3.1、定义数据源</h5><table><thead><tr><th>定义数据源</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090443681.png"></td></tr><tr><td>定义<code>Kafka</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090509623.png"></td></tr><tr><td><code>Streaming Table</code></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090533884.png"></td></tr><tr><td>检查结果</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090549159.png"></td></tr></tbody></table><h5 id="7-3-2、定义Model"><a href="#7-3-2、定义Model" class="headerlink" title="7.3.2、定义Model"></a>7.3.2、定义<code>Model</code></h5><table><thead><tr><th>当前，流<code>cube</code>不支持与<code>lookup tables</code>连接，定义数据模型时，仅选择<code>fact table</code>，不提供<code>lookup table</code></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090712294.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090721955.png"></td></tr><tr><td>流<code>cube</code>必须分区，选择<code>timestamp</code>列作为分区列</td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090738303.png"></td></tr></tbody></table><h5 id="7-3-3、定义Cube"><a href="#7-3-3、定义Cube" class="headerlink" title="7.3.3、定义Cube"></a>7.3.3、定义<code>Cube</code></h5><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090811896.png"></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090820486.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090831022.png"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805090844792.png"></td></tr></tbody></table><blockquote><p>流<code>Cube</code>与普通<code>cube</code>几乎相同。需要注意以下几点：</p><ul><li><p>选择<code>MapReduce</code>作为构建引擎，现在不支持<code>Spark</code></p></li><li><p><code>kylin.stream.cube.window</code> 将决定如何将事件<code>event</code>划分到不同的<code>segment</code>，它是每个</p><p><code>segment</code>的持续时间，以秒为单位的值，默认值为3600</p></li><li><p><code>kylin.stream.cube.duration</code> 确定<code>segment</code>等待迟到事件event的时间</p></li><li><p><code>kylin.stream.segment.retention.policy</code> 当<code>Segment</code>状态变为<code>IMMUTABLE</code>，该配置指定了</p><p><code>Receiver</code>如何处理本地<code>Segment Cache</code>。可选值包含<code>purge</code>和<code>fullBuild</code></p><ul><li>设置为<code>purge</code>后，<code>Receiver</code>会等待一定时间后删除本地数据</li><li>设置为<code>fullBuild</code>后，数据会上传到<code>HDFS</code>并等待构建。默认值是<code>fullBuild</code></li></ul></li></ul></blockquote><h5 id="7-3-4、Enable-Cube"><a href="#7-3-4、Enable-Cube" class="headerlink" title="7.3.4、Enable Cube"></a>7.3.4、<code>Enable Cube</code></h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805091216007.png"></p><h5 id="7-3-5、开始消费"><a href="#7-3-5、开始消费" class="headerlink" title="7.3.5、开始消费"></a>7.3.5、开始消费</h5><blockquote><p><strong>创建</strong><code>replica set</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805091249425.png"></p><blockquote><p>启动消费</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Kylin/image-20220805091329555.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Kylin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的使用教程（一）</title>
      <link href="/2022/07/28/linux-yi/"/>
      <url>/2022/07/28/linux-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><p>本篇文章进仅供参考</p><p>阿里云主机密码   </p><p>阿里云 售后服务人员  孙仕鑫   95187</p></blockquote><blockquote><p>​<code>47.99.59.135</code> / <code>Root123!@#</code></p><p> ​<code>47.99.44.244</code> / <code>Root123!@#</code></p></blockquote><h2 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h2><hr><blockquote><p>修改主机名字，无需重启，重启也不影响</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/hosts<span class="token comment" spellcheck="true">#添加映射</span>IP NAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-BASH'"><code class="language-BASH'">vi /etc/hostname修改名字name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>hostname name</code></pre><blockquote><p><code>yum</code> 软件 命令</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>yum repolist all</code></td><td>列出所有仓库</td></tr><tr><td><code>yum list all</code></td><td>列出仓库中所有软件包</td></tr><tr><td><code>yum info 软件包名称</code></td><td>查看软件包信息</td></tr><tr><td><code>yum install 软件包名称</code></td><td>安装软件包</td></tr><tr><td><code>yum reinstall 软件包名称</code></td><td>重新安装软件包</td></tr><tr><td><code>yum update 软件包名称</code></td><td>升级软件包</td></tr><tr><td><code>yum remove 软件包名称</code></td><td>移除软件包</td></tr><tr><td><code>yum clean all</code></td><td>清除所有仓库缓存</td></tr><tr><td><code>yum check-update</code></td><td>检查可更新的软件包</td></tr><tr><td><code>yum grouplist</code></td><td>查看系统中已经安装的软件包组</td></tr><tr><td><code>yum groupinstall 软件包组</code></td><td>安装指定的软件包组</td></tr><tr><td><code>yum groupremove 软件包组</code></td><td>移除指定的软件包组</td></tr><tr><td><code>yum groupinfo 软件包组</code></td><td>查询指定的软件包组信息</td></tr></tbody></table><blockquote><p>日期命令</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>%S</code></td><td>秒（00～59）</td></tr><tr><td><code>%M</code></td><td>分钟（00～59）</td></tr><tr><td><code>%H</code></td><td>小时（00～23）</td></tr><tr><td><code>%I</code></td><td>小时（00～12）</td></tr><tr><td><code>%m</code></td><td>月份（1~12）</td></tr><tr><td><code>%p</code></td><td>显示出AM或PM</td></tr><tr><td><code>%a</code></td><td>缩写的工作日名称（例如：Sun）</td></tr><tr><td><code>%A</code></td><td>完整的工作日名称（例如：Sunday）</td></tr><tr><td><code>%b</code></td><td>缩写的月份名称（例如：Jan）</td></tr><tr><td><code>%B</code></td><td>完整的月份名称（例如：January）</td></tr><tr><td><code>%q</code></td><td>季度（1~4）</td></tr><tr><td><code>%y</code></td><td>简写年份（例如：20）</td></tr><tr><td><code>%Y</code></td><td>完整年份（例如：2020）</td></tr><tr><td><code>%d</code></td><td>本月中的第几天</td></tr><tr><td><code>%j</code></td><td>今年中的第几天</td></tr><tr><td><code>%n</code></td><td>换行符（相当于按下回车键）</td></tr><tr><td><code>%t</code></td><td>跳格（相当于按下Tab键）</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看时间</span><span class="token function">date</span><span class="token comment" spellcheck="true">##按照`年-月-日 小时:分钟:秒`查看时间</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span><span class="token comment" spellcheck="true">#将系统的当前时间设置为2020年11月1日8点30分</span><span class="token function">date</span> -s <span class="token string">"20201101 8:30:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>时区设置</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>status</code></td><td>显示状态信息</td></tr><tr><td><code>list-timezones</code></td><td>列出已知时区</td></tr><tr><td><code>set-time</code></td><td>设置系统时间</td></tr><tr><td><code>set-timezone</code></td><td>设置时区</td></tr></tbody></table><blockquote><p><code>top</code> 命令</p><ul><li><p>第1行：系统时间、运行时间、登录终端数、系统负载（3个数值分别为1分钟、5分钟、15分钟内的平均值，数值越小意味着负载越低）。</p></li><li><p>第2行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</p></li><li><p>第3行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的</p><p>资源百分比等。其中数据均为CPU数据并以百分比格式显示，例如“99.9 id”意味着有99.9%的CPU处</p><p>理器资源处于空闲。</p></li><li><p>第4行：物理内存总量、内存空闲量、内存使用量、作为内核缓存的内存量。</p></li><li><p>第5行：虚拟内存总量、虚拟内存空闲量、虚拟内存使用量、已被提前加载的内存量。</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220815145714200.png"></p><blockquote><p>查看系统内核版本与系统架构等信息</p><p><strong>内核名称</strong>、<strong>主机名</strong>、<strong>内核发行版本</strong>、节点名、压制时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uname</span> -aLinux hcs32 3.10.0-957.21.3.el7.x86_64 <span class="token comment" spellcheck="true">#1 SMP Tue Jun 18 16:35:19 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>查看系统的负载信息</p><p>显示<strong>当前系统时间</strong>、<strong>系统已运行时间</strong>、<strong>启用终端数量</strong>以及<strong>平均负载值等信息</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uptime</span>15:03:40 up  5:13,  2 users,  load average: 0.05, 0.04, 0.05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>显示当前系统中内存的使用量信息<code>free</code></p></blockquote><table><thead><tr><th></th><th>内存总量</th><th>已用量</th><th>空闲量</th><th>进程共享的内存量</th><th>磁盘缓存的内存量</th><th>缓存的内存量</th><th>可用量</th></tr></thead><tbody><tr><td></td><td>total</td><td>used</td><td>free</td><td>shared</td><td>buffers</td><td>buff/cache</td><td>available</td></tr><tr><td><code>Mem</code>:</td><td><code>1.9Gi</code></td><td><code>1.4Gi</code></td><td><code>99Mi</code></td><td><code>20Mi</code></td><td><code>450Mi</code></td><td><code>348Mi</code></td><td></td></tr><tr><td><code>Swap</code>:</td><td><code>2.0Gi</code></td><td><code>80Mi</code></td><td><code>1.9Gi</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>查看当前登入主机的用户终端信息</p></blockquote><pre class="line-numbers language-bsh"><code class="language-bsh">[hdp@hcs32 ~]$ whoroot     pts/0        2022-08-15 09:52 (175.167.148.235)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>用于按照指定条件来查找文件所对应的位置<code>find</code></p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-name</code></td><td>匹配名称</td></tr><tr><td><code>-perm</code></td><td>匹配权限（mode为完全匹配，-mode为包含即可）</td></tr><tr><td><code>-user</code></td><td>匹配所有者</td></tr><tr><td><code>-group</code></td><td>匹配所有组</td></tr><tr><td><code>-mtime -n +n</code></td><td>匹配修改内容的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td><code>-atime -n +n</code></td><td>匹配访问文件的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td><code>-ctime -n +n</code></td><td>匹配修改文件权限的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td><code>-nouser</code></td><td>匹配无所有者的文件</td></tr><tr><td><code>-nogroup</code></td><td>匹配无所有组的文件</td></tr><tr><td><code>-newer f1 !f2</code></td><td>匹配比文件<code>f1</code>新但比<code>f2</code>旧的文件</td></tr><tr><td><code>-type b/d/c/p/l/f</code></td><td>匹配文件类型（后面的字幕字母依次表示块设备、目录、字符设备、管道、链接文件、文本文件）</td></tr><tr><td><code>-size</code></td><td>匹配文件的大小（+<code>50KB</code>为查找超过50KB的文件，而-<code>50KB</code>为查找小于50KB的文件）</td></tr><tr><td><code>-prune</code></td><td>忽略某个目录</td></tr><tr><td><code>-exec …… {}\;</code></td><td>后面可跟用于进一步处理搜索结果的命令（下文会有演示）</td></tr></tbody></table><blockquote><p><code>which</code>命令用于按照指定名称快速搜索二进制程序（命令）所对应的位置</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># which locate</span>/usr/bin/locate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>stat</code>命令用于查看文件的具体存储细节和时间等信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>hdp@hcs32 etc<span class="token punctuation">]</span>$ <span class="token function">stat</span> <span class="token function">passwd</span>  File: ‘passwd’  Size: 993       Blocks: 8          IO Block: 4096   regular <span class="token function">file</span>Device: fd01h/64769dInode: 397804      Links: 1Access: <span class="token punctuation">(</span>0644/-rw-r--r--<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    0/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    0/    root<span class="token punctuation">)</span>Access: 2022-08-15 10:24:44.680044460 +0800Modify: 2022-08-15 10:24:44.621043752 +0800Change: 2022-08-15 10:24:44.625043800 +0800 Birth: -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>grep</code>命令用于按行提取文本内容，语法格式为“<code>grep</code> [参数] 文件名称”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-b</code></td><td>将可执行文件(binary)当作文本文件（text）来搜索</td></tr><tr><td><code>-c</code></td><td>仅显示找到的行数</td></tr><tr><td><code>-i</code></td><td>忽略大小写</td></tr><tr><td><code>-n</code></td><td>显示行号</td></tr><tr><td><code>-v</code></td><td>反向选择——仅列出没有“关键词”的行</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>hdp@hcs32 etc<span class="token punctuation">]</span>$ <span class="token function">grep</span> /sbin/nologin /etc/passwdbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:999:998:User <span class="token keyword">for</span> polkitd:/:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinchrony:x:998:996::/var/lib/chrony:/sbin/nologinntp:x:38:38::/etc/ntp:/sbin/nologintcpdump:x:72:72::/:/sbin/nologinnscd:x:28:28:NSCD Daemon:/:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>cut</code>命令用于按“列”提取文本内容</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>hdp@hcs32 etc<span class="token punctuation">]</span>$ <span class="token function">head</span> -n 2 /etc/passwd root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologin<span class="token punctuation">[</span>hdp@hcs32 etc<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token keyword">:</span> -f 1 /etc/passwdrootbindaemonadmlp<span class="token function">sync</span><span class="token function">shutdown</span>haltmailoperatorgames<span class="token function">ftp</span>nobodysystemd-networkdbuspolkitdsshdpostfixchronyntptcpdumpnscdhdp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>sort</code>命令用于对文本内容进行再排序，语法格式为“<code>sort</code> [参数] 文件名称”</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>忽略大小写</td></tr><tr><td><code>-b</code></td><td>忽略缩进与空格</td></tr><tr><td><code>-n</code></td><td>以数值型排序</td></tr><tr><td><code>-r</code></td><td>反向排序</td></tr><tr><td><code>-u</code></td><td>去除重复行</td></tr><tr><td><code>-t</code></td><td>指定间隔符</td></tr><tr><td><code>-k</code></td><td>设置字段范围</td></tr></tbody></table><blockquote><p><code>touch</code>命令用于创建空白文件或设置文件的时间，语法格式为“<code>touch</code> [参数] 文件名称”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-a</code></td><td>仅修改“读取时间”（<code>atime</code>）</td></tr><tr><td><code>-m</code></td><td>仅修改“修改时间”（<code>mtime</code>）</td></tr><tr><td><code>-d</code></td><td>同时修改atime与mtime</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch -d "2020-05-04 15:44" anaconda-ks.cfg </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l anaconda-ks.cfg </span>-rw-------. 1 root root 1260 May  4 15:44 anaconda-ks.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>mkdir</code>命令用于创建空白的目录，英文全称为“make directory”，语法格式为“<code>mkdir</code>[参数] 目录名称”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe linuxprobe<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p a/b/c/d/e</span><span class="token punctuation">[</span>root@linuxprobe linuxprobe<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd a</span><span class="token punctuation">[</span>root@linuxprobe a<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd b</span><span class="token punctuation">[</span>root@linuxprobe b<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>cp</code>命令用于复制文件或目录，英文全称为“copy”，语法格式为“<code>cp</code> [参数] 源文件名称 目标文件名称”。</p><ul><li>如果目标文件是目录，则会把源文件复制到该目录中；</li><li>如果目标文件也是普通文件，则会询问是否要覆盖它；</li><li>如果目标文件不存在，则执行正常的复制操作。</li></ul></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-p</code></td><td>保留原始文件的属性</td></tr><tr><td><code>-d</code></td><td>若对象为“链接文件”，则保留该“链接文件”的属性</td></tr><tr><td><code>-r</code></td><td>递归持续复制（用于目录</td></tr><tr><td><code>-i</code></td><td>若目标文件存在则询问是否覆盖</td></tr><tr><td><code>-a</code></td><td>相当于-<code>pdr</code>（p、d、r为上述参数）</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch install.log</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp install.log x.log</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>install.log x.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>mv</code>命令用于剪切或重命名文件，英文全称为“move”，语法格式为“<code>mv </code>[参数] 源文件名称 目标文件名称”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv x.log linux.log</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>install.log linux.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>rm</code>命令用于删除文件或目录，英文全称为“remove”，语法格式为“<code>rm</code> [参数] 文件  名称”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>强制执行</td></tr><tr><td><code>-i</code></td><td>删除前询问</td></tr><tr><td><code>-r</code></td><td>删除目录</td></tr><tr><td><code>-v</code></td><td>显示过程</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm install.log</span>rm: remove regular empty <span class="token function">file</span> ‘install.log’? y<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f linux.log</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>dd</code>命令用于按照指定大小和个数的数据块来复制文件或转换文件，语法格式为“<code>dd if=参数值of=参数值</code></strong></p><p><strong><code>count=参数值bs=参数值</code>”。</strong></p><p><code>dd</code>命令是一个比较重要而且比较有特色的命令，它能够让用户按照指定大小和个数的数据块来复制文</p><p>件的内容。当然，如果愿意的话，还可以在复制过程中转换其中的数据。Linux系统中有一个名</p><p>为<code>/dev/zero</code>的设备文件，每次在课堂上解释它时都充满哲学理论的色彩。因为这个文件不会占用系统</p><p>存储空间，但却可以提供无穷无尽的数据，因此常常使用它作为dd命令的输入文件，来生成一个指定大</p><p>小的文件。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>if</code></td><td>输入的文件名称</td></tr><tr><td><code>of</code></td><td>输出的文件名称</td></tr><tr><td><code>bs</code></td><td>设置每个“块”的大小</td></tr><tr><td><code>count</code></td><td>设置要复制“块”的个数</td></tr></tbody></table><blockquote><p><strong>例如</strong>，用<code>dd</code>命令从<code>/dev/zero</code>设备文件中取出一个大小为<code>560MB</code>的数据块，然后保存成名为<code>560_file</code>的文件。在理解了这个命令后，以后就能随意创建任意大小的文件了：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dd if=/dev/zero of=560_file count=1 bs=560M</span>1+0 records <span class="token keyword">in</span>1+0 records out587202560 bytes <span class="token punctuation">(</span>587 MB, 560 MiB<span class="token punctuation">)</span> copied, 1.28667 s, 456 MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>dd</code>命令的功能也<strong>绝不仅限于复制文件这么简单</strong>。如果想<strong>把光驱设备中的光盘制作成<code>iso</code>格式的镜像文</strong></p><p><strong>件</strong>，在Windows系统中需要借助于第三方软件才能做到，但在Linux系统中可以直接使用<code>dd</code>命令来</p><p>压制出光盘镜像文件，将它变成一个可立即使用的<code>iso</code>镜像：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dd if=/dev/cdrom of=RHEL-server-8.0-x86_64-LinuxProbe.Com.iso</span>13873152+0 records <span class="token keyword">in</span>13873152+0 records out7103053824 bytes <span class="token punctuation">(</span>7.1 GB, 6.6 GiB<span class="token punctuation">)</span> copied, 27.8812 s, 255 MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>file</code>命令用于查看文件的类型，语法格式为“<code>file</code>文件名称”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file anaconda-ks.cfg </span>anaconda-ks.cfg: ASCII text<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sda</span>/dev/sda: block special<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>tar</code>命令用于对文件进行打包压缩或解压，语法格式为“<code>tar</code>参数 文件名称”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-c</code></td><td>创建压缩文件</td></tr><tr><td><code>-x</code></td><td>解开压缩文件</td></tr><tr><td><code>-t</code></td><td>查看压缩包内有哪些文件</td></tr><tr><td><code>-z</code></td><td>用<code>Gzip</code>压缩或解压</td></tr><tr><td><code>-j</code></td><td>用<code>bzip2</code>压缩或解压</td></tr><tr><td><code>-v</code></td><td>显示压缩或解压的过程</td></tr><tr><td><code>-f</code></td><td>目标文件名</td></tr><tr><td><code>-p</code></td><td>保留原始的权限与属性</td></tr><tr><td><code>-P</code></td><td>使用绝对路径来压缩</td></tr><tr><td><code>-C</code></td><td>指定解压到的目录</td></tr></tbody></table><h2 id="二、管道符、重定向与环境变量"><a href="#二、管道符、重定向与环境变量" class="headerlink" title="二、管道符、重定向与环境变量"></a>二、管道符、重定向与环境变量</h2><hr><blockquote><p><strong>标准输入重定向（<code>STDIN</code>，文件描述符为0）</strong>：默认从键盘输入，也可从其他文件或命令中输入。</p><p><strong>标准输出重定向（<code>STDOUT</code>，文件描述符为1）</strong>：默认输出到屏幕。</p><p><strong>错误输出重定向（<code>STDERR</code>，文件描述符为2）</strong>：默认输出到屏幕</p></blockquote><h3 id="2-1、输入输出重"><a href="#2-1、输入输出重" class="headerlink" title="2.1、输入输出重"></a>2.1、输入输出重</h3><blockquote><p>输入重定向中用到的符号及其作用</p></blockquote><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 <code>&lt;</code> 文件</td><td>将文件作为命令的标准输入</td></tr><tr><td>命令 <code>&lt;&lt; </code>分界符</td><td>从标准输入中读入，直到遇见分界符才停止</td></tr><tr><td>命令 <code>&lt;</code> 文件1 <code>&gt;</code> 文件2</td><td>将<strong>文件1</strong>作为命令的标准输入并将标准输出到文件2</td></tr></tbody></table><blockquote><p>输出重定向中用到的符号及其作用</p></blockquote><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 <code>&gt;</code> 文件</td><td>将标准输出重定向到一个文件中（<strong>清空原有文件的数据</strong>）</td></tr><tr><td>命令 <code>2&gt;</code> 文件</td><td>将错误输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 <code>&gt;&gt;</code> 文件</td><td>将标准输出重定向到一个文件中（<strong>追加到原有内容的后面</strong>）</td></tr><tr><td>命令 <code>2&gt;&gt;</code> 文件</td><td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 <code>&gt;&gt;</code> 文件 2&gt;&amp;1 或 命令 &amp;&gt;&gt; 文件</td><td>将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）</td></tr></tbody></table><h3 id="2-2、管道命令符"><a href="#2-2、管道命令符" class="headerlink" title="2.2、管道命令符"></a>2.2、管道命令符</h3><blockquote><p><strong>把前一个命令原本要输出到屏幕的信息当作后一个命令的标准输入</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /etc/ | more</span>total 1344-rw-r--r--. 1 root root 16 Jul 21 05:08 adjtime-rw-r--r--. 1 root root 1518 Sep 10 2018 aliasesdrwxr-xr-x. 3 root root 65 Jul 21 05:06 alsadrwxr-xr-x. 2 root root 4096 Jul 21 05:08 alternatives-rw-r--r--. 1 root root 541 Oct 2 2018 anacrontab-rw-r--r--. 1 root root 55 Feb 1 2019 asound.conf-rw-r--r--. 1 root root 1 Aug 12 2018 at.denydrwxr-x---. 4 root root 100 Jul 21 05:16 auditdrwxr-xr-x. 3 root root 228 Jul 21 05:08 authselectdrwxr-xr-x. 4 root root 71 Jul 21 05:06 avahidrwxr-xr-x. 2 root root 204 Jul 21 05:06 bash_completion.d-rw-r--r--. 1 root root 3001 Sep 10 2018 bashrc--More--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、命令行的通配符"><a href="#2-3、命令行的通配符" class="headerlink" title="2.3、命令行的通配符"></a>2.3、命令行的通配符</h3><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>任意字符</td></tr><tr><td><code>?</code></td><td>单个任意字符</td></tr><tr><td><code>[a-z]</code></td><td>单个小写字母</td></tr><tr><td><code>[A-Z]</code></td><td>单个大写字母</td></tr><tr><td><code>[a-Z]</code></td><td>单个字母</td></tr><tr><td><code>[0-9]</code></td><td>单个数字</td></tr><tr><td><code>[[:alpha:]]</code></td><td>任意字母</td></tr><tr><td><code>[[:upper:]]</code></td><td>任意大写字母</td></tr><tr><td><code>[[:lower:]]</code></td><td>任意小写字母</td></tr><tr><td><code>[[:digit:]]</code></td><td>所有数字</td></tr><tr><td><code>[[:alnum:]]</code></td><td>任意字母加数字</td></tr><tr><td><code>[[:punct:]]</code></td><td>标点符号</td></tr></tbody></table><blockquote><p><code>/dev</code>目录中且以<code>sda</code>开头的文件：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /dev/sda*</span>brw-rw----. 1 root disk 8, 0 May 4 15:55 /dev/sdabrw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看文件名以<code>sda</code>开头，但是后面还紧跟其他某一个字符的文件的相关信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /dev/sda?</span>brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用[0-9]来匹配0～9之间的单个数字，也可以用[135]这样的方式仅匹配这3个指定数字中的一个；若没有匹配到数字1或2或3，则不会显示出来</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /dev/sda[0-9]</span>brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /dev/sda[135]</span>brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>搜索<code>/etc/</code>目录中所有以<code>.conf</code>结尾的配置文件有哪些</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /etc/*.conf</span>-rw-r--r--. 1 root root 55 Feb 1 2019 /etc/asound.conf-rw-r--r--. 1 root root 25696 Dec 12 2018 /etc/brltty.conf-rw-r--r--. 1 root root 1083 Apr 4 2018 /etc/chrony.conf-rw-r--r--. 1 root root 1174 Aug 12 2018 /etc/dleyna-server-service.conf-rw-r--r--. 1 root dnsmasq 26843 Aug 12 2018 /etc/dnsmasq.conf-rw-r--r--. 1 root root 117 Jan 16 2019 /etc/dracut.conf-rw-r--r--. 1 root root 20 Aug 12 2018 /etc/fprintd.conf-rw-r--r--. 1 root root 38 Nov 16 2018 /etc/fuse.conf………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一口气创建出好多个文件。不过在创建多个文件时，需要使用大括号，并且字段之间用逗号间隔</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch {AA,BB,CC}.conf</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l *.conf</span>-rw-r--r--. 1 root root 0 Sep 22 01:54 AA.conf-rw-r--r--. 1 root root 0 Sep 22 01:54 BB.conf-rw-r--r--. 1 root root 0 Sep 22 01:54 CC.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用通配符还可以输出一些指定的信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo file{1,2,3,4,5}</span>file1 file2 file3 file4 file5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4、常用的转义字符"><a href="#2-4、常用的转义字符" class="headerlink" title="2.4、常用的转义字符"></a>2.4、常用的转义字符</h3><blockquote><ul><li><strong>反斜杠（\）</strong>：使反斜杠后面的一个变量变为单纯的字符。</li><li><strong>单引号（’ ‘）</strong>：转义其中所有的变量为单纯的字符串。</li><li><strong>双引号（” “）</strong>：保留其中的变量属性，不进行转义处理。</li><li><strong>反引号（` `）</strong>：把其中的命令执行后返回结果。</li></ul></blockquote><blockquote><p>定义一个名为<code>PRICE</code>的变量并赋值为5，然后输出以双引号括起来的字符串与变量信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># PRICE=5</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Price is $PRICE"</span>Price is 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输出“Price is $5”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Price is $$PRICE" </span>Price is 3767PRICE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>某个命令的输出值</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo `uname -a`</span>Linux linuxprobe.com 4.18.0-80.el8.x86_64 <span class="token comment" spellcheck="true">#1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5、重要的环境变量"><a href="#2-5、重要的环境变量" class="headerlink" title="2.5、重要的环境变量"></a>2.5、重要的环境变量</h3><blockquote><p><code>Linux</code>系统中最重要的10个环境变量</p></blockquote><table><thead><tr><th>变量名称</th><th>作用</th></tr></thead><tbody><tr><td><code>HOME</code></td><td>用户的主目录（即家目录）</td></tr><tr><td><code>SHELL</code></td><td>用户在使用的Shell解释器名称</td></tr><tr><td><code>HISTSIZE</code></td><td>输出的历史命令记录条数</td></tr><tr><td><code>HISTFILESIZE</code></td><td>保存的历史命令记录条数</td></tr><tr><td><code>MAIL</code></td><td>邮件保存路径</td></tr><tr><td><code>LANG</code></td><td>系统语言、语系名称</td></tr><tr><td><code>RANDOM</code></td><td>生成一个随机数字</td></tr><tr><td><code>PS1</code></td><td>Bash解释器的提示符</td></tr><tr><td><code>PATH</code></td><td>定义解释器搜索用户执行命令的路径</td></tr><tr><td><code>EDITOR</code></td><td>用户默认的文本编辑器</td></tr></tbody></table><h2 id="三、VIM编辑器"><a href="#三、VIM编辑器" class="headerlink" title="三、VIM编辑器"></a>三、<code>VIM</code>编辑器</h2><hr><blockquote><ul><li><strong>命令模式</strong>：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。</li><li><strong>输入模式</strong>：正常的文本录入。</li><li><strong>末行模式</strong>：保存或退出文档，以及设置编辑环境。</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816104736582.png"></p><blockquote><p>命令模式中最常用的一些命令</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>dd</code></td><td>删除（剪切）光标所在整行</td></tr><tr><td><code>5dd</code></td><td>删除（剪切）从光标处开始的5行</td></tr><tr><td><code>yy</code></td><td>复制光标所在整行</td></tr><tr><td><code>5yy</code></td><td>复制从光标处开始的5行</td></tr><tr><td><code>n</code></td><td>显示搜索命令定位到的下一个字符串</td></tr><tr><td><code>N</code></td><td>显示搜索命令定位到的上一个字符串</td></tr><tr><td><code>u</code></td><td>撤销上一步的操作</td></tr><tr><td><code>p</code></td><td>将之前删除（<code>dd</code>）或复制（<code>yy</code>）过的数据粘贴到光标后面</td></tr></tbody></table><blockquote><p>末行模式中最常用的一些命令</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出（放弃对文档的修改内容）</td></tr><tr><td><code>:wq!</code></td><td>强制保存退出</td></tr><tr><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td><code>:set nonu</code></td><td>不显示行号</td></tr><tr><td><code>:命令</code></td><td>执行该命令</td></tr><tr><td><code>:整数</code></td><td>跳转到该行</td></tr><tr><td><code>:s/one/two</code></td><td>将当前光标所在行的第一个one替换成two</td></tr><tr><td><code>:s/one/two/g</code></td><td>将当前光标所在行的所有one替换成two</td></tr><tr><td><code>:%s/one/two/g</code></td><td>将全文中的所有one替换成two</td></tr><tr><td><code>?字符串</code></td><td>在文本中从下至上搜索该字符串</td></tr><tr><td><code>/字符串</code></td><td>在文本中从上至下搜索该字符串</td></tr></tbody></table><h2 id="四、SHELL脚本"><a href="#四、SHELL脚本" class="headerlink" title="四、SHELL脚本"></a>四、<code>SHELL</code>脚本</h2><hr><h3 id="4-1、基础语法"><a href="#4-1、基础语法" class="headerlink" title="4.1、基础语法"></a>4.1、基础语法</h3><blockquote><p> 文件测试所用的参数</p></blockquote><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td><code>-d</code></td><td>测试文件是否为目录类型</td></tr><tr><td><code>-e</code></td><td>测试文件是否存在</td></tr><tr><td><code>-f</code></td><td>判断是否为一般文件</td></tr><tr><td><code>-r</code></td><td>测试当前用户是否有权限读取</td></tr><tr><td><code>-w</code></td><td>测试当前用户是否有权限写入</td></tr><tr><td><code>-x</code></td><td>测试当前用户是否有权限执行</td></tr></tbody></table><blockquote><ul><li><code>&amp;&amp;</code>是逻辑“与”，只有当前面的语句执行成功的时候才会执行后面的语句。</li><li><code>||</code>是逻辑“或”，只有当前面的语句执行失败的时候才会执行后面的语句。</li><li><code>!</code>是逻辑“非”，代表对逻辑测试结果取反值；之前若为正确则变成错误，若为错误则变成正确。</li></ul></blockquote><blockquote><p> 可用的整数比较运算符</p></blockquote><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>是否等于</td></tr><tr><td><code>-ne</code></td><td>是否不等于</td></tr><tr><td><code>-gt</code></td><td>是否大于</td></tr><tr><td><code>-lt</code></td><td>是否小于</td></tr><tr><td><code>-le</code></td><td>是否等于或小于</td></tr><tr><td><code>-ge</code></td><td>是否大于或等于</td></tr></tbody></table><blockquote><p>常见的字符串比较运算符</p></blockquote><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td><code>=</code></td><td>比较字符串内容是否相同</td></tr><tr><td><code>!=</code></td><td>比较字符串内容是否不同</td></tr><tr><td><code>-z</code></td><td>判断字符串内容是否为空</td></tr></tbody></table><h3 id="4-2、流程控制语句"><a href="#4-2、流程控制语句" class="headerlink" title="4.2、流程控制语句"></a>4.2、流程控制语句</h3><h4 id="4-2-1、if-else"><a href="#4-2-1、if-else" class="headerlink" title="4.2.1、if...else..."></a>4.2.1、<code>if...else...</code></h4><blockquote><p>用单分支的if条件语句来判断<code>/media/cdrom</code>目录是否存在，若不存在就创建这个目录，反之则结束条件</p><p>判断和整个Shell脚本的执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816143656596.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim mkcdrom.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span>DIR<span class="token operator">=</span><span class="token string">"/media/cdrom"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$DIR</span> <span class="token punctuation">]</span><span class="token keyword">then</span>            <span class="token function">mkdir</span> -p <span class="token variable">$DIR</span><span class="token keyword">fi</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用双分支的if条件语句来验证某台主机是否在线，然后根据返回值的结果，要么显示主机在线信息，要么</p><p>显示主机不在线信息。这里的脚本主要使用<code>ping</code>命令来测试与对方主机的网络连通性，而<code>Linux</code>系统中</p><p>的<code>ping</code>命令不像<code>Windows</code>一样尝试4次就结束，因此为了避免用户等待时间过长，需要通过<code>-c</code>参数</p><p>来规定尝试的次数，并使用<code>-i</code>参数定义每个数据包的发送间隔，以及使用<code>-W</code>参数定义等待超时时间。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim chkhost.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token function">ping</span> -c 3 -i 0.2 -W 3 <span class="token variable">$1</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is On-line."</span><span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is Off-line."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面的脚本示例中，只有当用户输入的分数大于等于85分且小于等于100分时，才输出<code>Excellent</code>字</p><p>样；若分数不满足该条件（即匹配不成功），则继续判断分数是否大于等于70分且小于等于84分，如果</p><p>是，则输出<code>Pass</code>字样；若两次都落空（即两次的匹配操作都失败了），则输出Fail字样</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim chkscore.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Enter your score（0-100）："</span> GRADE<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 85 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 100 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Excellent"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 70 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 84 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Pass"</span><span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Fail"</span> <span class="token keyword">fi</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash chkscore.sh</span>Enter your score（0-100）：8888 is Excellent<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash chkscore.sh </span>Enter your score（0-100）：8080 is Pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2、for条件循环语句"><a href="#4-2-2、for条件循环语句" class="headerlink" title="4.2.2、for条件循环语句"></a>4.2.2、<code>for</code>条件循环语句</h4><blockquote><p>使用<code>for</code>循环语句从列表文件中读取多个用户名，然后为其逐一创建用户账户并设置密码。首先创建</p><p>用户名称的列表文件<code>users.txt</code>，每个用户名称单独一行。读者可以自行决定具体的用户名称和个数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816143644968.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim addusers.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Enter The Users Password : "</span> PASSWD<span class="token keyword">for</span> UNAME <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> users.txt<span class="token variable">`</span></span><span class="token keyword">do</span>        <span class="token function">id</span> <span class="token variable">$UNAME</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$UNAME</span> , Already exists"</span>        <span class="token keyword">else</span>                <span class="token function">useradd</span> <span class="token variable">$UNAME</span>                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$PASSWD</span>"</span> <span class="token operator">|</span> <span class="token function">passwd</span> --stdin <span class="token variable">$UNAME</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$UNAME</span> , Create success"</span>        <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3、While条件循环语句"><a href="#4-2-3、While条件循环语句" class="headerlink" title="4.2.3、While条件循环语句"></a>4.2.3、<code>While</code>条件循环语句</h4><blockquote><p>结合使用多分支的if条件测试语句与<code>while</code>条件循环语句，编写一个用来猜测数值大小的脚本<code>Guess.sh</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816143628131.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim Guess.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span>PRICE<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $RANDOM % 1000<span class="token variable">)</span></span>TIMES<span class="token operator">=</span>0<span class="token keyword">echo</span> <span class="token string">"商品实际价格为0-999之间，猜猜看是多少？"</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">"请输入您猜测的价格数目："</span> INT        <span class="token keyword">let</span> TIMES++        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$INT</span> -eq <span class="token variable">$PRICE</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"恭喜您答对了，实际价格是 <span class="token variable">$PRICE</span>"</span>                <span class="token keyword">echo</span> <span class="token string">"您总共猜测了 <span class="token variable">$TIMES</span> 次"</span>                <span class="token keyword">exit</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$INT</span> -gt <span class="token variable">$PRICE</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"太高了！"</span>        <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"太低了！"</span>        <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4、case条件测试语句"><a href="#4-2-4、case条件测试语句" class="headerlink" title="4.2.4、case条件测试语句"></a>4.2.4、<code>case</code>条件测试语句</h4><blockquote><p>编写脚本<code>Checkkeys.sh</code>，提示用户输入一个字符并将其赋值给变量<code>KEY</code>，然后根据变量<code>KEY</code>的值向用</p><p>户显示其值是字母、数字还是其他字符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816143615216.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim Checkkeys.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"请输入一个字符，并按Enter键确认："</span> KEY<span class="token keyword">case</span> <span class="token string">"<span class="token variable">$KEY</span>"</span> <span class="token keyword">in</span>        <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>A-Z<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">echo</span> <span class="token string">"您输入的是 字母。"</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">echo</span> <span class="token string">"您输入的是 数字。"</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span>                <span class="token keyword">echo</span> <span class="token string">"您输入的是 空格、功能键或其他控制字符。"</span>esac<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash Checkkeys.sh</span>请输入一个字符，并按Enter键确认：6您输入的是 数字。<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash Checkkeys.sh</span>请输入一个字符，并按Enter键确认：p您输入的是 字母。<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash Checkkeys.sh</span>请输入一个字符，并按Enter键确认：^<span class="token punctuation">[</span><span class="token punctuation">[</span>15~您输入的是 空格、功能键或其他控制字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、计划任务服务程序"><a href="#五、计划任务服务程序" class="headerlink" title="五、计划任务服务程序"></a>五、<strong>计划任务服务程序</strong></h2><blockquote><p>一次性计划任务只执行一次，一般用于临时的工作需求。可以用at命令实现这种功能，只需要写成“<code>at时</code></p><p><code>间</code>”的形式就行。如果想要查看已设置好但还未执行的一次性计划任务，可以使用<code>at -l</code>命令；要想将</p><p>其删除，可以使用<code>atrm任务序号</code></p></blockquote><blockquote><p>at命令的参数及其作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>指定包含命令的任务文件</td></tr><tr><td><code>-q</code></td><td>指定新任务名称</td></tr><tr><td><code>-l</code></td><td>显示待执行任务列表</td></tr><tr><td><code>-d</code></td><td>删除指定待执行任务</td></tr><tr><td><code>-m</code></td><td>任务执行后给用户发邮件</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># at 23:30</span>warning: commands will be executed using /bin/shat<span class="token operator">></span> systemctl restart httpdat<span class="token operator">></span> 此处请同时按下<span class="token operator">&lt;</span>Ctrl<span class="token operator">></span>+<span class="token operator">&lt;</span>d<span class="token operator">></span>键来结束编写计划任务job 1 at Wed Oct 14 23:30:00 2020<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># at -l</span>1 Wed Oct 14 23:30:00 2020 a root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<code>crond</code>设置任务的参数字段说明</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816144304370.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># crontab -e</span>no <span class="token function">crontab</span> <span class="token keyword">for</span> root - using an empty onecrontab: installing new <span class="token function">crontab</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># crontab -l</span>25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、用户身份与能力"><a href="#六、用户身份与能力" class="headerlink" title="六、用户身份与能力"></a>六、用户身份与能力</h2><hr><blockquote><p><code>id</code>命令用于显示用户的详细信息，语法格式为“<code>id</code>用户名”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id linuxprobe</span>uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>useradd</code>命令用于创建新的用户账户，语法格式为“<code>useradd </code>[参数] 用户名”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-d</code></td><td>指定用户的家目录（默认为<code>/home/username</code>）</td></tr><tr><td><code>-e</code></td><td>账户的到期时间，格式为<code>YYYY-MM-DD</code>.</td></tr><tr><td><code>-u</code></td><td>指定该用户的默认<code>UID</code></td></tr><tr><td><code>-g</code></td><td>指定一个初始的用户基本组（必须已存在）</td></tr><tr><td><code>-G</code></td><td>指定一个或多个扩展用户组</td></tr><tr><td><code>-N</code></td><td>不创建与用户同名的基本用户组</td></tr><tr><td><code>-s</code></td><td>指定该用户的默认Shell解释器</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd linuxcool</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id linuxcool</span>uid<span class="token operator">=</span>1001<span class="token punctuation">(</span>linuxcool<span class="token punctuation">)</span> gid<span class="token operator">=</span>1001<span class="token punctuation">(</span>linuxcool<span class="token punctuation">)</span> groups<span class="token operator">=</span>1001<span class="token punctuation">(</span>linuxcool<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>groupadd</code>命令用于创建新的用户组，语法格式为“<code>groupadd</code> [参数] 群组名”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">groupadd</span> ronny<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>usermod</code>命令用于修改用户的属性，英文全称为“<code>user modify</code>”，语法格式为“<code>usermod</code> [参数] 用户名”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-c</code></td><td>填写用户账户的备注信息</td></tr><tr><td><code>-d -m</code></td><td>参数<code>-m</code>与参数<code>-d</code>连用，可重新指定用户的家目录并自动把旧的数据转移过去</td></tr><tr><td><code>-e</code></td><td>账户的到期时间，格式为<code>YYYY-MM-DD</code></td></tr><tr><td><code>-g</code></td><td>变更所属用户组</td></tr><tr><td><code>-G</code></td><td>变更扩展用户组</td></tr><tr><td><code>-L</code></td><td>锁定用户禁止其登录系统</td></tr><tr><td><code>-U</code></td><td>解锁用户，允许其登录系统</td></tr><tr><td><code>-s</code></td><td>变更默认终端</td></tr><tr><td><code>-u</code></td><td>修改用户的<code>UID</code></td></tr></tbody></table><blockquote><p><code>passwd</code>命令用于修改用户的密码、过期时间等信息，英文全称为“<code>password</code>”，语法格式为“<code>passwd </code>[参数] 用户名”</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-l</code></td><td>锁定用户，禁止其登录</td></tr><tr><td><code>-u</code></td><td>解除锁定，允许用户登录</td></tr><tr><td><code>--stdin</code></td><td>允许通过标准输入修改用户密码，如`echo “NewPassWord”</td></tr><tr><td><code>-d</code></td><td>使该用户可用空密码登录系统</td></tr><tr><td><code>-e</code></td><td>强制用户在下次登录时修改密码</td></tr><tr><td><code>-S</code></td><td>显示用户的密码是否被锁定，以及密码所采用的加密算法名称</td></tr></tbody></table><blockquote><p><code>userdel</code>命令用于删除已有的用户账户，英文全称为“<code>user delete</code>”，语法格式为“<code>userdel</code> [参数] 用户名”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>强制删除用户</td></tr><tr><td><code>-r</code></td><td>同时删除用户及用户家目录</td></tr></tbody></table><h3 id="6-1、文件权限与归属"><a href="#6-1、文件权限与归属" class="headerlink" title="6.1、文件权限与归属"></a>6.1、文件权限与归属</h3><blockquote><p> 读写执行权限对于文件与目录可执行命令的区别</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816172532310.png"></p><blockquote><p>文件权限的字符与数字表示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816172548042.png"></p><blockquote><p><strong>常见的文件类型</strong>包括普通文件（-）、目录文件（d）、链接文件（l）、管道文件（p）、块设备文件</p><p>（b）以及字符设备文件（c）。</p><p>通过分析可知，该文件的类型为<strong>普通文件</strong>，所有者权限为<strong>可读</strong>、<strong>可写</strong>（<code>rw-</code>），所属组权限为<strong>可读</strong>（<code>r-</code></p><p><code>-</code>），除此以外的其他人也只有<strong>可读权限</strong>（<code>r--</code>），文件的<strong>磁盘占用</strong>大小是34298字节，最近一次的<strong>修改</strong></p><p><strong>时间</strong>为4月2日的<code>0:23</code>，<strong>文件的名称</strong>为<code>install.log</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220816172746994.png"></p><h3 id="6-2、文件的特殊权限"><a href="#6-2、文件的特殊权限" class="headerlink" title="6.2、文件的特殊权限"></a>6.2、文件的特殊权限</h3><h4 id="6-2-1、SUID"><a href="#6-2-1、SUID" class="headerlink" title="6.2.1、SUID"></a>6.2.1、<code>SUID</code></h4><blockquote><p><code>SUID</code>是一种对二进制程序进行设置的特殊权限，能够让二进制程序的执行者<strong>临时</strong>拥有<strong>所有者的权限</strong>（<strong>仅</strong></p><p><strong>对拥有执行权限的二进制程序有效</strong>）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /etc/shadow</span>----------. 1 root root 1312 Jul 21 05:08 /etc/shadow<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /bin/passwd </span>-rwsr-xr-x. 1 root root 34512 Aug 13 2018 /bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看<code>passwd</code>命令属性时发现所有者的权限由<code>rwx</code>变成了<code>rws</code>，其中x改变成s就意味着该文件被赋予了</p><p><code>SUID</code>权限。另外如果原本的权限是<code>rw-</code>呢？如果原先权限位上没有x执行权限，那么被赋予特殊权限后</p><p>将变成大写的<code>S</code>。</p></blockquote><h4 id="6-2-2、SGID"><a href="#6-2-2、SGID" class="headerlink" title="6.2.2、SGID"></a>6.2.2、<code>SGID</code></h4><blockquote><p><code>SGID</code>特殊权限有两种应用场景：当对二进制程序进行设置时，能够让执行者<strong>临时获取文件所属组的权</strong></p><p><strong>限</strong>；当对目录进行设置时，则是让目录内新创建的文件<strong>自动继承该目录原有用户组的名称</strong>。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /tmp</span><span class="token punctuation">[</span>root@linuxprobe tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir testdir</span><span class="token punctuation">[</span>root@linuxprobe tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ald testdir</span>drwxr-xr-x. 2 root root 6 Oct 27 23:44 testdir<span class="token punctuation">[</span>root@linuxprobe tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 777 testdir</span><span class="token punctuation">[</span>root@linuxprobe tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R g+s testdir</span><span class="token punctuation">[</span>root@linuxprobe tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ald testdir</span>drwxrwsrwx. 2 root root 6 Oct 27 23:44 testdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-3、SBIT"><a href="#6-2-3、SBIT" class="headerlink" title="6.2.3、SBIT"></a>6.2.3、<code>SBIT</code></h4><blockquote><p><code>SBIT</code>特殊权限位可确保用户只能删除自己的文件，而不能删除其他用户的文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ald /tmp</span>drwxrwxrwt. 17 root root 4096 Oct 28 00:29 /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-2-4、总结"><a href="#6-2-4、总结" class="headerlink" title="6.2.4、总结"></a>6.2.4、总结</h4><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>u+s</code></td><td>设置<code>SUID</code>权限</td></tr><tr><td><code>u-s</code></td><td>取消<code>SUID</code>权限</td></tr><tr><td><code>g+s</code></td><td>设置<code>SGID</code>权限</td></tr><tr><td><code>g-s</code></td><td>取消<code>SGID</code>权限</td></tr><tr><td><code>o+t</code></td><td>设置<code>SBIT</code>权限</td></tr><tr><td><code>o-t</code></td><td>取消<code>SBIT</code>权限</td></tr></tbody></table><blockquote><p><code>SUID</code>、<code>SGID</code>与<code>SBIT</code>也有对应的数字表示法，分别为4、2、1。也就是说777还不是最大权限，最大权</p><p>限应该是7777，其中第1个数字代表的是特殊权限位。既然知道了数字表示法是由“特殊权限+一般权</p><p>限”构成的，现在就以上面<code>linux</code>目录的权限为例，为大家梳理一下计算方法。</p><p>在<code>rwxr-xr-t</code>权限中，最后一位是t，这说明该文件的一般权限为<code>rwxr-xr-x</code>，并带有<code>SBIT</code>特殊权限。</p><p>对于可读（r）、可写（w）、可执行（x）权限的数字计算方法大家应该很熟悉了—<code>rwxr-xr-x</code>即755，</p><p>而<code>SBIT</code>特殊权限位是1，则合并后的结果为1755。</p><p>再增加点难度，如果权限是“<code>rwsrwSr--</code>”呢？首先不要慌，大写S表示原先没有执行权限，因此一般权限</p><p>为<code>rwxrw-r--</code>，将其转换为数字表示法后结果是764。带有的<code>SUID</code>和<code>SGID</code>特殊权限的数字法表示是4</p><p>和2，心算得出结果是6，合并后的结果为6764</p></blockquote><h3 id="6-3、文件的隐藏属性"><a href="#6-3、文件的隐藏属性" class="headerlink" title="6.3、文件的隐藏属性"></a>6.3、文件的隐藏属性</h3><blockquote><p><code>Linux</code>系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，</p><p>默认情况下不能直接被用户发觉。</p><p><strong>既然叫隐藏权限，那么使用常规的ls命令肯定不能看到它的真面目。隐藏权限的专用设置命令是</strong></p><p><strong><code>chattr</code>，专用查看命令是<code>lsattr</code>。</strong></p></blockquote><h4 id="6-3-1、chattr命令"><a href="#6-3-1、chattr命令" class="headerlink" title="6.3.1、chattr命令"></a>6.3.1、<code>chattr</code>命令</h4><blockquote><p><code>chattr</code>命令用于设置文件的隐藏权限，英文全称为<code>change attributes</code>，语法格式为“<code>chattr</code> [参数] </p><p>文件名称”。</p></blockquote><blockquote><p>如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出</p><p>文件，则需要追加“-参数”</p></blockquote><blockquote><p><code>chattr</code>命令中的参数及其作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>i</code></td><td>无法对文件进行修改；若对目录设置了该参数，则仅能修改其中的子文件内容而不能新建或删除文件</td></tr><tr><td><code>a</code></td><td>仅允许补充（追加）内容，无法覆盖/删除内容（<code>Append Only</code>）</td></tr><tr><td><code>S</code></td><td>文件内容在变更后立即同步到硬盘（<code>sync</code>）</td></tr><tr><td><code>s</code></td><td>彻底从硬盘中删除，不可恢复（用0填充原文件所在硬盘区域）</td></tr><tr><td><code>A</code></td><td>不再修改这个文件或目录的最后访问时间（<code>atime</code>）</td></tr><tr><td><code>b</code></td><td>不再修改文件或目录的存取时间</td></tr><tr><td><code>D</code></td><td>检查压缩文件中的错误</td></tr><tr><td><code>d</code></td><td>使用<code>dump</code>命令备份时忽略本文件/目录</td></tr><tr><td><code>c</code></td><td>默认将文件或目录进行压缩</td></tr><tr><td><code>u</code></td><td>当删除该文件后依然保留其在硬盘中的数据，方便日后恢复</td></tr><tr><td><code>t</code></td><td>让文件系统支持尾部合并（<code>tail-merging</code>）</td></tr><tr><td><code>x</code></td><td>可以直接访问压缩文件中的内容</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "for Test" > linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm linuxprobe</span>rm: remove regular <span class="token function">file</span> ‘linuxprobe’? y<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "for Test" > linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chattr +a linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm linuxprobe</span>rm: remove regular <span class="token function">file</span> ‘linuxprobe’? yrm: cannot remove ‘linuxprobe’: Operation not permitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2、lsattr命令"><a href="#6-3-2、lsattr命令" class="headerlink" title="6.3.2、lsattr命令"></a>6.3.2、<code>lsattr</code>命令</h4><blockquote><p><code>lsattr</code>命令用于查看文件的隐藏权限，英文全称为“<code>list attributes</code>”，语法格式为“<code>lsattr </code>[参数] 文件名称”</p></blockquote><blockquote><p>文件的隐藏权限必须使用<code>lsattr</code>命令来查看，平时使用的<code>ls</code>之类的命令则看不出端倪</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -al linuxprobe</span>-rw-r--r--. 1 root root 9 Feb 12 11:42 linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>一旦使用<code>lsattr</code>命令后，文件上被赋予的隐藏权限马上就会原形毕露</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsattr linuxprobe</span>-----a---------- linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>此时按照显示的隐藏权限的类型（字母），使用<code>chattr</code>命令将其去掉</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chattr -a linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsattr linuxprobe </span>---------------- linuxprobe<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm linuxprobe </span>rm: remove regular <span class="token function">file</span> ‘linuxprobe’? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4、文件访问控制列表"><a href="#6-4、文件访问控制列表" class="headerlink" title="6.4、文件访问控制列表"></a>6.4、文件访问控制列表</h3><blockquote><p>前文讲解的一般权限、特殊权限、隐藏权限其实有一个共性—权限是针对某一类用户设置的，能够对很</p><p>多人同时生效。如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表</p><p>（<code>ACL</code>）了。通俗来讲，基于普通文件或目录设置<code>ACL</code>其实就是针对指定的用户或用户组设置文件或目</p><p>录的操作权限，更加精准地派发权限。另外，如果针对某个目录设置了<code>ACL</code>，则目录中的文件会继承其</p><p><code>ACL</code>权限；若针对文件设置了<code>ACL</code>，则文件不再继承其所在目录的<code>ACL</code>权限</p></blockquote><blockquote><p>在没有针对普通用户为<code>root</code>管理员的家目录设置<code>ACL</code>之前，其执行结果如下所示：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - linuxprobe</span><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> /root-bash: cd: /root: Permission denied<span class="token punctuation">[</span>linuxprobe@linuxprobe root<span class="token punctuation">]</span>$ <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-1、setfacl命令"><a href="#6-4-1、setfacl命令" class="headerlink" title="6.4.1、setfacl命令"></a>6.4.1、<code>setfacl</code>命令</h4><blockquote><p><code>setfacl</code>命令用于管理文件的<code>ACL</code>权限规则，英文全称为“<code>set files ACL</code>”，语法格式为“<code>setfacl </code>[参数] 文件名称”</p></blockquote><blockquote><p><code>ACL</code>权限提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制。使用<code>setfacl</code>命</p><p>令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。其中，针对目录文件需要</p><p>使用<code>-R</code>递归参数；针对普通文件则使用<code>-m</code>参数；如果想要删除某个文件的<code>ACL</code>，则可以使用<code>-b</code>参数。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-m</code></td><td>修改权限</td></tr><tr><td><code>-M</code></td><td>从文件中读取权限</td></tr><tr><td><code>-x</code></td><td>删除某个权限</td></tr><tr><td><code>-b</code></td><td>删除全部权限</td></tr><tr><td><code>-R</code></td><td>递归子目录</td></tr></tbody></table><blockquote><p>为普通用户单独设置一下权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setfacl -Rm u:linuxprobe:rwx /root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>换到这位普通用户的身份下，现在能正常进入了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - linuxprobe</span><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> /root<span class="token punctuation">[</span>linuxprobe@linuxprobe root<span class="token punctuation">]</span>$ <span class="token function">ls</span>anaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  TemplatesDesktop          Downloads  Music                 Public    Videos<span class="token punctuation">[</span>linuxprobe@linuxprobe root<span class="token punctuation">]</span>$ <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常用的ls命令是看不到<code>ACL</code>信息的，但是却可以看到文件权限的最后一个点（**.<strong>）变成了加号（</strong>+**），这就</p><p>意味着该文件已经设置了<code>ACL</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ld /root</span>dr-xrwx---+ 14 root root 4096 May 4 2020 /root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-4-2、getfacl命令"><a href="#6-4-2、getfacl命令" class="headerlink" title="6.4.2、getfacl命令"></a>6.4.2、<code>getfacl</code>命令</h4><blockquote><p><code>getfacl</code>命令用于查看文件的<code>ACL</code>权限规则，英文全称为“<code>get files ACL</code>”，语法格式为“<code>getfacl</code> [参数] 文件名称”。</p></blockquote><blockquote><p>使用<code>getfacl</code>命令显示在root管理员家目录上设置的所有<code>ACL</code>信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getfacl /root</span>ggetfacl: Removing leading <span class="token string">'/'</span> from absolute path names<span class="token comment" spellcheck="true"># file: root</span><span class="token comment" spellcheck="true"># owner: root</span><span class="token comment" spellcheck="true"># group: root</span>user::r-xuser:linuxprobe:rwxgroup::r-xmask::rwxother::---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ACL</code>权限还可以针对某个用户组进行设置。例如，允许某个组的用户都可以读写<code>/etc/fstab</code>文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setfacl -m g:linuxprobe:rw /etc/fstab</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getfacl /etc/fstab </span>getfacl: Removing leading <span class="token string">'/'</span> from absolute path names<span class="token comment" spellcheck="true"># file: etc/fstab</span><span class="token comment" spellcheck="true"># owner: root</span><span class="token comment" spellcheck="true"># group: root</span>user::rw-group::r--group:linuxprobe:rw-mask::rw-other::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要清空所有<code>ACL</code>权限，请用<code>-b</code>参数；要删除某一条指定的权限，就用<code>-x</code>参数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setfacl -x g:linuxprobe /etc/fstab</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getfacl /etc/fstab </span>getfacl: Removing leading <span class="token string">'/'</span> from absolute path names<span class="token comment" spellcheck="true"># file: etc/fstab</span><span class="token comment" spellcheck="true"># owner: root</span><span class="token comment" spellcheck="true"># group: root</span>user::rw-group::r--mask::r--other::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>ACL</code>权限的设置都是立即且永久生效的，不需要再编辑什么配置文件，这一点特别方便。但是，这也带来了一个安全隐患。如果我们不小心设置错了权限，就会覆盖掉文件原始的权限信息，并且永远都找不回来了。</strong></p></blockquote><blockquote><p>在备份<code>/home</code>目录上的<code>ACL</code>权限时，可使用<code>-R</code>递归参数，这样不仅能够把目录本身的权限进行备份，还</p><p>能将里面的文件权限也自动备份</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /</span><span class="token punctuation">[</span>root@linuxprobe /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getfacl -R home > backup.acl</span><span class="token punctuation">[</span>root@linuxprobe /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l </span>-rw-r--r--. 1 root root 834 Jul 18 14:14 backup.acl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ACL</code>权限的恢复也很简单，使用的是<code>--restore</code>参数。由于在备份时已经指定是对<code>/home</code>目录进行操</p><p>作，所以不需要写对应的目录名称，它能够自动找到要恢复的对象</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setfacl --restore backup.acl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5、su命令与sudo服务"><a href="#6-5、su命令与sudo服务" class="headerlink" title="6.5、su命令与sudo服务"></a>6.5、<code>su</code>命令与<code>sudo</code>服务</h3><blockquote><p><code>su</code>命令可以解决切换用户身份的需求，使得当前用户在不退出登录的情况下，顺畅地切换到其他用户，</p><p>比如从<code>root</code>管理员切换至普通用户</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - linuxprobe</span><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">id</span>uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>linuxprobe<span class="token punctuation">)</span> context<span class="token operator">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的<code>su</code>命令与用户名之间有一个减号（-），这意味着完全切换到新的用户，即把环境变量信息也变更</p><p>为新用户的相应信息，而不是保留原始的信息。强烈建议在切换用户身份时添加这个减号（-）</p></blockquote><blockquote><p><code>sudo</code>命令用于给普通用户提供额外的权限，语法格式为“<code>sudo</code> [参数] 用户名”。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-h</code></td><td>列出帮助信息</td></tr><tr><td><code>-l</code></td><td>列出当前用户可执行的命令</td></tr><tr><td><code>-u</code>用户名或<code>UID</code>值</td><td>以指定的用户身份执行命令</td></tr><tr><td><code>-k</code></td><td>清空密码的有效时间，下次执行<code>sudo</code>时需要再次进行密码验证</td></tr><tr><td><code>-b</code></td><td>在后台执行指定的命令</td></tr><tr><td><code>-p</code></td><td>更改询问密码的提示语</td></tr></tbody></table><blockquote><p><code>visudo</code>命令用于编辑、配置用户<code>sudo</code>的权限文件，语法格式为“<code>visudo </code>[参数]”。</p><p>使用<code>visudo</code>命令配置权限文件时，其操作方法与<code>Vim</code>编辑器中用到的方法完全一致，因此在编写完成后</p><p>记得在末行模式下保存并退出。在配置权限文件时，按照下面的格式在第101行（大约）填写上指定的信</p><p>息</p></blockquote><blockquote><p><strong>谁可以使用 允许使用的主机 = （以谁的身份） 可执行命令的列表</strong></p><p><strong>谁可以使用：</strong>稍后要为哪位用户进行命令授权。</p><p><strong>允许使用的主机：</strong>可以填写ALL表示不限制来源的主机，亦可填写如192.168.10.0/24这样的网段限制来</p><p>源地址，使得只有从允许网段登录时才能使用<code>sudo</code>命令。</p><p><strong>以谁的身份：</strong>可以填写ALL表示系统最高权限，也可以是另外一位用户的名字。</p><p><strong>可执行命令的列表：</strong>可以填写ALL表示不限制命令，亦可填写如<code>/usr/bin/cat</code>这样的文件名称来限制命</p><p>令列表，多个命令文件之间用逗号（,）间隔。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># visudo</span> 99 <span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>100 root ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL101 linuxprobe ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>单个命令赋予<code>root</code>权限(<code>cat</code>,<code>reboot</code>)</p><p>查询命令的绝对路径</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token keyword">exit</span> <span class="token function">logout</span> <span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># whereis cat </span>cat: /usr/bin/cat /usr/share/man/man1/cat.1.gz /usr/share/man/man1p/cat.1p.gz<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># whereis reboot</span>reboot: /usr/sbin/reboot /usr/share/man/man2/reboot.2.gz /usr/share/man/man8/reboot.8.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>赋予权限</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># visudo</span> 99 <span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>100 root ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL101 linuxprobe ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> /usr/bin/cat,/usr/sbin/reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用户下次再执行<code>sudo</code>命令时就<strong>不用密码验证</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># visudo</span> 99 <span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>100 root ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL101 linuxprobe ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD:/usr/bin/cat,/usr/sbin/reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、存储结构与管理硬盘"><a href="#七、存储结构与管理硬盘" class="headerlink" title="七、存储结构与管理硬盘"></a>七、存储结构与管理硬盘</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817101100075.png" alt="Linux系统中的文件存储结构"></p><h3 id="7-1、一切从“-”开始"><a href="#7-1、一切从“-”开始" class="headerlink" title="7.1、一切从“/”开始"></a>7.1、一切从“<code>/</code>”开始</h3><blockquote><p><code>Linux</code>系统中常见的目录名称以及相应内容</p></blockquote><table><thead><tr><th>目录名称</th><th>应放置文件的内容</th></tr></thead><tbody><tr><td><code>/boot</code></td><td>开机所需文件—<strong>内核</strong>、<strong>开机菜单</strong>以及<strong>所需配置文件</strong>等</td></tr><tr><td><code>/dev</code></td><td>以文件形式存放任何<strong>设备与接口</strong></td></tr><tr><td><code>/etc</code></td><td>配置文件</td></tr><tr><td><code>/home</code></td><td>用户主目录</td></tr><tr><td><code>/bin</code></td><td>存放单用户模式下还可以操作的<a href="https://www.linuxcool.com/">命令</a></td></tr><tr><td><code>/lib</code></td><td>开机时用到的函数库，以及<code>/bin</code>与<code>/sbin</code>下面的命令要调用的函数</td></tr><tr><td><code>/sbin</code></td><td>开机过程中需要的命令</td></tr><tr><td><code>/media</code></td><td>用于挂载设备文件的目录</td></tr><tr><td><code>/opt</code></td><td>放置第三方的软件</td></tr><tr><td><code>/root</code></td><td>系统管理员的家目录</td></tr><tr><td><code>/srv</code></td><td>一些网络服务的数据文件目录</td></tr><tr><td><code>/tmp</code></td><td>任何人均可使用的“共享”临时目录</td></tr><tr><td><code>/proc</code></td><td><strong>虚拟文件系统</strong>，例如<strong>系统内核</strong>、<strong>进程</strong>、<strong>外部设备及网络状态</strong>等</td></tr><tr><td><code>/usr/local</code></td><td>用户自行安装的软件</td></tr><tr><td><code>/usr/sbin</code></td><td>Linux系统开机时不会使用到的软件/命令/脚本</td></tr><tr><td><code>/usr/share</code></td><td>帮助与说明文件，也可放置共享文件</td></tr><tr><td><code>/var</code></td><td>主要存放经常变化的文件，如日志</td></tr><tr><td><code>/lost+found</code></td><td>当文件系统发生错误时，将一些丢失的文件片段存放在这里</td></tr></tbody></table><h3 id="7-2、物理设备的命名规则"><a href="#7-2、物理设备的命名规则" class="headerlink" title="7.2、物理设备的命名规则"></a>7.2、物理设备的命名规则</h3><blockquote><p>常见的硬件设备及其文件名称</p></blockquote><table><thead><tr><th>硬件设备</th><th>文件名称</th></tr></thead><tbody><tr><td><code>IDE设备</code></td><td><code>/dev/hd[a-d]</code></td></tr><tr><td><code>SCSI</code>/<code>SATA</code>/<code>U盘</code></td><td><code>/dev/sd[a-z]</code></td></tr><tr><td><code>virtio设备</code></td><td><code>/dev/vd[a-z]</code></td></tr><tr><td>软驱</td><td><code>/dev/fd[0-1]</code></td></tr><tr><td>打印机</td><td><code>/dev/lp[0-15]</code></td></tr><tr><td>光驱</td><td><code>/dev/cdrom</code></td></tr><tr><td>鼠标</td><td><code>/dev/mouse</code></td></tr><tr><td>磁带机</td><td><code>/dev/st0</code>或<code>/dev/ht0</code></td></tr></tbody></table><blockquote><p>由于现在的<code>IDE设备</code>已经很少见了，所以一般的硬盘设备都是以“<code>/dev/sd</code>”开头。而一台主机上可以有多</p><p>块硬盘，因此系统采用<code>a～z</code>来代表26块不同的硬盘（默认从a开始分配），而且硬盘的分区编号也很有</p><p>讲究:</p><ul><li><strong>主分区</strong>或扩展分区的编号从1开始，到4结束；</li><li><strong>逻辑分区</strong>从编号5开始</li></ul></blockquote><blockquote><p>分析<code>/dev/sda5</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817110431706.png"></p><blockquote><p>硬盘设备是由大量的<strong>扇区</strong>组成的，每个扇区的容量为512字节。其中第一个扇区最重要，它里面保存着</p><p><strong>主引导记录</strong>与<strong>分区</strong>表信息。就第一个扇区来讲，主引导记录需要占用446字节，<strong>分区表</strong>占用64字节，<strong>结束</strong></p><p><strong>符</strong>占用2字节；其中<strong>分区表中每记录一个分区信息就需要16字节</strong>，这样一来最多只有4个分区信息可以写</p><p>到第一个扇区中，这4个分区就是4个主分区。第一个扇区中的数据信息如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817112045158.png"></p><blockquote><p>现在，问题来了—每块硬盘最多只能创建出4个分区？这明显不合情理也不够用。</p><p>于是为了解决分区个数不够的问题，<strong>可以将第一个扇区的分区表中16字节（原本要写入主分区信息）</strong></p><p><strong>的空间（称之为扩展分区）拿出来指向另外一个分区</strong>。也就是说，扩展分区其实并不是一个真正的</p><p>分区，而更像是一个占用16字节分区表空间的指针—一个指向另外一个分区的指针。这样一来，用户一</p><p>般会选择使用3个主分区加1个扩展分区的方法，然后在扩展分区中创建出数个逻辑分区，从而来满足多</p><p>分区（大于4个）的需求。当然，就目前来讲大家只要明白为什么主分区不能超过4个就足够了。主分</p><p>区、扩展分区、逻辑分区可以像图6-4那样来规划。</p></blockquote><h3 id="7-3、文件系统与数据资料"><a href="#7-3、文件系统与数据资料" class="headerlink" title="7.3、文件系统与数据资料"></a>7.3、文件系统与数据资料</h3><blockquote><p><code>Linux</code>系统支持数十种文件系统，而最常见的文件系统如下:</p><ul><li><p><code>Ext2</code>：最早可追溯到1993年，是<code>Linux</code>系统的<strong>第一个商业级文件系统</strong>，它基本<strong>沿袭了UNIX文件系</strong></p><p><strong>统的设计标准</strong>。但由于<strong>不包含日志读写功能，数据丢失的可能性很大</strong>，因此大家能不用就不用，或者</p><p>顶多建议用于SD存储卡或U盘。</p></li><li><p><code>Ext3</code>：是一款<strong>日志文件系统</strong>，它会<strong>把整个硬盘的每个写入动作的细节都预先记录下来</strong>，然后再进行</p><p>实际操作，以便在发生异常宕机后能回溯追踪到被中断的部分。<code>Ext3</code>能够在系统异常宕机时避免文</p><p>件系统资料丢失，并能自动修复数据的不一致与错误。然而，当硬盘容量较大时，所需的修复时间也</p><p>会很长，而且也不能100%地保证资料不会丢失。</p></li><li><p><code>Ext4</code>：<code>Ext3</code>的改进版本，作为<code>RHEL 6</code>系统中<strong>默认的文件管理系统</strong>，它支持的存储容量高达</p><p><code>1EB</code>（<code>1EB</code>=<code>1,073,741,824GB</code>），且能够有无限多的子目录。另外，<code>Ext4</code>文件系统能够批量分配</p><p><code>block</code>（块），从而极大地提高了读写效率。<strong>现在很多主流服务器也会使用<code>Ext4</code>文件系统。</strong></p></li><li><p><code>XFS</code>：是一种高性能的日志文件系统，而且是<code>RHEL 7/8</code>中默认的文件管理系统。<strong>它的优势在发生意</strong></p><p><strong>外宕机后尤其明显，即可以快速地恢复可能被破坏的文件，而且强大的日志功能只需花费极低的</strong></p><p><strong>计算和存储性能</strong>。它支持的最大存储容量为<code>18EB</code>，这几乎满足了所有需求。</p></li></ul></blockquote><blockquote><p><strong>在拿到一块新的硬盘存储设备后，先需要分区，然后再格式化文件系统，最后才能挂载并正常使用。硬</strong></p><p><strong>盘的分区操作取决于您的需求和硬盘大小；也可以选择不进行分区，但是必须对硬盘进行格式化处理</strong></p></blockquote><h3 id="7-4、挂载硬件设备"><a href="#7-4、挂载硬件设备" class="headerlink" title="7.4、挂载硬件设备"></a>7.4、挂载硬件设备</h3><p><code>mount</code>命令用于挂载文件系统，格式为“<code>mount</code>文件系统 挂载目录“。</p><blockquote><p> <code>mount</code>命令中的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-a</code></td><td>挂载所有在<code>/etc/fstab</code>中定义的文件系统</td></tr><tr><td><code>-t</code></td><td>指定文件系统的类型</td></tr></tbody></table><blockquote><p>设备<code>/dev/sdb2</code>挂载到<code>/backup</code>目录，只需要在<code>mount</code>命令中填写设备与挂载目录参数就行，系统会自</p><p>动判断要挂载文件的类型，命令如下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount /dev/sdb2 /backup</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果在工作中要挂载一块网络存储设备，该设备的名字可能会变来变去，这样再写为<code>sdb</code>就不太合适</p><p>了。这时推荐用<code>UUID</code>（<code>Universally Unique Identifier</code>，通用唯一识别码）进行挂载操作。<code>UUID</code></p><p>是一串用于标识每块独立硬盘的字符串，具有唯一性及稳定性，特别适合用来挂载网络设备。那么，怎</p><p>么才能得知独立硬盘的<code>UUID</code>呢？答案是使用<code>blkid</code>命令</p></blockquote><blockquote><p><code>blkid</code>命令用于显示设备的属性信息，英文全称为“<code>block id</code>”，语法格式为“<code>blkid</code> [设备名]”。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># blkid</span>/dev/sdb1: UUID<span class="token operator">=</span><span class="token string">"2db66eb4-d9c1-4522-8fab-ac074cd3ea0b"</span> TYPE<span class="token operator">=</span><span class="token string">"xfs"</span> PARTUUID<span class="token operator">=</span><span class="token string">"eb23857a-01"</span>/dev/sdb2: UUID<span class="token operator">=</span><span class="token string">"478fRb-1pOc-oPXv-fJOS-tTvH-KyBz-VaKwZG"</span> TYPE<span class="token operator">=</span><span class="token string">"ext4"</span> PARTUUID<span class="token operator">=</span><span class="token string">"eb23857a-02"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>有了设备的<code>UUID</code>值之后，就可以用它挂载网络设备了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount UUID=478fRb-1pOc-oPXv-fJOS-tTvH-KyBz-VaKwZG /backup</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按照上面的方法执行<code>mount</code>命令后就能立即使用文件系统了，但系统在重启后挂载就会失效，也就是说</p><p>需要每次开机后都手动挂载一下。这肯定不是我们想要的效果，如果想让硬件设备和目录永久地进行自</p><p>动关联，就必须<strong>把挂载信息按照指定的填写格式“设备文件 挂载目录 格式类型 权限选项 是否备份 是否</strong></p><p><strong>自检”写入到<code>/etc/fstab</code>文件中</strong></p></blockquote><blockquote><p>用于挂载信息的指定填写格式中，各字段所表示的意义</p></blockquote><table><thead><tr><th>字段</th><th>意义</th></tr></thead><tbody><tr><td>设备文件</td><td>一般为设备的路径+设备名称，也可以写唯一识别码（<code>UUID</code>，<code>Universally Unique Identifier</code>）</td></tr><tr><td>挂载目录</td><td>指定要挂载到的目录，需在挂载前创建好</td></tr><tr><td>格式类型</td><td>指定文件系统的格式，比如<code>Ext3</code>、<code>Ext4</code>、<code>XFS</code>、<code>SWAP</code>、<code>iso9660</code>（此为光盘设备）等</td></tr><tr><td>权限选项</td><td>若设置为<code>defaults</code>，则默认权限为：<code>rw</code>, <code>suid,</code> <code>dev</code>, <code>exec</code>, <code>auto</code>, <code>nouser</code>, <code>async</code></td></tr><tr><td>是否备份</td><td>若为1则开机后使用<code>dump</code>进行磁盘备份，为0则不备份</td></tr><tr><td>是否自检</td><td>若为1则开机后自动进行磁盘自检，为0则不自检</td></tr></tbody></table><blockquote><p>如果想将文件系统为<code>Ext4</code>的硬件设备<code>/dev/sdb2</code>在开机后自动挂载到<code>/backup</code>目录上，并保持默认权</p><p>限且无须开机自检，就需要在<code>/etc/fstab</code>文件中写入下面的信息，这样在系统重启后也会成功挂载。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                     /        xfs     defaults    0 0UUID<span class="token operator">=</span>812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot    xfs     defaults    0 0/dev/mapper/rhel-swap                     swap     swap    defaults    0 0/dev/sdb2                                 /backup  ext4    defaults    0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写入到<code>/etc/fstab</code>文件中的设备信息并不会立即生效，需要使用<code>mount -a</code>参数进行自动挂载</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>umount</code>命令用于卸载设备或文件系统，英文全称为“<code>un mount</code>”，语法格式为“<code>umount </code>[设备文件/挂载目录]”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /dev/sdb2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>lsblk</code>命令用于查看已挂载的磁盘的空间使用情况，英文全称为“<code>list block id</code>”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk </span>NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda             8:0    0   20G  0 disk ├─sda1          8:1    0    1G  0 part /boot└─sda2          8:2    0   19G  0 part   ├─rhel-root 253:0    0   17G  0 lvm  /  └─rhel-swap 253:1    0    2G  0 lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>sr0            11:0    1  6.6G  0 rom  /media/cdrom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5、添加硬盘设备（虚拟机操作）"><a href="#7-5、添加硬盘设备（虚拟机操作）" class="headerlink" title="7.5、添加硬盘设备（虚拟机操作）"></a>7.5、添加硬盘设备（虚拟机操作）</h3><h4 id="7-5-1、添加硬盘设备"><a href="#7-5-1、添加硬盘设备" class="headerlink" title="7.5.1、添加硬盘设备"></a>7.5.1、添加硬盘设备</h4><blockquote><p>首先把虚拟机系统关机，稍等几分钟会自动返回到虚拟机管理主界面，然后单击“编辑虚拟机设置”选项，</p><p>在弹出的界面中单击“添加”按钮，新增一块硬件设备</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140207275.png"></p><blockquote><p>选择想要添加的硬件类型为“硬盘”，然后单击“下一步”按钮就可以了，如图所示。这确实没有什么需要</p><p>进一步解释的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140233922.png"></p><blockquote><p>选择虚拟硬盘的类型为<code>SATA</code>，并单击“下一步”按钮，如图所示。这样虚拟机中的设备名称过一会儿后应</p><p>该为<code>/dev/sdb</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140304449.png"></p><blockquote><p>选中“创建新虚拟磁盘”单选按钮（而不是其他选项），再次单击“下一步”按钮，如图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140327958.png"></p><blockquote><p>将“最大磁盘大小”设置为默认的<code>20GB</code>。这个数值是限制这台虚拟机所使用的最大硬盘空间，而不是立即</p><p>将其填满，因此默认<code>20GB</code>就很合适了。单击“下一步”按钮，如图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140415148.png"></p><blockquote><p>设置磁盘文件的文件名和保存位置（这里采用默认设置即可，无须修改），直接单击“完成”按钮，如图所</p><p>示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140440306.png"></p><blockquote><p>将新硬盘添加好后就可以看到设备信息了。这里不需要做任何修改，直接单击“确定”按钮后就可以启虚拟</p><p>机了，如图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817140509238.png"></p><blockquote><p>在虚拟机中模拟添加了硬盘设备后就应该能看到抽象后的硬盘设备文件了。按照前文讲解的<code>udev</code>服务命</p><p>名规则，第二个被识别的<code>SATA</code>设备应该会被保存为<code>/dev/sdb</code>，这个就是硬盘设备文件了。但在开始使</p><p>用该硬盘之前还需要进行分区操作，例如从中取出一个<code>2GB</code>的分区设备以供后面的操作使用</p></blockquote><h4 id="7-5-2、硬盘设备分区"><a href="#7-5-2、硬盘设备分区" class="headerlink" title="7.5.2、硬盘设备分区"></a>7.5.2、硬盘设备分区</h4><blockquote><p><code>fdisk</code>命令用于新建、修改及删除磁盘的分区表信息，英文全称为“<code>format disk</code>”，语法格式为“<code>fdisk</code></p><p>磁盘名称”。</p><p>在<code>Linux</code>系统中，管理硬盘设备最常用的方法就当属<code>fdisk</code>命令了。它提供了集<strong>添加、删除、转换</strong>分区</p><p>等功能于一身的“一站式分区服务”。不过与前面的直接写到命令后面的参数不同，这条命令的参数是<strong>交互</strong></p><p><strong>式的一问一答的形式</strong>，因此在管理硬盘设备时特别方便，可以根据需求动态调整。</p></blockquote><blockquote><p> <code>fdisk</code>命令中的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>m</code></td><td>查看全部可用的参数</td></tr><tr><td><code>n</code></td><td>添加新的分区</td></tr><tr><td><code>d</code></td><td>删除某个分区信息</td></tr><tr><td><code>l</code></td><td>列出所有可用的分区类型</td></tr><tr><td><code>t</code></td><td>改变某个分区的类型</td></tr><tr><td><code>p</code></td><td>查看分区表信息</td></tr><tr><td><code>w</code></td><td>保存并退出</td></tr><tr><td><code>q</code></td><td>不保存直接退出</td></tr></tbody></table><blockquote><p>首先使用<code>fdisk</code>命令来尝试管理<code>/dev/sdb</code>硬盘设备。在看到提示信息后输入参数<code>p</code>来查看硬盘设备内已</p><p>有的分区信息，其中包括了<strong>硬盘的容量大小、扇区个数等信息</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sdb</span>Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.32.1<span class="token punctuation">)</span>.Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.Be careful before using the <span class="token function">write</span> command.Device does not contain a recognized partition table.Created a new DOS disklabel with disk identifier 0x88b2c2b0.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x88b2c2b0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入参数<code>n</code>尝试添加新的分区。系统会要求用户是选择继续输入参数<code>p</code>来创建<strong>主分区</strong>，还是输入参数<code>e</code>来</p><p>创建<strong>扩展分区</strong>。这里输入参数p来创建一个主分区</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition <span class="token function">type</span>   p   primary <span class="token punctuation">(</span>0 primary, 0 extended, 4 free<span class="token punctuation">)</span>   e   extended <span class="token punctuation">(</span>container <span class="token keyword">for</span> logical partitions<span class="token punctuation">)</span>Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<strong>确认创建一个主分区后</strong>，系统要求用户先输入<strong>主分区的编号</strong>。在前文得知，主分区的编号范围是</p><p>1～4，因此这里输入默认的1就可以了。</p><p>接下来系统会提示定<strong>义起始的扇区位置</strong>，这不需要改动，敲击回车键保留默认设置即可，系统会自动计</p><p>算出最靠前的空闲扇区的位置。最后，系统会要求定义分区的结束扇区位置，这其实就是要去定义整个</p><p>分区的大小是多少。我们不用去计算扇区的个数，只需要输入<code>+2G</code>即可创建出一个容量为<code>2GB</code>的硬盘分</p><p>区</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Partition number <span class="token punctuation">(</span>1-4, default 1<span class="token punctuation">)</span>: 1First sector <span class="token punctuation">(</span>2048-41943039, default 2048<span class="token punctuation">)</span>: 此处敲击回车即可Last sector, +sectors or +size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span>2048-41943039, default 41943039<span class="token punctuation">)</span>: +2GCreated a new partition 1 of <span class="token function">type</span> <span class="token string">'Linux'</span> and of size 2 GiB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>再次使用参数<code>p</code>来查看硬盘设备中的分区信息。果然就能看到一个名称为<code>/dev/sdb1</code>、起始扇区位置为</p><p>2048、结束扇区位置为4196351的主分区了。这时千万不要直接关闭窗口，而应该敲击参数<code>w</code>后按回车</p><p>键，这样分区信息才是真正地写入成功啦</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x88b2c2b0Device     Boot Start     End Sectors Size Id Type/dev/sdb1        2048 4196351 4194304   2G 83 LinuxCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wThe partition table has been altered.Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分区信息中第<code>6</code>个字段的<code>Id</code>值是一个编码，用于标识该分区的作用，可帮助用户快速了解该分区的作</p><p>用，一般没必要修改。使用<code>l</code>参数查看一下磁盘编码都有哪些，然后在<code>7.6</code>节进行<code>SWAP</code>操作时再修改吧</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: l   0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris         1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec <span class="token punctuation">(</span>FAT- 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec <span class="token punctuation">(</span>FAT- 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden or  c6  DRDOS/sec <span class="token punctuation">(</span>FAT- 4  FAT16 <span class="token operator">&lt;</span>32M      40  Venix 80286     85  Linux extended  c7  Syrinx          5  Extended        41  PPC PReP Boot   86  NTFS volume <span class="token keyword">set</span> da  Non-FS data     6  FAT16           42  SFS             87  NTFS volume <span class="token keyword">set</span> db  CP/M / CTOS / <span class="token keyword">.</span> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility    8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       <span class="token function">df</span>  BootIt          9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access      a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O         b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor       c  W95 FAT32 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 52  CP/M            a0  IBM Thinkpad hi ea  Rufus alignment e  W95 FAT16 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 53  OnTrack DM6 Aux a5  FreeBSD         eb  BeOS fs         f  W95 Ext'd <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 54  OnTrackDM6      a6  OpenBSD         ee  GPT            10  OPUS            55  EZ-Drive        a7  NeXTSTEP        ef  EFI <span class="token punctuation">(</span>FAT-12/16/11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f0  Linux/PA-RISC b12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f1  SpeedStor      14  Hidden FAT16 <span class="token operator">&lt;</span>3 61  SpeedStor       ab  Darwin boot     f4  SpeedStor      16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      f2  DOS secondary  17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fb  VMware VMFS    18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fc  VMware VMKCORE 1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fd  Linux raid auto1c  Hidden W95 FAT3 75  PC/IX           <span class="token function">bc</span>  Acronis FAT32 L fe  LANstep        1e  Hidden W95 FAT1 80  Old Minix       be  Solaris boot    ff  BBT  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上述步骤执行完毕之后，Linux系统会自动把这个硬盘主分区抽象成<code>/dev/sdb1</code>设备文件。可以使用</p><p><code>file</code>命令<strong>查看该文件的属性</strong>，有些时候系统并没有自动把分区信息同步给<code>Linux</code>内核，而且这种情况似</p><p>乎还比较常见（但不能算作严重的<code>bug</code>）。可以输入<code>partprobe</code>命令手动将分区信息同步到内核，而且</p><p>一般推荐连续两次执行该命令，效果会更好。如果使用这个命令都无法解决问题，那么就重启计算机</p><p>吧，这个“杀手锏”百试百灵，一定会有用的</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sdb1</span>/dev/sdb1: cannot <span class="token function">open</span> `/dev/sdb1' <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># partprobe</span><span class="token punctuation">[</span>root@linuxprobe <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># partprobe</span><span class="token punctuation">[</span>root@linuxprobe <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sdb1</span>/dev/sdb1: block special<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果硬件存储设备没有进行格式化，则Linux系统无法得知怎么在其上写入数据。因此，在对存储设备进</p><p>行分区后还需要进行格式化操作。在Linux系统中用于格式化操作的命令是<code>mkfs</code>。这条命令很有意思，</p><p>因为在<code>Shell终端中</code>输入<code>mkfs</code>名后再敲击两下用于补齐命令的Tab键，会有如下所示的效果</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs</span>mkfs         mkfs.ext2    mkfs.ext4    mkfs.minix   mkfs.vfat    mkfs.cramfs  mkfs.ext3    mkfs.fat     mkfs.msdos   mkfs.xfs <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这个<code>mkfs</code>命令很贴心地把常用的文件系统名称用后缀的方式保存成了多个命令文件，用起来也非常简单</p><p>——-&gt;<code>mkfs</code>.文件类型名称。例如要将分区为<code>XFS</code>的文件系统进行格式化，</p><p>则命令应为<code>mkfs.xfs /dev/sdb1</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">oot@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.xfs /dev/sdb1</span>meta-data<span class="token operator">=</span>/dev/sdb1              isize<span class="token operator">=</span>512    agcount<span class="token operator">=</span>4, agsize<span class="token operator">=</span>131072 blks         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>512   attr<span class="token operator">=</span>2, projid32bit<span class="token operator">=</span>1         <span class="token operator">=</span>                       crc<span class="token operator">=</span>1        finobt<span class="token operator">=</span>1, sparse<span class="token operator">=</span>1, rmapbt<span class="token operator">=</span>0         <span class="token operator">=</span>                       reflink<span class="token operator">=</span>1data     <span class="token operator">=</span>                       bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>524288, imaxpct<span class="token operator">=</span>25         <span class="token operator">=</span>                       sunit<span class="token operator">=</span>0      swidth<span class="token operator">=</span>0 blksnaming   <span class="token operator">=</span>version 2              bsize<span class="token operator">=</span>4096   ascii-ci<span class="token operator">=</span>0, ftype<span class="token operator">=</span>1log      <span class="token operator">=</span>internal log           bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>2560, version<span class="token operator">=</span>2         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>512   sunit<span class="token operator">=</span>0 blks, lazy-count<span class="token operator">=</span>1realtime <span class="token operator">=</span>none                   extsz<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>0, rtextents<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后使用<code>mount</code>命令将存储设备与挂载点进行关联；最后使用<code>df -h</code>命令来查看挂载状态和硬盘使用量</p><p>信息。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /newFS</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount /dev/sdb1 /newFS</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  974M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0/dev/sdb1              2.0G   47M  2.0G   3% /newFS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6、添加交换分区"><a href="#7-6、添加交换分区" class="headerlink" title="7.6、添加交换分区"></a>7.6、添加交换分区</h3><blockquote><p>交换（<code>SWAP</code>）分区是一种通过在硬盘中预先划分一定的空间，然后把内存中暂时不常用的数据临时存放</p><p>到硬盘中，以便腾出物理内存空间让更活跃的程序服务来使用的技术，其设计目的是为了解决真实物理</p><p>内存不足的问题。通俗来讲就是让硬盘帮内存分担压力。但由于交换分区毕竟是通过硬盘设备读写数据</p><p>的，速度肯定要比物理内存慢，所以只有当真实的物理内存耗尽后才会调用交换分区的资源。</p></blockquote><blockquote><p>在对<code>/dev/sdb</code>存储设备进行分区操作前，有必要先说一下交换分区的划分建议：<strong>在生产环境中，交换分</strong></p><p><strong>区的大小一般为真实物理内存的1.5～2倍</strong>。为了让大家更明显地感受交换分区空间的变化，这里取出一</p><p>个大小为<code>5GB</code>的主分区作为交换分区资源</p></blockquote><blockquote><p> 创建分区</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sdb</span>Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.32.1<span class="token punctuation">)</span>.Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.Be careful before using the <span class="token function">write</span> command.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition <span class="token function">type</span>   p   primary <span class="token punctuation">(</span>1 primary, 0 extended, 3 free<span class="token punctuation">)</span>   e   extended <span class="token punctuation">(</span>container <span class="token keyword">for</span> logical partitions<span class="token punctuation">)</span>Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: pPartition number <span class="token punctuation">(</span>2-4, default 2<span class="token punctuation">)</span>: 敲击回车即可First sector <span class="token punctuation">(</span>4196352-41943039, default 4196352<span class="token punctuation">)</span>: 敲击回车即可Last sector, +sectors or +size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span>4196352-41943039, default 41943039<span class="token punctuation">)</span>: +5GCreated a new partition 2 of <span class="token function">type</span> <span class="token string">'Linux'</span> and of size 5 GiB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的操作结束后，我们就得到了一个容量为<code>5GB</code>的新分区。然后尝试修改硬盘的标识码，这里将其</p><p>改成82（<code>Linux swap</code>）以方便以后知道它的作用</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: tPartition number <span class="token punctuation">(</span>1,2, default 2<span class="token punctuation">)</span>: 2Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: 82Changed <span class="token function">type</span> of partition <span class="token string">'Linux'</span> to <span class="token string">'Linux swap / Solaris'</span><span class="token keyword">.</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: p Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x88b2c2b0Device     Boot   Start      End  Sectors Size Id Type/dev/sdb1          2048  4196351  4194304   2G 83 Linux/dev/sdb2       4196352 14682111 10485760   5G 82 Linux swap / Solaris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>敲击<code>w</code>参数退出分区表编辑工具</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wThe partition table has been altered.Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>mkswap</code>命令用于对新设备进行交换分区格式化，英文全称为“<code>make swap</code>”，语法格式为“<code>mkswap</code>设备名</p><p>称”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkswap /dev/sdb2</span>Setting up swapspace version 1, size <span class="token operator">=</span> 5 GiB <span class="token punctuation">(</span>5368705024 bytes<span class="token punctuation">)</span>no label, UUID<span class="token operator">=</span>45a4047c-49bf-4c88-9b99-f6ac93908485<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>swapon</code>命令用于激活新的交换分区设备，英文全称为“<code>swap on</code>”，语法格式为“<code>swapon</code>设备名称”</p><p>使用<code>swapon</code>命令把准备好的<code>SWAP</code>硬盘设备正式挂载到系统中。可以使用<code>free -m</code>命令查看交换分区的</p><p>大小变化</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -m</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:           1966        1391         105          12         469         384Swap:          2047           9        2038<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># swapon /dev/sdb2</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -m</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:           1966        1395         101          12         469         380Swap:          7167           9        7158<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为了能够让新的交换分区设备在重启后依然生效，需要按照下面的格式将相关信息写入配置文件中，并</p><p>记得保存</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                        /               xfs        defaults    1 1UUID<span class="token operator">=</span>812b1f7c-8b5b-43da-8c06-b9999e0fe48b    /boot           xfs        defaults    1 2/dev/mapper/rhel-swap                        swap            swap       defaults    0 0/dev/cdrom                                   /media/cdrom    iso9660    defaults    0 0 /dev/sdb1                                    /newFS          xfs        defaults    0 0 /dev/sdb2                                    swap            swap       defaults    0 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7、磁盘容量配额"><a href="#7-7、磁盘容量配额" class="headerlink" title="7.7、磁盘容量配额"></a>7.7、磁盘容量配额</h3><blockquote><p><code>root</code>管理员需要<strong>使用磁盘容量配额服务来限制某位用户或某个用户组针对特定文件夹可以使用的最大硬</strong></p><p><strong>盘空间或最大文件个数</strong>，一旦达到这个最大值就不再允许继续使用。可以使用<code>quota</code>技术进行磁盘容量</p><p>配额管理，从而限制用户的硬盘可用容量或所能创建的最大文件个数。<code>quota</code>技术还有<strong>软限制</strong>和<strong>硬限制</strong></p><p>的功能。</p><ul><li><strong>软限制</strong>：当达到软限制时会提示用户，但仍允许用户在限定的额度内<strong>继续使用</strong>。</li><li><strong>硬限制</strong>：当达到硬限制时会提示用户，且强制终止用户的操作。</li></ul></blockquote><blockquote><p><code>RHEL 8</code>系统中已经安装了<code>quota</code>磁盘容量配额服务程序包，但存储设备却默认没有开启对<code>quota</code>技术的</p><p>支持，此时需要手动编辑配置文件并重启一次系统，让系统中的启动目录（<code>/boot</code>）能够支持<code>quota</code>磁</p><p>盘配额技术</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                        /             xfs        defaults         1 1UUID<span class="token operator">=</span>812b1f7c-8b5b-43da-8c06-b9999e0fe48b    /boot         xfs        defaults,uquota  1 2/dev/mapper/rhel-swap                        swap          swap       defaults         0 0/dev/cdrom                                   /media/cdrom  iso9660    defaults         0 0 /dev/sdb1                                    /newFS        xfs        defaults         0 0 /dev/sdb2                                    swap          swap       defaults         0 0 <span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在重启系统后使用<code>mount</code>命令查看，即可发现<code>/boot</code>目录已经支持<code>quota</code>磁盘配额技术了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount | grep boot</span>/dev/sda1 on /boot <span class="token function">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,usrquota<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>接下来创建一个用于检查<code>quota</code>磁盘容量配额效果的用户<code>tom</code>，并针对<code>/boot</code>目录增加其他人的写权</p><p>限，保证用户能够正常写入数据</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd tom</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R o+w /boot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>xfs_quota</code>命令用于<strong>管理设备的磁盘容量配额</strong>，语法格式为“<code>xfs_quota</code> [参数] 配额 文件系统”。</p></blockquote><blockquote><p>这是一个专门针对<code>XFS</code>文件系统来管理<code>quota</code>磁盘容量配额服务而设计的命令。其中，<code>-c</code>参数用于以参</p><p>数的形式设置要执行的命令；<code>-x</code>参数是专家模式，让运维人员能够对<code>quota</code>服务进行更多复杂的配置。</p><p>接下来使用<code>xfs_quota</code>命令来设置用户<code>tom</code>对<code>/boot</code>目录的<code>quota</code>磁盘容量配额。具体的限额控制包</p><p>括：<strong>硬盘使用量</strong>的软限制和硬限制分别为<code>3MB</code>和<code>6MB</code>；<strong>创建文件数量</strong>的软限制和硬限制分别为3个和6</p><p>个。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># xfs_quota -x -c 'limit bsoft=3m bhard=6m isoft=3 ihard=6 tom' /boot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># xfs_quota -x -c report /boot</span>User <span class="token function">quota</span> on /boot <span class="token punctuation">(</span>/dev/sda1<span class="token punctuation">)</span>                               Blocks                     User ID          Used       Soft       Hard    Warn/Grace     ---------- -------------------------------------------------- root           114964          0          0     00 <span class="token punctuation">[</span>--------<span class="token punctuation">]</span>tom                 0       3072       6144     00 <span class="token punctuation">[</span>--------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>bsoft</code>和<code>bhard</code>则是代表文件所占用的block大小，也就是文件占用的最大容量的总统计</p></blockquote><blockquote><p>当配置好上述各种软硬限制后，尝试切换到一个普通用户，然后分别尝试创建一个体积为<code>5MB</code>和<code>8MB</code>的</p><p>文件。可以发现，在创建<code>8MB</code>的文件时受到了系统限制</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - tom</span><span class="token punctuation">[</span>tom@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> /boot<span class="token punctuation">[</span>tom@linuxprobe boot<span class="token punctuation">]</span>$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/boot/tom bs<span class="token operator">=</span>5M count<span class="token operator">=</span>11+0 records <span class="token keyword">in</span>1+0 records out5242880 bytes <span class="token punctuation">(</span>5.2 MB, 5.0 MiB<span class="token punctuation">)</span> copied, 0.00298178 s, 1.8 GB/s<span class="token punctuation">[</span>tom@linuxprobe boot<span class="token punctuation">]</span>$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/boot/tom bs<span class="token operator">=</span>8M count<span class="token operator">=</span>1dd: error writing <span class="token string">'/boot/tom'</span><span class="token keyword">:</span> Disk <span class="token function">quota</span> exceeded1+0 records <span class="token keyword">in</span>0+0 records out4194304 bytes <span class="token punctuation">(</span>4.2 MB, 4.0 MiB<span class="token punctuation">)</span> copied, 0.00398607 s, 1.1 GB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>edquota</code>命令用于管理系统的磁盘配额，英文全称为“<code>edit quota</code>”，语法格式为“<code>edquota</code> [参数] 用户</p><p>名”</p><p>在为用户设置了<code>quota</code>磁盘容量配额限制后，可以使用<code>edquota</code>命令按需修改限额的数值。其中，<code>-u</code>参</p><p>数表示要针对哪个用户进行设置；<code>-g</code>参数表示要针对哪个用户组进行设置，如表所示。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-u</code></td><td>对某个用户进行设置</td></tr><tr><td><code>-g</code></td><td>对某个用户组进行设置</td></tr><tr><td><code>-p</code></td><td>复制原有的规则到新的用户/组</td></tr><tr><td><code>-t</code></td><td>限制宽限期限</td></tr></tbody></table><blockquote><p> <code>edquota</code>命令会调用<code>Vi</code>或<code>Vim</code>编辑器来让<code>root</code>管理员修改要限制的具体细节，记得用<code>wq</code>保存退出。</p><p>下面把用户<code>tom</code>的硬盘使用量的硬限额从<code>5MB</code>提升到<code>8MB</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>tom@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token keyword">exit</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># edquota -u tom</span>Disk quotas <span class="token keyword">for</span> user tom <span class="token punctuation">(</span>uid 1001<span class="token punctuation">)</span>:  Filesystem                   blocks       soft       hard     inodes     soft     hard  /dev/sda1                      4096       3072       8192          1        3        6<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - tom</span><span class="token punctuation">[</span>tom@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> /boot<span class="token punctuation">[</span>tom@linuxprobe boot<span class="token punctuation">]</span>$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/boot/tom bs<span class="token operator">=</span>8M count<span class="token operator">=</span>11+0 records <span class="token keyword">in</span>1+0 records out8388608 bytes <span class="token punctuation">(</span>8.4 MB, 8.0 MiB<span class="token punctuation">)</span> copied, 0.0185476 s, 452 MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-8、VDO虚拟数据优化"><a href="#7-8、VDO虚拟数据优化" class="headerlink" title="7.8、VDO虚拟数据优化"></a>7.8、<code>VDO</code>虚拟数据优化</h3><blockquote><p><code>VDO</code>（<code>Virtual Data Optimize</code>，虚拟数据优化）是一种通过压缩或删除存储设备上的数据来优化存储</p><p>空间的技术。<code>VDO</code>技术的关键就是<strong>对硬盘内原有的数据进行删重操作</strong>，它有点类似于我们平时使用的网</p><p>盘服务，在第一次正常上传文件时速度特别慢，在第二次上传相同的文件时仅作为一个数据指针，几乎</p><p>可以达到“秒传”的效果，无须再多占用一份空间，也不用再漫长等待。除了删重操作，**<code>VDO</code>技术还可以对**</p><p><strong>日志和数据库进行自动压缩</strong>，进一步减少存储浪费的情况。<code>VDO</code>针对各种类型文件的压缩效果如表所</p><p>示。</p></blockquote><blockquote><p>对各种类型文件压缩效果汇总表</p></blockquote><table><thead><tr><th>文件名</th><th>描述</th><th>类型</th><th>原始大小（KB）</th><th>实际占用空间（KB）</th></tr></thead><tbody><tr><td><code>dickens</code></td><td>狄更斯文集</td><td>英文原文</td><td>9953</td><td>9948</td></tr><tr><td><code>mozilla</code></td><td><code>Mozilla</code>的<code>1.0</code>可执行文件</td><td>执行程序</td><td>50020</td><td>33228</td></tr><tr><td><code>mr</code></td><td>医用<code>resonanse</code>图像</td><td>图片</td><td>9736</td><td>9272</td></tr><tr><td><code>nci</code></td><td>结构化的化学数据库</td><td>数据库</td><td>32767</td><td>10168</td></tr><tr><td><code>ooffice</code></td><td><code>Open Office.org 1.01 DLL</code></td><td>可执行程序</td><td>6008</td><td>5640</td></tr><tr><td><code>osdb</code></td><td>基准测试用的<code>MySQL</code>格式示例数据库</td><td>数据库</td><td>9849</td><td>9824</td></tr><tr><td><code>reymont</code></td><td>瓦迪斯瓦夫·雷蒙特的书</td><td><code>PDF</code></td><td>6471</td><td>6312</td></tr><tr><td><code>samba</code></td><td><code>samba</code>源代码</td><td><code>src</code>源码</td><td>21100</td><td>11768</td></tr><tr><td><code>sao</code></td><td>星空数据</td><td>天文格式的<code>bin</code>文件</td><td>7081</td><td>7036</td></tr><tr><td><code>webster</code></td><td>辞海</td><td><code>HTML</code></td><td>40487</td><td>40144</td></tr><tr><td><code>xml</code></td><td><code>XML</code>文件</td><td><code>HTML</code></td><td>5220</td><td>2180</td></tr><tr><td><code>x-ray</code></td><td>透视医学图片</td><td>医院数据</td><td>8275</td><td>8260</td></tr></tbody></table><blockquote><p><code>VDO</code>技术支持本地存储和远程存储，可以作为本地文件系统、<code>iSCSI</code>或<code>Ceph</code>存储下的附加存储层使用。</p><p>红帽公司在<code>VDO介</code>绍页面中提到，在部署虚拟机或容器时，建议采<strong>用逻辑存储与物理存储为10∶1的比例</strong></p><p><strong>进行配置</strong>，即<code>1TB</code>物理存储对应<code>10TB</code>逻辑存储；而部署对象存储时 （例如使用<code>Ceph</code>）则<strong>采用逻辑存</strong></p><p><strong>储与物理存储为3∶1的比例进行配置</strong>，即使用<code>1TB</code>物理存储对应<code>3TB</code>逻辑存储</p></blockquote><blockquote><p>有两种特殊情况需要提前讲一下:</p><ol><li><p>其一，公司服务器上已有的<code>dm-crypt</code>之类的技术是可以与<code>VDO</code>技术兼容的，但记得要先对卷进行加</p><p>密再使用<code>VDO</code>。因为加密会使重复的数据变得有所不同，因此删重操作无法实现。要始终记得把加</p><p>密层放到<code>VDO</code>之下，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817164700045.png"></p></li><li><p><code>VDO</code>技术不可叠加使用，<code>1TB</code>的物理存储提升成<code>10TB</code>的逻辑存储没问题，但是再用<code>10TB</code>翻成</p><p><code>100TB</code>就不行了。左脚踩右脚，真的没法飞起来</p></li></ol></blockquote><blockquote><p>添加一块容量为<code>20GB</code>的新<code>SATA</code>硬盘进来，开机后就能看到这块名称为<code>/dev/sdc</code>的新硬盘了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /dev/sdc</span>brw-rw----. 1 root disk 8, 32 Jan 6 22:26 /dev/sdc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>RHEL/CentOS 8</code>系统中<strong>默认已经启用了<code>VDO</code>技术</strong>。<code>VDO</code>技术现在是红帽公司自己的技术，兼容性自然没</p><p>得说。如果您所用的系统没有安装<code>VDO</code>的话也不要着急，用<code>dnf</code>命令即可完成安装</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install kmod-kvdo vdo</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Last metadata expiration check: 0:01:56 ago on Wed 06 Jan 2021 10:37:19 PM CST.Package kmod-kvdo-6.2.0.293-50.el8.x86_64 is already installed.Package vdo-6.2.0.293-10.el8.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>首先，创建一个全新的<code>VDO</code>卷。</p><p>新添加进来的物理设备就是使用<code>vdo</code>命令来管理的，其中<code>name</code>参数代表新的设备卷的名称；</p><p><code>device</code>参数代表由哪块磁盘进行制作；</p><p><code>vdoLogicalSize</code>参数代表制作后的设备大小。</p><p>依据红帽公司推荐的原则，<code>20GB</code>硬盘将翻成<code>200GB</code>的逻辑存储</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vdo create --name=storage --device=/dev/sdc --vdoLogicalSize=200G</span>Creating VDO storageStarting VDO storageStarting compression on VDO storageVDO instance 0 volume is ready at /dev/mapper/storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 在创建成功后，使用<code>status</code>参数查看新建卷的概述信息：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vdo status --name=storage</span>VDO status:  Date: <span class="token string">'2021-01-06 22:51:33+08:00'</span>  Node: linuxprobe.comKernel module:  Loaded: <span class="token boolean">true</span>  Name: kvdo  Version information:    kvdo version: 6.2.0.293Configuration:  File: /etc/vdoconf.yml  Last modified: <span class="token string">'2021-01-06 22:49:33'</span>VDOs:  storage:    Acknowledgement threads: 1    Activate: enabled    Bio rotation interval: 64    Bio submission threads: 4    Block map cache size: 128M    Block map period: 16380    Block size: 4096    CPU-work threads: 2    Compression: enabled    Configured <span class="token function">write</span> policy: auto    Deduplication: enabled………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有上可见，在输出信息中包含了<code>VDO</code>卷创建的时间、主机名、版本、是否压缩（<code>Compression</code>）及是否</p><p>删重（<code>Deduplication</code>）等关键信息</p></blockquote><blockquote><p>接下来，对新建卷进行格式化操作并挂载使用</p><p>新建的<code>VDO</code>卷设备会被乖乖地存放在<code>/dev/mapper</code>目录下，并以设备名称命名，对它操作就行。另外，</p><p>挂载前可以用<code>udevadm settle</code>命令对设备进行<strong>一次刷新操作</strong>，避免刚才的配置没有生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.xfs /dev/mapper/storage </span>meta-data<span class="token operator">=</span>/dev/mapper/storage    isize<span class="token operator">=</span>512    agcount<span class="token operator">=</span>4, agsize<span class="token operator">=</span>13107200 blks         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>4096  attr<span class="token operator">=</span>2, projid32bit<span class="token operator">=</span>1         <span class="token operator">=</span>                       crc<span class="token operator">=</span>1        finobt<span class="token operator">=</span>1, sparse<span class="token operator">=</span>1, rmapbt<span class="token operator">=</span>0         <span class="token operator">=</span>                       reflink<span class="token operator">=</span>1data     <span class="token operator">=</span>                       bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>52428800, imaxpct<span class="token operator">=</span>25         <span class="token operator">=</span>                       sunit<span class="token operator">=</span>0      swidth<span class="token operator">=</span>0 blksnaming   <span class="token operator">=</span>version 2              bsize<span class="token operator">=</span>4096   ascii-ci<span class="token operator">=</span>0, ftype<span class="token operator">=</span>1log      <span class="token operator">=</span>internal log           bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>25600, version<span class="token operator">=</span>2         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>4096  sunit<span class="token operator">=</span>1 blks, lazy-count<span class="token operator">=</span>1realtime <span class="token operator">=</span>none                   extsz<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>0, rtextents<span class="token operator">=</span>0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># udevadm settle</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /storage</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount /dev/mapper/storage /storage</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 如果想查看设备的实际使用情况，使用<code>vdostats</code>命令即可。<code>human-readable</code>参数的作用是将存储容</p><p>量自动进位，以人们更易读的方式输出（比如，显示<code>20G</code>而不是<code>20971520K</code>）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vdostats --human-readable</span>Device                    Size      Used Available Use% Space saving%/dev/mapper/storage      20.0G      4.0G     16.0G  20%           99%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里显示的<code>Size</code>是实际物理存储的空间大小（即<code>20.0</code>GB是硬盘的大小），如果想看逻辑存储空间，可</p><p>以使用<code>df</code>命令进行查看</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  974M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0/dev/sdb1              2.0G   47M  2.0G   3% /newFS/dev/mapper/storage    200G  2.4G  198G   2% /storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>随便复制一个大文件过来，看看占用了多少容量，以及空间节省率（<code>Space saving</code>）是多少</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lh /media/cdrom/images/install.img </span>-r--r--r--. 1 root root 448M Apr 4 2019 /media/cdrom/images/install.img<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /media/cdrom/images/install.img /storage/</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lh /storage/install.img </span>-r--r--r--. 1 root root 448M Jan  6 23:06 /storage/install.img<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vdostats --human-readable</span>Device                    Size      Used Available Use% Space saving%/dev/mapper/storage      20.0G      4.4G     15.6G  22%           18%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>效果不明显，再复制一份相同的文件过来，看看这次占用了多少空间</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp /media/cdrom/images/install.img /storage/rhel.img</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vdostats --human-readable</span>Device                    Size      Used Available Use% Space saving%/dev/mapper/storage      20.0G      4.5G     15.5G  22%           55%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最后，将设备设置成永久挂载生效，一直提供服务</p><p><code>VDO</code>设备卷在创建后会一直存在，但需要手动编辑<code>/etc/fstab</code>文件后才能在下一次重启后自动挂载</p><p>生效，为我们所用。对于这种逻辑存储设备，其实不太建议使用<code>/dev/mapper/storage</code>作为设备名进</p><p>行挂载。不如试试前面所说的<code>UUID</code>吧</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># blkid /dev/mapper/storage </span>/dev/mapper/storage: UUID<span class="token operator">=</span><span class="token string">"cd4e9f12-e16a-415c-ae76-8de069076713"</span> TYPE<span class="token operator">=</span><span class="token string">"xfs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>打开<code>/etc/fstab</code>文件，把对应的字段填写完整。建议再加上<code>_netdev</code>参数，<strong>表示等系统及网络都启动</strong></p><p><strong>后再挂载<code>VDO</code>设备卷</strong>，以保证万无一失</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                        /             xfs        defaults           1 1UUID<span class="token operator">=</span>812b1f7c-8b5b-43da-8c06-b9999e0fe48b    /boot         xfs        defaults,uquota    1 2/dev/mapper/rhel-swap                        swap          swap       defaults           0 0/dev/cdrom                                   /media/cdrom  iso9660    defaults           0 0 /dev/sdb1                                    /newFS        xfs        defaults           0 0 /dev/sdb2                                    swap          swap       defaults           0 0 UUID<span class="token operator">=</span>cd4e9f12-e16a-415c-ae76-8de069076713    /storage      xfs        defaults,_netdev   0 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-9、软硬方式链接"><a href="#7-9、软硬方式链接" class="headerlink" title="7.9、软硬方式链接"></a>7.9、软硬方式链接</h3><blockquote><p><strong>软链接（<code>soft link</code>）：</strong>也叫符号链接（<code>symbolic link</code>），仅仅包含所链接文件的名称和路径，很像</p><p>一个记录地址的标签。当原始文件被删除或移动后，新的链接文件也会随之失效，不能被访问。可以针</p><p>对文件、目录设置软链接，<strong>跨文件系统进行链接也不是问题</strong>。从这一点来看，它与<code>Windows</code>系统的“快捷</p><p>方式”具有一样的性质。用户访问软链接的效果如图所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817170750832.png"></p><blockquote><p><strong>硬链接（<code>hard link</code>）：</strong>可以将它理解为一个“指向原始文件<code>block</code>的指针”，系统会创建出一个与原来</p><p>一模一样的<code>inode</code>信息块。所以，硬链接文件与原始文件其实是一模一样的，只是名字不同。每添加一</p><p>个硬链接，该文件的<code>inode</code>个数就会增加1；而且只有当该文件的<code>inode</code>个数为0时，才算彻底将它删</p><p>除。换言之，由于硬链接实际上是指向原文件<code>block</code>的指针，因此即便原始文件被删除，依然可以通过</p><p>硬链接文件来访问。需要注意的是，由于技术的局限性，<strong>不能跨分区对目录文件进行硬链接</strong>。用户访问</p><p>硬链接的效果如图所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220817170948795.png"></p><h3 id="7-9-1、创建连接"><a href="#7-9-1、创建连接" class="headerlink" title="7.9.1、创建连接"></a>7.9.1、创建连接</h3><blockquote><p><code>ln</code>命令用于创建文件的软硬链接，英文全称为“link”，语法格式为“<code>ln</code> [参数]原始文件名 链接文件</p><p>名”。</p></blockquote><blockquote><p> <code>ln</code>命令中可用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-s</code></td><td>创建“符号链接”（如果不带-s参数，则默认创建硬链接）</td></tr><tr><td><code>-f</code></td><td>强制创建文件或目录的链接</td></tr><tr><td><code>-i</code></td><td>覆盖前先询问</td></tr><tr><td><code>-v</code></td><td>显示创建链接的过程</td></tr></tbody></table><blockquote><p>为了更好地理解软链接、硬链接的不同性质，我们先创建出一个文件，为其创建一个软链接</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Welcome to linuxprobe.com" > old.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s old.txt new.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat old.txt </span>Welcome to linuxprobe.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat new.txt </span>Welcome to linuxprobe.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l old.txt </span>-rw-r--r-- 1 root root 26 Jan 11 00:08 old.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原始文件名为<code>old</code>，新的软链接文件名为<code>new</code>。删掉原始文件后，软链接文件立刻就无法读取了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f old.txt </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat new.txt </span>cat: readit.txt: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>接下来针对原始文件old创建一个硬链接，即相当于针对原始文件的硬盘存储位置创建了一个指针。这样</p><p>一来，新创建的这个硬链接就不再依赖于原始文件的名称等信息，也不会因为原始文件的删除而导致无</p><p>法读取了。同时可以看到创建硬链接后，<strong>原始文件的硬盘链接数量增加到了2</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Welcome to linuxprobe.com" > old.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln old.txt new.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat old.txt </span>Welcome to linuxprobe.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat new.txt </span>Welcome to linuxprobe.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l old.txt </span>-rw-r--r-- 2 root root 26 Jan 11 00:13 old.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除<code>old</code>文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f old.txt </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat new.txt </span>Welcome to linuxprobe.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="八、使用RAID与LVM磁盘阵列技术"><a href="#八、使用RAID与LVM磁盘阵列技术" class="headerlink" title="八、使用RAID与LVM磁盘阵列技术"></a>八、使用<code>RAID</code>与<code>LVM</code>磁盘阵列技术</h2><hr><h3 id="8-1、-RAID磁盘冗余阵列"><a href="#8-1、-RAID磁盘冗余阵列" class="headerlink" title="8.1、 RAID磁盘冗余阵列"></a>8.1、 <code>RAID</code>磁盘冗余阵列</h3><blockquote><p><code>RAID</code>技术通过把多个硬盘设备组合成一个容量更大、安全性更好的磁盘阵列，并把数据切割成多个区段</p><p>后分别存放在各个不同的物理硬盘设备上，然后利用分散读写技术来提升磁盘阵列整体的性能，同时把</p><p>多个重要数据的副本同步到不同的物理硬盘设备上，从而起到了非常好的数据冗余备份效果</p></blockquote><blockquote><p>RAID 0、1、5、10方案技术对比</p></blockquote><table><thead><tr><th>RAID级别</th><th>最少硬盘</th><th>可用容量</th><th>读写性能</th><th>安全性</th><th>特点</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>n</td><td>n</td><td>低</td><td>追求最大容量和速度，任何一块盘损坏，数据全部异常。</td></tr><tr><td>1</td><td>2</td><td>n/2</td><td>n</td><td>高</td><td>追求最大安全性，只要阵列组中有一块硬盘可用，数据不受影响。</td></tr><tr><td>5</td><td>3</td><td>n-1</td><td>n-1</td><td>中</td><td>在控制成本的前提下，追求硬盘的最大容量、速度及安全性，允许有一块硬盘异常，数据不受影响。</td></tr><tr><td>10</td><td>4</td><td>n/2</td><td>n/2</td><td>高</td><td>综合<code>RAID1</code>和<code>RAID0</code>的优点，追求硬盘的速度和安全性，允许有一半硬盘异常（不可同组），数据不受影响</td></tr></tbody></table><p><strong>1、<code>RAID0</code></strong></p><blockquote><p><code>RAID 0</code>技术把多块物理硬盘设备（<strong>至少两块</strong>）通过硬件或软件的方式串联在一起，组成一个大的卷组，</p><p>并<strong>将数据依次写入各个物理硬盘中</strong>。这样一来，在最理想的状态下，硬盘设备的读写性能会提升数倍，</p><p>但是<strong>若任意一块硬盘发生故障，将导致整个系统的数据都受到破坏</strong>。通俗来说，<code>RAID 0</code>技术能够有效地</p><p>提升硬盘数据的吞吐速度，但是不具备数据备份和错误修复能力。如图所示，数据被分别写入到不同的</p><p>硬盘设备中，即硬盘A和硬盘B设备会分别保存数据资料，最终实现提升读取、写入速度的效果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818091807945.png"></p><p><strong>2、<code>RAID1</code></strong></p><blockquote><p><code>RAID 1</code>技术示意图中可以看到，它是把两块以上的硬盘设备进行绑定，在写入数据时，是将数据同时写</p><p>入到多块硬盘设备上（可以将其视为数据的镜像或备份）。当其中某一块硬盘发生故障后，一般会立即</p><p>自动以热交换的方式来恢复数据的正常使用</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818092039062.png"></p><p><strong>3、<code>RAID5</code></strong></p><blockquote><p><code>RAID5</code>技术是把硬盘设备的数据奇偶校验信息保存到其他硬盘设备中。<code>RAID 5</code>磁盘阵列中数据的奇偶校</p><p>验信息并不是单独保存到某一块硬盘设备中，而是存储到除自身以外的其他每一块硬盘设备上。这样的</p><p>好处是，<strong>其中任何一设备损坏后不至于出现致命缺陷</strong>。图中<code>Parity</code>部分存放的就是数据的奇偶校验信</p><p>息。换句话说，就是<code>RAID 5</code>技术实际上没有备份硬盘中的真实数据信息，而是当硬盘设备出现问题后通</p><p>过奇偶校验信息来尝试重建损坏的数据。<code>RAID</code>这样的技术特性“妥协”地兼顾了硬盘设备的读写速度、数</p><p>据安全性与存储成本问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818092443444.png"></p><blockquote><p><code>RAID 5</code>最少由3块硬盘组成，使用的是硬盘切割（<code>Disk Striping</code>）技术。相较于<code>RAID 1</code>级别，好处</p><p>就在于保存的是奇偶校验信息而不是一模一样的文件内容，所以当重复写入某个文件时，<code>RAID 5</code>级别的</p><p>磁盘阵列组只需要对应一个奇偶校验信息就可以，效率更高，存储成本也会随之降低</p></blockquote><p><strong>3、<code>RAID 10</code></strong></p><blockquote><p><strong><code>RAID 10</code>技术是<code>AID 1</code>+<code>RAID 0</code>技术的一个“组合体”</strong>。如图所示，<code>RAID 10</code>技术需要至少4块硬盘来组</p><p>建，其中先分别两两制作成<code>RAID 1</code>磁盘阵列，以保证数据的安全性；然后再对两个<code>RAID 1</code>磁盘阵列实</p><p>施<code>RAID 0</code>技术，进一步提高硬盘设备的读写速度。这样从理论上来讲，只要坏的不是同一阵列中的所有</p><p>硬盘，那么最多可以损坏50%的硬盘设备而不丢失数据。由于<code>RAID 10</code>技术继承了<code>RAID 0</code>的高读写速度</p><p>和RAID 1的数据安全性，在不考虑成本的情况下<code>RAID 10</code>的性能也超过了<code>RAID 5</code>，因此当前成为广泛</p><p>使用的一种存储技术</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818092809490.png"></p><h4 id="8-1-1、部署磁盘阵列"><a href="#8-1-1、部署磁盘阵列" class="headerlink" title="8.1.1、部署磁盘阵列"></a>8.1.1、部署磁盘阵列</h4><blockquote><p>首先，需要在虚拟机中添加<code>4</code>块硬盘设备来制作一个<code>RAID 10</code>磁盘阵列，如图所示。这里不再详述添加</p><p>硬盘的步骤，大家自己操作就行。记得硬盘要用<code>SCSI</code>或<code>SATA</code>接口的类型，大小默认<code>20GB</code>就可以。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818093016607.png"></p><blockquote><p><code>mdadm</code>用于<strong>创建、调整、监控和管理<code>RAID</code>设备</strong>，英文全称为“<code>multiple devices admin</code>”，语法格式</p><p>为“<code>mdadm</code>参数 硬盘名称”</p></blockquote><blockquote><p> <code>mdadm</code>命令的常用参数和作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-a</code></td><td>检测设备名称</td></tr><tr><td><code>-n</code></td><td>指定设备数量</td></tr><tr><td><code>-l</code></td><td>指定RAID级别</td></tr><tr><td><code>-C</code></td><td>创建</td></tr><tr><td><code>-v</code></td><td>显示过程</td></tr><tr><td><code>-f</code></td><td>模拟设备损坏</td></tr><tr><td><code>-r</code></td><td>移除设备</td></tr><tr><td><code>-Q</code></td><td>查看摘要信息</td></tr><tr><td><code>-D</code></td><td>查看详细信息</td></tr><tr><td><code>-S</code></td><td>停止RAID磁盘阵列</td></tr></tbody></table><blockquote><p><code>-C</code>参数代表创建一个<code>RAID</code>阵列卡；<code>-v</code>参数显示创建的过程，同时在后面追加一个设备名</p><p>称<code>/dev/md0</code>，这样<code>/dev/md0</code>就是创建后的<code>RAID</code>磁盘阵列的名称；<code>-n 4</code>参数代表使用4块硬盘来部署</p><p>这<code>个RAID</code>磁盘阵列；而<code>-l 10</code>参数则代表<code>RAID 10</code>方案；最后再加上4块硬盘设备的名称就搞定了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -Cv /dev/md0 -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde</span>mdadm: layout defaults to n2mdadm: layout defaults to n2mdadm: chunk size defaults to 512Kmdadm: size <span class="token keyword">set</span> to 20954112Kmdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md0 started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化过程大约需要1分钟左右，期间可以用<code>-D</code>参数进行查看。也可以用<code>-Q</code>参数查看简要信息：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -Q /dev/md0</span>/dev/md0: 39.97GiB raid10 4 devices, 0 spares. Use mdadm --detail <span class="token keyword">for</span> <span class="token function">more</span> detail.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> 等两三分钟后，把制作好的<code>RAID</code>磁盘阵列格式化为<code>Ext4</code>格式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/md0</span>mke2fs 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Creating filesystem with 10477056 4k blocks and 2621440 inodesFilesystem UUID: d1c68318-a919-4211-b4dc-c4437bcfe9daSuperblock backups stored on blocks:     32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,     4096000, 7962624Allocating group tables: <span class="token keyword">done</span>                            Writing inode tables: <span class="token keyword">done</span>                            Creating journal <span class="token punctuation">(</span>65536 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>随后，创建挂载点，将硬盘设备进行挂载操作</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /RAID</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount /dev/md0 /RAID</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  975M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0/dev/md0                40G   49M   38G   1% /RAID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>再来查看<code>/dev/md0</code>磁盘阵列设备的详细信息，确认<code>RAID</code>级别（<code>Raid Level</code>）、</p><p>阵列大小（<code>Array Size</code>）和总硬盘数（<code>Total Devices</code>）都是否正确</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Wed Jan 13 08:24:58 2021        Raid Level <span class="token keyword">:</span> raid10        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 4     Total Devices <span class="token keyword">:</span> 4       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Thu Jan 14 04:49:57 2021             State <span class="token keyword">:</span> clean     Active Devices <span class="token keyword">:</span> 4   Working Devices <span class="token keyword">:</span> 4    Failed Devices <span class="token keyword">:</span> 0     Spare Devices <span class="token keyword">:</span> 0            Layout <span class="token keyword">:</span> near<span class="token operator">=</span>2        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync              Name <span class="token keyword">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to host linuxprobe.com<span class="token punctuation">)</span>              UUID <span class="token keyword">:</span> 289f501b:3f5f70f9:79189d77:f51ca11a            Events <span class="token keyword">:</span> 17    Number   Major   Minor   RaidDevice State       0       8       16        0      active <span class="token function">sync</span> set-A   /dev/sdb       1       8       32        1      active <span class="token function">sync</span> set-B   /dev/sdc       2       8       48        2      active <span class="token function">sync</span> set-A   /dev/sdd       3       8       64        3      active <span class="token function">sync</span> set-B   /dev/sde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将信息添加到<code>/etc/fstab</code>文件中，这样可以确保在每次重启后<code>RAID</code>磁盘阵列都是有效的</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "/dev/md0 /RAID ext4 defaults 0 0" >> /etc/fstab</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                       /                 xfs         defaults      0 0UUID<span class="token operator">=</span>2db66eb4-d9c1-4522-8fab-ac074cd3ea0b   /boot             xfs         defaults      0 0/dev/mapper/rhel-swap                       swap              swap        defaults      0 0/dev/cdrom                                  /media/cdrom      iso9660     defaults      0 0 /dev/md0                                    /RAID             ext4        defaults      0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-2、损坏磁盘阵列及修复"><a href="#8-1-2、损坏磁盘阵列及修复" class="headerlink" title="8.1.2、损坏磁盘阵列及修复"></a>8.1.2、损坏磁盘阵列及修复</h4><blockquote><p>在确认有一块物理硬盘设备出现损坏而不能再继续正常使用后，应该使用<code>mdadm</code>命令将其移除，然后查</p><p>看<code>RAID</code>磁盘阵列的状态，可以发现状态已经改变</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -f /dev/sdb</span>mdadm: <span class="token keyword">set</span> /dev/sdb faulty <span class="token keyword">in</span> /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Thu Jan 14 05:12:20 2021        Raid Level <span class="token keyword">:</span> raid10        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 4     Total Devices <span class="token keyword">:</span> 4       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Thu Jan 14 05:33:06 2021             State <span class="token keyword">:</span> clean, degraded     Active Devices <span class="token keyword">:</span> 3   Working Devices <span class="token keyword">:</span> 3    Failed Devices <span class="token keyword">:</span> 1     Spare Devices <span class="token keyword">:</span> 0            Layout <span class="token keyword">:</span> near<span class="token operator">=</span>2        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync              Name <span class="token keyword">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to host localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token keyword">:</span> 81ee0668:7627c733:0b170c41:cd12f376            Events <span class="token keyword">:</span> 19    Number   Major   Minor   RaidDevice State       -       0        0        0      removed       1       8       32        1      active <span class="token function">sync</span> set-B   /dev/sdc       2       8       48        2      active <span class="token function">sync</span> set-A   /dev/sdd       3       8       64        3      active <span class="token function">sync</span> set-B   /dev/sde       0       8       16        -      faulty   /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>刚刚使用的<code>-f</code>参数是让硬盘模拟损坏的效果。为了能够彻底地将故障盘移除，还要再执行一步操作</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -r /dev/sdb</span>mdadm: hot removed /dev/sdb from /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在<code>RAID 10</code>级别的磁盘阵列中，当<code>RAID 1</code>磁盘阵列中存在一个故障盘时并不影响<code>RAID 10</code>磁盘阵列的</p><p>使用。当购买了新的硬盘设备后再使用<code>mdadm</code>命令予以替换即可，在此期间可以在<code>/RAID</code>目录中正常地</p><p>创建或删除文件。由于我们是在虚拟机中模拟硬盘，所以先重启系统，然后再把新的硬盘添加到<code>RAID</code>磁</p><p>盘阵列中</p></blockquote><blockquote><p>更换硬盘后再次使用-a参数进行添加操作，系统默认会自动开始数据的同步工作。使用<code>-D</code>参数即可看</p><p>到整个过程和进度（用百分比表示）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -a /dev/sdb</span>mdadm: added /dev/sdb<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Thu Jan 14 05:12:20 2021        Raid Level <span class="token keyword">:</span> raid10        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 4     Total Devices <span class="token keyword">:</span> 4       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Thu Jan 14 05:37:32 2021             State <span class="token keyword">:</span> clean, degraded, recovering     Active Devices <span class="token keyword">:</span> 3   Working Devices <span class="token keyword">:</span> 4    Failed Devices <span class="token keyword">:</span> 0     Spare Devices <span class="token keyword">:</span> 1            Layout <span class="token keyword">:</span> near<span class="token operator">=</span>2        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync    Rebuild Status <span class="token keyword">:</span> 77% complete              Name <span class="token keyword">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to host localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token keyword">:</span> 81ee0668:7627c733:0b170c41:cd12f376            Events <span class="token keyword">:</span> 34    Number   Major   Minor   RaidDevice State       4       8       16        0      spare rebuilding    /dev/sdb       1       8       32        1      active <span class="token function">sync</span> set-B   /dev/sdc       2       8       48        2      active <span class="token function">sync</span> set-A   /dev/sdd       3       8       64        3      active <span class="token function">sync</span> set-B   /dev/sde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-3、磁盘阵列-备份盘"><a href="#8-1-3、磁盘阵列-备份盘" class="headerlink" title="8.1.3、磁盘阵列+备份盘"></a>8.1.3、磁盘阵列+备份盘</h4><blockquote><p><code>RAID 10</code>磁盘阵列中最多允许50%的硬盘设备发生故障，但是存在这样一种极端情况，即同一<code>RAID 1</code>磁</p><p>盘阵列中的硬盘设备若全部损坏，也会导致数据丢失。换句话说，在<code>RAID 10</code>磁盘阵列中，如果<code>RAID 1</code></p><p>中的某一块硬盘出现了故障，而我们正在前往修复的路上，恰巧该<code>RAID 1</code>磁盘阵列中的另一块硬盘设备</p><p>也出现故障，那么数据就被彻底丢失了</p></blockquote><blockquote><p>其实，完全可以使用<code>RAID</code>备份盘技术来预防这类事故。该技术的核心理念就是准备一块足够大的硬盘，</p><p>这块硬盘平时处于闲置状态，一旦<code>RAID</code>磁盘阵列中有硬盘出现故障后则会马上自动顶替上去</p></blockquote><blockquote><p>将虚拟机还原到初始状态。部署<code>RAID 5</code>，部署·RAID 5·磁盘阵列时，至少需要用到3块硬盘，还需要再加</p><p>一块备份硬盘（也叫热备盘），所以总计需要在虚拟机中模拟4块硬盘设备，如图所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818095324120.png"></p><blockquote><p>现在创建一个<code>RAID 5</code>磁盘阵列+备份盘。在下面的命令中，参数<code>-n 3</code>代表创建这个<code>RAID 5</code>磁盘阵列</p><p>所需的硬盘数，参数<code>-l 5</code>代表<code>RAID</code>的级别，而参数<code>-x 1</code>则代表有一块备份盘。当查看<code>/dev/md0</code></p><p>（即<code>RAID 5</code>磁盘阵列的名称）磁盘阵列的时候，就能看到有一块备份盘在等待中了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde</span>mdadm: layout defaults to left-symmetricmdadm: layout defaults to left-symmetricmdadm: chunk size defaults to 512Kmdadm: size <span class="token keyword">set</span> to 20954112Kmdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md0 started.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Thu Jan 14 06:12:32 2021        Raid Level <span class="token keyword">:</span> raid5        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 3     Total Devices <span class="token keyword">:</span> 4       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Thu Jan 14 06:14:16 2021             State <span class="token keyword">:</span> clean     Active Devices <span class="token keyword">:</span> 3   Working Devices <span class="token keyword">:</span> 4    Failed Devices <span class="token keyword">:</span> 0     Spare Devices <span class="token keyword">:</span> 1            Layout <span class="token keyword">:</span> left-symmetric        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync              Name <span class="token keyword">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to host localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token keyword">:</span> cf0c34b6:3b08edfb:85dfa14f:e2bffc1e            Events <span class="token keyword">:</span> 18    Number   Major   Minor   RaidDevice State       0       8       16        0      active <span class="token function">sync</span>   /dev/sdb       1       8       32        1      active <span class="token function">sync</span>   /dev/sdc       4       8       48        2      active <span class="token function">sync</span>   /dev/sdd       3       8       64        -      spare   /dev/sde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>现在将部署好的<code>RAID 5</code>磁盘阵列格式化为<code>Ext4</code>文件格式，然后挂载到目录上，之后就能够使用了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/md0</span>mke2fs 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Creating filesystem with 10477056 4k blocks and 2621440 inodesFilesystem UUID: ff016386-1126-4799-8a5b-d716242276ecSuperblock backups stored on blocks:     32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,     4096000, 7962624Allocating group tables: <span class="token keyword">done</span>                            Writing inode tables: <span class="token keyword">done</span>                            Creating journal <span class="token punctuation">(</span>65536 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span>   <span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /RAID</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "/dev/md0 /RAID ext4 defaults 0 0" >> /etc/fstab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由3块硬盘组成的<code>RAID 5</code>磁盘阵列，其对应的可用空间是<code>n-1</code>，也就是<code>40GB</code>。<strong>热备盘的空间不计算进</strong></p><p><strong>来，平时完全就是在“睡觉”</strong>，只有在意外出现时才会开始工作</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  974M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0/dev/md0                40G   49M   38G   1% /RAID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们再次把硬盘设备<code>/dev/sdb</code>移出磁盘阵列，然后迅速查看<code>/dev/md0</code>磁盘阵列的状态，就会发现备份</p><p>盘已经被自动顶替上去并开始了数据同步。<code>RAID</code>中的这种备份盘技术非常实用，可以在保证<code>RAID</code>磁盘</p><p>阵列数据安全性的基础上进一步提高数据可靠性</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -f /dev/sdb</span>mdadm: <span class="token keyword">set</span> /dev/sdb faulty <span class="token keyword">in</span> /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Thu Jan 14 06:12:32 2021        Raid Level <span class="token keyword">:</span> raid5        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 3     Total Devices <span class="token keyword">:</span> 4       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Thu Jan 14 06:24:38 2021             State <span class="token keyword">:</span> clean     Active Devices <span class="token keyword">:</span> 3   Working Devices <span class="token keyword">:</span> 3    Failed Devices <span class="token keyword">:</span> 1     Spare Devices <span class="token keyword">:</span> 0            Layout <span class="token keyword">:</span> left-symmetric        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync              Name <span class="token keyword">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to host localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token keyword">:</span> cf0c34b6:3b08edfb:85dfa14f:e2bffc1e            Events <span class="token keyword">:</span> 37    Number   Major   Minor   RaidDevice State       3       8       64        0      active <span class="token function">sync</span>   /dev/sde       1       8       32        1      active <span class="token function">sync</span>   /dev/sdc       4       8       48        2      active <span class="token function">sync</span>   /dev/sdd       0       8       16        -      faulty   /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果后面想再添加一块热备盘进来，使用<code>-a</code>参数就可以了</p></blockquote><h4 id="8-1-4、删除磁盘阵列"><a href="#8-1-4、删除磁盘阵列" class="headerlink" title="8.1.4、删除磁盘阵列"></a>8.1.4、删除磁盘阵列</h4><blockquote><p>首先，需要<strong>将所有的磁盘都设置成停用状态</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /RAID</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -f /dev/sdc</span>mdadm: <span class="token keyword">set</span> /dev/sdc faulty <span class="token keyword">in</span> /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -f /dev/sdd</span>mdadm: <span class="token keyword">set</span> /dev/sdd faulty <span class="token keyword">in</span> /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -f /dev/sde</span>mdadm: <span class="token keyword">set</span> /dev/sde faulty <span class="token keyword">in</span> /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后再逐一移除出去</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -r /dev/sdb</span>mdadm: hot removed /dev/sdb from /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -r /dev/sdc</span>mdadm: hot removed /dev/sdc from /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -r /dev/sdd</span>mdadm: hot removed /dev/sdd from /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm /dev/md0 -r /dev/sde</span>mdadm: hot removed /dev/sde from /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将所有的硬盘都移除后，再来查看磁盘阵列组的状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm -D /dev/md0</span>/dev/md0:           Version <span class="token keyword">:</span> 1.2     Creation Time <span class="token keyword">:</span> Fri Jan 15 08:53:41 2021        Raid Level <span class="token keyword">:</span> raid5        Array Size <span class="token keyword">:</span> 41908224 <span class="token punctuation">(</span>39.97 GiB 42.91 GB<span class="token punctuation">)</span>     Used Dev Size <span class="token keyword">:</span> 20954112 <span class="token punctuation">(</span>19.98 GiB 21.46 GB<span class="token punctuation">)</span>      Raid Devices <span class="token keyword">:</span> 3     Total Devices <span class="token keyword">:</span> 0       Persistence <span class="token keyword">:</span> Superblock is persistent       Update Time <span class="token keyword">:</span> Fri Jan 15 09:00:57 2021             State <span class="token keyword">:</span> clean, FAILED     Active Devices <span class="token keyword">:</span> 0    Failed Devices <span class="token keyword">:</span> 0     Spare Devices <span class="token keyword">:</span> 0            Layout <span class="token keyword">:</span> left-symmetric        Chunk Size <span class="token keyword">:</span> 512KConsistency Policy <span class="token keyword">:</span> resync    Number   Major   Minor   RaidDevice State       -       0        0        0      removed       -       0        0        1      removed       -       0        0        2      removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面继续停用整个<code>RAID</code>磁盘阵列，咱们的工作就彻底完成了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mdadm --stop /dev/md0</span>mdadm: stopped /dev/md0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /dev/md0</span>ls: cannot access <span class="token string">'/dev/md0'</span><span class="token keyword">:</span> No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2、LVM逻辑卷管理器"><a href="#8-2、LVM逻辑卷管理器" class="headerlink" title="8.2、LVM逻辑卷管理器"></a>8.2、<code>LVM</code>逻辑卷管理器</h3><blockquote><p><code>LVM</code>是<code>Linux</code>系统用于对硬盘分区进行管理的一种机制，理论性较强，其创建初衷是为了解决硬盘设备</p><p>在创建分区后不易修改分区大小的缺陷。尽管对传统的硬盘分区进行强制扩容或缩容从理论上来讲是可</p><p>行的，但是却可能造成数据的丢失。而<code>LVM</code>技术是在硬盘分区和文件系统之间添加了一个逻辑层，它提</p><p>供了一个抽象的卷组，可以把多块硬盘进行卷组合并。这样一来，用户不必关心物理硬盘设备的底层架</p><p>构和布局，就可以实现对硬盘分区的动态调整。<code>LVM</code>的技术架构如图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818105359123.png"></p><blockquote><p>我们来看一个吃货的例子。比如小明家里想吃馒头，但是面粉不够了，于是妈妈从隔壁老王家、老李</p><p>家、老张家分别借来一些面粉，准备蒸馒头吃。首先需要把这些面粉（物理卷[<code>Physical Volume</code>，</p><p><code>PV</code>]）揉成一个大面团（卷组[<code>Volume Group</code>]，<code>VG</code>），然后再把这个大面团分割成一个个小馒头（逻辑</p><p>卷[<code>Logical Volume</code>，<code>LV]</code>），而且每个小馒头的重量必须是每勺面粉（基本单元[<code>Physical </code></p><p><code>Extent</code>，<code>PE]</code>）的倍数</p></blockquote><blockquote><p>物理卷处于<code>LVM</code>中的最底层，可以将其理解为物理硬盘、硬盘分区或者<code>RAID</code>磁盘阵列。卷组建立在物理</p><p>卷之上，一个卷组能够包含多个物理卷，而且在卷组创建之后也可以继续向其中添加新的物理卷。逻辑</p><p>卷是用卷组中空闲的资源建立的，并且逻辑卷在建立后可以动态地扩展或缩小空间。这就是<code>LVM</code>的核心</p><p>理念</p></blockquote><h4 id="8-2-1、部署逻辑卷"><a href="#8-2-1、部署逻辑卷" class="headerlink" title="8.2.1、部署逻辑卷"></a>8.2.1、部署逻辑卷</h4><blockquote><p>常用的<code>LVM</code>部署命令</p></blockquote><table><thead><tr><th>功能/命令</th><th>物理卷管理</th><th>卷组管理</th><th>逻辑卷管理</th></tr></thead><tbody><tr><td>扫描</td><td><code>pvscan</code></td><td><code>vgscan</code></td><td><code>lvscan</code></td></tr><tr><td>建立</td><td><code>pvcreate</code></td><td><code>vgcreate</code></td><td><code>lvcreate</code></td></tr><tr><td>显示</td><td><code>pvdisplay</code></td><td><code>vgdisplay</code></td><td><code>lvdisplay</code></td></tr><tr><td>删除</td><td><code>pvremove</code></td><td><code>vgremove</code></td><td><code>lvremove</code></td></tr><tr><td>扩展</td><td></td><td><code>vgextend</code></td><td><code>lvextend</code></td></tr><tr><td>缩小</td><td></td><td><code>vgreduce</code></td><td><code>lvreduce</code></td></tr></tbody></table><blockquote><p>将虚拟机还<strong>原到初始状态</strong>，并重新添加两块新硬盘设备，如图所示。然后开机。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818110003544.png"></p><blockquote><p>在虚拟机中添加两块新硬盘设备的目的，<strong>是为了更好地演示<code>LVM</code>理念中用户无须关心底层物理硬盘</strong></p><p><strong>设备的特性</strong>。我们先对这两块新硬盘进行创建物理卷的操作，可以将该操作简单理解成让硬盘设备支持</p><p><code>LVM</code>技术，或者理解成是把硬盘设备加入到<code>LVM</code>技术可用的硬件资源池中，然后对这两块硬盘进行卷组</p><p>合并，卷组的名称允许由用户自定义。接下来，根据需求把合并后的卷组切割出一个约为<code>150MB</code>的逻辑</p><p>卷设备，最后把这个逻辑卷设备格式化成<code>Ext4</code>文件系统后挂载使用。下文将对每一个步骤做一些简单的</p><p>描述</p></blockquote><blockquote><p><strong>第1步</strong>：让新添加的两块硬盘设备支持<code>LVM</code>技术。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvcreate /dev/sdb /dev/sdc</span>  Physical volume <span class="token string">"/dev/sdb"</span> successfully created.  Physical volume <span class="token string">"/dev/sdc"</span> successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：把两块硬盘设备加入到<code>storage</code>卷组中，然后查看卷组的状态。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgcreate storage /dev/sdb /dev/sdc</span> Volume group <span class="token string">"storage"</span> successfully created<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span>  --- Volume group ---  VG Name               storage  System ID               Format                lvm2  Metadata Areas        2  Metadata Sequence No  1  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                0  Open LV               0  Max PV                0  Cur PV                2  Act PV                2  VG Size               39.99 GiB  PE Size               4.00 MiB  Total PE              10238  Alloc PE / Size       0 / 0     Free  PE / Size       10238 / 39.99 GiB  VG UUID               HPwsm4-lOvI-8O0Q-TG54-BkyI-ONYE-owlGLd………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：再切割出一个约为<code>150MB</code>的逻辑卷设备。</p><p>这里需要<strong>注意切割单位的问题</strong>。在对逻辑卷进行切割时有两种计量单位。第一种是以<strong>容量为单位</strong>，所使</p><p>用的参数为<code>-L</code>。例如，使用<code>-L 150M</code>生成一个大小为<code>150MB</code>的逻辑卷。另外一种是以<strong>基本单元的个数为</strong></p><p><strong>单位</strong>，所使用的参数为<code>-l</code>。每个基本单元的大小默认为<code>4MB</code>。例如，使用<code>-l 37</code>可以生成一个大小为</p><p><code>37×4MB=148MB</code>的逻辑卷</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvcreate -n vo -l 37 storage</span> Logical volume <span class="token string">"vo"</span> created.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvdisplay </span>  --- Logical volume ---  LV Path                /dev/storage/vo  LV Name                vo  VG Name                storage  LV UUID                AsDGJj-G6Uo-HG4q-auD6-lmyn-aLY0-o36HEj  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost.localdomain, 2021-01-15 00:47:35 +0800  LV Status              available  <span class="token comment" spellcheck="true"># open                 0</span>  LV Size                148.00 MiB  Current LE             37  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:2………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：把生成好的逻辑卷进行格式化，然后挂载使用。</p><p><code>Linux</code>系统会把<code>LVM</code>中的逻辑卷设备存放在<code>/dev</code>设备目录中（实际上就是个快捷方式），同时会以卷组</p><p>的名称来建立一个目录，其中保存了逻辑卷的设备映射文件（即<code>/dev/卷组名称/逻辑卷名称</code>）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/storage/vo </span>mke2fs 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Creating filesystem with 151552 1k blocks and 38000 inodesFilesystem UUID: 429cbc28-4463-4a1b-b601-02a7cf81a1b2Superblock backups stored on blocks:     8193, 24577, 40961, 57345, 73729Allocating group tables: <span class="token keyword">done</span>                            Writing inode tables: <span class="token keyword">done</span>                            Creating journal <span class="token punctuation">(</span>4096 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span> <span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount /dev/storage/vo /linuxprobe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对了，如果使用了逻辑卷管理器，则不建议用<code>XFS</code>文件系统，因为<code>XFS</code>文件系统自身就可以使用</p><p><code>xfs_growfs</code>命令进行磁盘扩容。这虽然不比<code>LVM</code>灵活，但起码也够用。在实测阶段我们发现，在有一些</p><p>服务器上，<code>XFS</code>与<code>LVM</code>的兼容性并不好</p></blockquote><blockquote><p><strong>第5步</strong>：查看挂载状态，并写入配置文件，使其永久生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sr0                6.7G  6.7G     0 100% /media/cdrom/dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0/dev/mapper/storage-vo  140M  1.6M  128M   2% /linuxprobe<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "/dev/storage/vo /linuxprobe ext4 defaults 0 0" >> /etc/fstab</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                       /                       xfs      defaults        0 0UUID<span class="token operator">=</span>2db66eb4-d9c1-4522-8fab-ac074cd3ea0b   /boot                   xfs      defaults        0 0/dev/mapper/rhel-swap                       swap                    swap     defaults        0 0/dev/cdrom                                  /media/cdrom            iso9660  defaults        0 0 /dev/storage/vo                             /linuxprobe             ext4     defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-2、扩容逻辑卷"><a href="#8-2-2、扩容逻辑卷" class="headerlink" title="8.2.2、扩容逻辑卷"></a>8.2.2、扩容逻辑卷</h4><blockquote><p>在前面的实验中，卷组是由两块硬盘设备共同组成的。用户在使用存储设备时感知不到设备底层的架构</p><p>和布局，更不用关心底层是由多少块硬盘组成的，只要卷组中有足够的资源，就可以一直为逻辑卷扩</p><p>容。<strong>扩容前请一定要记得卸载设备和挂载点的关联</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /linuxprobe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>第1步</strong>：把上一个实验中的逻辑卷<code>vo</code>扩展至<code>290MB</code>。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -L 290M /dev/storage/vo</span>Rounding size to boundary between physical extents: 292.00 MiB.Size of logical volume storage/vo changed from 148 MiB <span class="token punctuation">(</span>37 extents<span class="token punctuation">)</span> to 292 MiB <span class="token punctuation">(</span>73 extents<span class="token punctuation">)</span>.Logical volume storage/vo successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：检查硬盘的完整性，确认目录结构、内容和文件内容没有丢失。一般情况下没有报错，均为正常情况</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># e2fsck -f /dev/storage/vo</span>e2fsck 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/storage/vo: 11/38000 files <span class="token punctuation">(</span>0.0% non-contiguous<span class="token punctuation">)</span>, 10453/151552 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：重置设备在系统中的容量。刚刚是对<code>LV</code>（逻辑卷）设备进行了扩容操作，但系统内核还没有同</p><p>步到这部分新修改的信息，需要手动进行同步</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># resize2fs /dev/storage/vo</span>resize2fs 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Resizing the filesystem on /dev/storage/vo to 299008 <span class="token punctuation">(</span>1k<span class="token punctuation">)</span> blocks.The filesystem on /dev/storage/vo is now 299008 <span class="token punctuation">(</span>1k<span class="token punctuation">)</span> blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：重新挂载硬盘设备并查看挂载状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sr0                6.7G  6.7G     0 100% /media/cdrom/dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0/dev/mapper/storage-vo  279M  2.1M  259M   1% /linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-3、缩小逻辑卷"><a href="#8-2-3、缩小逻辑卷" class="headerlink" title="8.2.3、缩小逻辑卷"></a>8.2.3、缩小逻辑卷</h4><blockquote><p>相较于扩容逻辑卷，在对逻辑卷进行缩容操作时，数据丢失的风险更大。所以在生产环境中执行相应操</p><p>作时，一定要提前备份好数据。另外，<code>Linux</code>系统规定，在对<code>LVM</code>逻辑卷进行缩容操作之前，要先检查</p><p>文件系统的完整性（当然这也是为了保证数据的安全）。在执行缩容操作前记得先把文件系统卸载掉。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /linuxprobe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>第1步</strong>：检查文件系统的完整性。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># e2fsck -f /dev/storage/vo</span>e2fsck 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/storage/vo: 11/74000 files <span class="token punctuation">(</span>0.0% non-contiguous<span class="token punctuation">)</span>, 15507/299008 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：通知系统内核将逻辑卷<code>vo</code>的容量减小到<code>120MB</code>。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># resize2fs /dev/storage/vo 120M</span>resize2fs 1.44.3 <span class="token punctuation">(</span>10-July-2018<span class="token punctuation">)</span>Resizing the filesystem on /dev/storage/vo to 122880 <span class="token punctuation">(</span>1k<span class="token punctuation">)</span> blocks.The filesystem on /dev/storage/vo is now 122880 <span class="token punctuation">(</span>1k<span class="token punctuation">)</span> blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：将<code>LV</code>逻辑卷的容量修改为<code>120M</code>。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvreduce -L 120M /dev/storage/vo</span>  WARNING: Reducing active logical volume to 120.00 MiB.  THIS MAY DESTROY YOUR DATA <span class="token punctuation">(</span>filesystem etc.<span class="token punctuation">)</span>Do you really want to reduce storage/vo? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y  Size of logical volume storage/vo changed from 292 MiB <span class="token punctuation">(</span>73 extents<span class="token punctuation">)</span> to 120 MiB <span class="token punctuation">(</span>30 extents<span class="token punctuation">)</span>.  Logical volume storage/vo successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>缩容操作和扩容不同的是，先通知系统内核自己想缩小逻辑卷，如果在执行<code>resize2fs</code>命令后系统没有</p><p>报错，再正式操作。</p></blockquote><blockquote><p><strong>第4步</strong>：重新挂载文件系统并查看系统状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem              Size  Used Avail Use% Mounted ondevtmpfs                969M     0  969M   0% /devtmpfs                   984M     0  984M   0% /dev/shmtmpfs                   984M  9.6M  974M   1% /runtmpfs                   984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root    17G  3.9G   14G  23% //dev/sr0                6.7G  6.7G     0 100% /media/cdrom/dev/sda1              1014M  152M  863M  15% /boottmpfs                   197M   16K  197M   1% /run/user/42tmpfs                   197M  3.4M  194M   2% /run/user/0/dev/mapper/storage-vo  113M  1.6M  103M   2% /linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-4、逻辑卷快照"><a href="#8-2-4、逻辑卷快照" class="headerlink" title="8.2.4、逻辑卷快照"></a>8.2.4、逻辑卷快照</h4><blockquote><p><code>LVM</code>还具备有“<strong>快照卷</strong>”功能，该功能<strong>类似于虚拟机软件的还原时间点功能</strong>。例如，对某一个逻辑卷设备做</p><p>一次快照，如果日后发现数据被改错了，就可以利用之前做好的快照卷进行覆盖还原。<code>LVM</code>的快照卷功</p><p>能有两个特点:</p><ul><li>快照卷的容量必须等同于逻辑卷的容量；</li><li>快照卷仅一次有效，一旦执行还原操作后则会被立即自动删除</li></ul></blockquote><blockquote><p>在正式操作前，先看看<code>VG</code>（卷组）中的容量是否够用</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span>  --- Volume group ---  VG Name               storage  System ID               Format                lvm2  Metadata Areas        2  Metadata Sequence No  4  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                1  Open LV               1  Max PV                0  Cur PV                2  Act PV                2  VG Size               39.99 GiB  PE Size               4.00 MiB  Total PE              10238  Alloc PE / Size       30 / 120.00 MiB  Free  PE / Size       10208 / <span class="token operator">&lt;</span>39.88 GiB  VG UUID               k3ZnaP-wGPr-TQJ5-PCtA-0RgO-jvsi-9elZ5M………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过卷组的输出信息可以清晰看到，卷组中已经使用了<code>120MB</code>的容量，空闲容量还有<code>39.88GB</code>。</p><p><strong>接下来用重定向往逻辑卷设备所挂载的目录中写入一个文件</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Welcome to Linuxprobe.com" > /linuxprobe/readme.txt</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /linuxprobe</span>total 14drwx------. 2 root root 12288 Jan 15 01:11 lost+found-rw-r--r--. 1 root root    26 Jan 15 07:01 readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第1步</strong>：使用<code>-s</code>参数生成一个快照卷，使用<code>-L</code>参数指定切割的大小，需要与要做快照的设备容量保持一</p><p>致。另外，还需要在命令后面写上是针对哪个逻辑卷执行的快照操作，稍后数据也会还原到这个相应的</p><p>设备上。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvcreate -L 120M -s -n SNAP /dev/storage/vo</span> Logical volume <span class="token string">"SNAP"</span> created<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvdisplay</span>  --- Logical volume ---  LV Path                /dev/storage/SNAP  LV Name                SNAP  VG Name                storage  LV UUID                qd7l6w-3Iv1-6E3X-RGkC-t5xl-170r-rDZSEf  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost.localdomain, 2021-01-15 07:02:44 +0800  LV snapshot status     active destination <span class="token keyword">for</span> vo  LV Status              available  <span class="token comment" spellcheck="true"># open                 0</span>  LV Size                120.00 MiB  Current LE             30  COW-table size         120.00 MiB  COW-table LE           30  Allocated to snapshot  0.01%  Snapshot chunk size    4.00 KiB  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:5………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：在逻辑卷所挂载的目录中创建一个<code>100MB</code>的垃圾文件，然后再查看快照卷的状态。可以发现存储</p><p>空间的占用量上升了。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dd if=/dev/zero of=/linuxprobe/files count=1 bs=100M</span>1+0 records <span class="token keyword">in</span>1+0 records out104857600 bytes <span class="token punctuation">(</span>105 MB, 100 MiB<span class="token punctuation">)</span> copied, 0.312057 s, 336 MB/s<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvdisplay</span>  --- Logical volume ---  LV Path                /dev/storage/SNAP  LV Name                SNAP  VG Name                storage  LV UUID                qd7l6w-3Iv1-6E3X-RGkC-t5xl-170r-rDZSEf  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost.localdomain, 2021-01-15 07:02:44 +0800  LV snapshot status     active destination <span class="token keyword">for</span> vo  LV Status              available  <span class="token comment" spellcheck="true"># open                 0</span>  LV Size                120.00 MiB  Current LE             30  COW-table size         120.00 MiB  COW-table LE           30  Allocated to snapshot  83.71%  Snapshot chunk size    4.00 KiB  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:5………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：为了校验快照卷的效果，需要对逻辑卷进行快照还原操作。在此之前记得先卸载掉逻辑卷设备与</p><p>目录的挂载</p></blockquote><blockquote><p><code>lvconvert</code>命令用于管理逻辑卷的快照，语法格式为“<code>lvconvert</code> [参数]快照卷名称”。</p><p>使用<code>lvconvert</code>命令能自动回复逻辑卷的快照,在早期的<code>RHEL/[CentOS 5]</code>版本中要写全格式：</p><p>“<code>--mergesnapshot</code>”，而从<code>RHEL 6</code>到<code>RHEL 8</code>，已经允许用户只输入<code>--merge</code>参数进行操作了，</p><p>系统会自动分辨设备的类型</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvconvert --merge /dev/storage/SNAP</span>  Merging of volume storage/SNAP started.  storage/vo: Merged: 36.41%  storage/vo: Merged: 100.00%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：快照卷会被自动删除掉，并且刚刚在逻辑卷设备被执行快照操作后再创建出来的<code>100MB</code>的垃圾文</p><p>件也被清除了。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -a</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /linuxprobe/</span><span class="token punctuation">[</span>root@linuxprobe linuxprobe<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>lost+found readme.txt<span class="token punctuation">[</span>root@linuxprobe linuxprobe<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat readme.txt </span>Welcome to Linuxprobe.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-5、删除逻辑卷"><a href="#8-2-5、删除逻辑卷" class="headerlink" title="8.2.5、删除逻辑卷"></a>8.2.5、删除逻辑卷</h4><blockquote><p>生产环境中想要重新部署<code>LVM</code>或者不再需要使用<code>LVM</code>时，则需要执行<code>LVM</code>的删除操作。为此，需要提前</p><p>备份好重要的数据信息，<strong>然后依次删除逻辑卷、卷组、物理卷设备，这个顺序不可颠倒</strong>。</p></blockquote><blockquote><p><strong>第1步</strong>：取消逻辑卷与目录的挂载关联，删除配置文件中永久生效的设备参数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># umount /linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/fstab</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># /etc/fstab</span><span class="token comment" spellcheck="true"># Created by anaconda on Tue Jul 21 05:03:40 2020</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Accessible filesystems, by reference, are maintained under '/dev/disk/'.</span><span class="token comment" spellcheck="true"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># After editing this file, run 'systemctl daemon-reload' to update systemd</span><span class="token comment" spellcheck="true"># units generated from this file.</span><span class="token comment" spellcheck="true">#</span>/dev/mapper/rhel-root                       /                       xfs      defaults        0 0UUID<span class="token operator">=</span>2db66eb4-d9c1-4522-8fab-ac074cd3ea0b   /boot                   xfs      defaults        0 0/dev/mapper/rhel-swap                       swap                    swap     defaults        0 0/dev/cdrom                                  /media/cdrom            iso9660  defaults        0 0 /dev/storage/vo                             /linuxprobe             ext4     defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：删除逻辑卷设备，需要输入y来确认操作。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvremove /dev/storage/vo </span>Do you really want to remove active logical volume storage/vo? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y  Logical volume <span class="token string">"vo"</span> successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：删除卷组，此处只写卷组名称即可，不需要设备的绝对路径。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgremove storage</span>  Volume group <span class="token string">"storage"</span> successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：删除物理卷设备。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvremove /dev/sdb /dev/sdc</span>  Labels on physical volume <span class="token string">"/dev/sdb"</span> successfully wiped.  Labels on physical volume <span class="token string">"/dev/sdc"</span> successfully wiped.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在上述操作执行完毕之后，再执行<code>lvdisplay</code>、<code>vgdisplay</code>、<code>pvdisplay</code>命令来查看<code>LVM</code>的信息时就不</p><p>会再看到相关信息了（前提是上述步骤的操作是正确的）</p></blockquote><h2 id="九、使用Iptables与Firewalld防火墙"><a href="#九、使用Iptables与Firewalld防火墙" class="headerlink" title="九、使用Iptables与Firewalld防火墙"></a>九、使用<code>Iptables</code>与<code>Firewalld</code>防火墙</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818134308464.png" alt="防火墙作为公网与内网之间的保护屏障"></p><h3 id="9-1、Iptables"><a href="#9-1、Iptables" class="headerlink" title="9.1、Iptables"></a>9.1、<code>Iptables</code></h3><blockquote><p>在早期的<code>Linux</code>系统中，默认使用的是<code>iptables</code>防火墙管理服务来配置防火墙。尽管新型的</p><p><code>firewalld</code>防火墙管理服务已经被投入使用多年，但是大量的企业在生产环境中依然出于</p><p>各种原因而继续使用<code>iptables</code></p></blockquote><h4 id="9-1-1、策略与规则链"><a href="#9-1-1、策略与规则链" class="headerlink" title="9.1.1、策略与规则链"></a>9.1.1、策略与规则链</h4><blockquote><p>防火墙会按照从上到下的顺序来读取配置的策略规则，在找到匹配项后就立即结束匹配工作并去执行匹</p><p>配项中定义的行为（即放行或阻止）。如果在读取完所有的策略规则之后没有匹配项，就去执行默认的</p><p>策略。一般而言，防火墙策略规则的设置有两种：“通”（即放行）和“堵”（即阻止）。当防火墙的默认策</p><p>略为拒绝时（堵），就要设置允许规则（通），否则谁都进不来；如果防火墙的默认策略为允许，就要</p><p>设置拒绝规则，否则谁都能进来，防火墙也就失去了防范的作用</p></blockquote><blockquote><p><code>iptables</code>服务把<strong>用于处理或过滤流量的策略条目</strong>称之为规则，多条规则可以组成一个规则链，而规则</p><p>链则依据数据包处理位置的不同进行分类，具体如下：</p><ul><li>在进行路由选择前处理数据包（<code>PREROUTING</code>）</li><li>处理流入的数据包（<code>INPUT</code>）</li><li>处理流出的数据包（<code>OUTPUT</code>）</li><li>处理转发的数据包（<code>FORWARD</code>）</li><li>在进行路由选择后处理数据包（<code>POSTROUTING</code>）</li></ul></blockquote><blockquote><p><code>iptables</code>服务的术语中分别是:</p><ul><li><code>ACCEPT</code>（允许流量通过）</li><li><code>REJECT</code>（拒绝流量通过）</li><li><code>LOG</code>（记录日志信息）</li><li><code>DROP</code>（拒绝流量通过）</li></ul></blockquote><blockquote><p>当把<code>Linux</code>系统中的防火墙策略设置为<code>REJECT</code>动作后，流量发送方会看到端口不可达的响应</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 192.168.10.10</span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.From 192.168.10.10 icmp_seq<span class="token operator">=</span>1 Destination Port UnreachableFrom 192.168.10.10 icmp_seq<span class="token operator">=</span>2 Destination Port UnreachableFrom 192.168.10.10 icmp_seq<span class="token operator">=</span>3 Destination Port UnreachableFrom 192.168.10.10 icmp_seq<span class="token operator">=</span>4 Destination Port Unreachable--- 192.168.10.10 <span class="token function">ping</span> statistics ---4 packets transmitted, 0 received, +4 errors, 100% packet loss, <span class="token function">time</span> 3002ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>而把<code>Linux</code>系统中的防火墙策略修改成<code>DROP</code>动作后，流量发送方会看到响应超时的提醒。但是流量发送</p><p>方无法判断流量是被拒绝，还是接收方主机当前不在线</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 192.168.10.10</span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.--- 192.168.10.10 <span class="token function">ping</span> statistics ---4 packets transmitted, 0 received, 100% packet loss, <span class="token function">time</span> 3000ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2、基本的命令参数"><a href="#9-1-2、基本的命令参数" class="headerlink" title="9.1.2、基本的命令参数"></a>9.1.2、基本的命令参数</h4><blockquote><p>根据<code>OSI</code>七层模型的定义，<code>iptables</code>属于数据链路层的服务，所以可以根据流量的<strong>源地址</strong>、<strong>目的地址</strong>、</p><p><strong>传输协议</strong>、<strong>服务类型</strong>等信息进行匹配；一旦匹配成功，<code>iptables</code>就会根据策略规则所预设的动作来处理</p><p>这些流量。另外，再次提醒一下，防火墙策略规则的匹配顺序是从上到下的，因此要把较为严格、优先</p><p>级较高的策略规则放到前面，以免发生错误</p></blockquote><blockquote><p><code>iptables</code>中常用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-P</code></td><td>设置默认策略</td></tr><tr><td><code>-F</code></td><td>清空规则链</td></tr><tr><td><code>-L</code></td><td>查看规则链</td></tr><tr><td><code>-A</code></td><td>在规则链的末尾加入新规则</td></tr><tr><td><code>-I num</code></td><td>在规则链的头部加入新规则</td></tr><tr><td><code>-D num</code></td><td>删除某一条规则</td></tr><tr><td><code>-s</code></td><td>匹配来源地址<code>IP/MASK</code>，加叹号“!”表示除这个<code>IP</code>外</td></tr><tr><td><code>-d</code></td><td>匹配目标地址</td></tr><tr><td><code>-i</code> 网卡名称</td><td>匹配从这块网卡流入的数据</td></tr><tr><td><code>-o </code>网卡名称</td><td>匹配从这块网卡流出的数据</td></tr><tr><td><code>-p</code></td><td>匹配协议，如<code>TCP</code>、<code>UDP</code>、<code>ICMP</code></td></tr><tr><td><code>--dport num</code></td><td>匹配目标端口号</td></tr><tr><td><code>--sport num</code></td><td>匹配来源端口号</td></tr></tbody></table><blockquote><p><strong>第一步．在<code>iptables</code>命令后添加-L参数查看已有的防火墙规则链。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         ACCEPT     udp  --  anywhere             anywhere             udp dpt:domainACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domainACCEPT     udp  --  anywhere             anywhere             udp dpt:bootpsACCEPT     tcp  --  anywhere             anywhere             tcp dpt:bootpsChain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         ACCEPT     all  --  anywhere             192.168.122.0/24     ctstate RELATED,ESTABLISHEDACCEPT     all  --  192.168.122.0/24     anywhere            ACCEPT     all  --  anywhere             anywhere            REJECT     all  --  anywhere             anywhere             reject-with icmp-port-unreachableREJECT     all  --  anywhere             anywhere             reject-with icmp-port-unreachableChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         ACCEPT     udp  --  anywhere             anywhere             udp dpt:bootpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第二部. 在<code>iptables</code>命令后添加-F参数清空已有的防火墙规则链。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -F</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第三步. 把<code>INPUT</code>规则链的默认策略设置为拒绝</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -P INPUT DROP</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy DROP<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>把<code>INPUT</code>链设置为默认拒绝后，就要往里面写入允许策略了，否则所有流入的数据包都会被默认拒绝</p><p>掉。<strong>规则链的默认策略拒绝动作只能是<code>DROP</code>，而不能是<code>REJECT</code></strong></p></blockquote><blockquote><p><strong>第四步. 向<code>INPUT</code>链中添加允许<code>ICMP</code>流量进入的策略规则</strong></p></blockquote><blockquote><p>向防火墙的<code>INPUT</code>规则链中添加一条允许<code>ICMP</code>流量进入的策略规则就默认允许了这种<code>ping</code>命令检测行</p><p>为</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -I INPUT -p icmp -j ACCEPT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 192.168.10.10</span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.154 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.041 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.038 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.046 ms--- 192.168.10.10 <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 104msrtt min/avg/max/mdev <span class="token operator">=</span> 0.038/0.069/0.154/0.049 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第五步. 删除<code>INPUT</code>规则链中刚刚加入的那条策略（允许<code>ICMP</code>流量），并把默认策略设置为允许</strong> </p><p>使用<code>-F</code>参数会清空已有的所有防火墙策略；</p><p>使用<code>-D</code>参数可以删除某一条指定的策略，因此更加安全和准确</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -D INPUT 1</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -P INPUT ACCEPT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt <span class="token function">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第六步. 将<code>INPUT</code>规则链设置为只允许指定网段的主机访问本机的22端口，拒绝来自其他所有主机</strong></p><p><strong>的流量</strong></p></blockquote><blockquote><p>对某台主机进行匹配，可直接写出它的<code>IP</code>地址；</p><p>如需对网段进行匹配，则需要写为子网掩码的形式（比如192.168.10.0/24）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -A INPUT -p tcp --dport 22 -j REJECT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target prot opt <span class="token function">source</span> destination ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh  REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在设置完上述<code>INPUT</code>规则链之后，使用<code>IP</code>地址在192.168.10.0/24网段内的主机访问服务器（即前面提</p><p>到的设置了<code>INPUT</code>规则链的主机）的22端口，效果如下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client A ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:5d52kZi1la/FJK4v4jibLBZhLqzGqbJAskZiME6ZXpQ.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: 此处输入服务器密码Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast login: Wed Jan 20 16:30:28 2021 from 192.168.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后，再使用<code>IP</code>地址在192.168.20.0/24网段内的主机访问服务器的22端口（虽网段不同，但已确认可</p><p>以相互通信），效果如下</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client B ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>Connecting to 192.168.10.10:22<span class="token punctuation">..</span>.Could not connect to <span class="token string">'192.168.10.10'</span> <span class="token punctuation">(</span>port 22<span class="token punctuation">)</span>: Connection failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p> 由上可以看到，提示连接请求被拒绝了（<code>Connection failed</code>）</p></blockquote><blockquote><p><strong>第八步. 向<code>INPUT</code>规则链中添加拒绝192.168.10.5主机访问本机80端口（<code>Web</code>服务）的策略规则</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -I INPUT -p tcp -s 192.168.10.5 --dport 80 -j REJECT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target prot opt <span class="token function">source</span> destination  REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第九步. 向<code>INPUT</code>规则链中添加拒绝所有主机访问本机1000～1024端口的策略规则</strong></p></blockquote><blockquote><p>前面在添加防火墙策略时，使用的是<code>-I</code>参数，它默认会把规则添加到最上面的位置，因此优先级是最高</p><p>的。如果工作中需要添加一条最后“兜底”的规则，那就用<code>-A</code>参数吧</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -A INPUT -p tcp --dport 1000:1024 -j REJECT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -A INPUT -p udp --dport 1000:1024 -j REJECT</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -L</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target prot opt <span class="token function">source</span> destination  REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable REJECT tcp -- anywhere anywhere tcp dpts:cadlock2:1024 reject-with icmp-port-unreachable REJECT udp -- anywhere anywhere udp dpts:cadlock2:1024 reject-with icmp-port-unreachable………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请特别注意，使用<code>iptables</code>命令配置的防火墙规则默认会在系统<strong>下一次重启时失效</strong>，如果想让配置的防</p><p>火墙策略永久生效，还要执行保存命令</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables-save </span><span class="token comment" spellcheck="true"># Generated by xtables-save v1.8.2 on Wed Jan 20 16:56:27 2021</span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对了，如果公司服务器是<code>5/6/7</code>版本的话，对应的保存命令应该是</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables save</span>iptables: Saving firewall rules to /etc/sysconfig/iptables: <span class="token punctuation">[</span> OK <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-2、Firewalld"><a href="#9-2、Firewalld" class="headerlink" title="9.2、Firewalld"></a>9.2、<code>Firewalld</code></h3><blockquote><p> <code>firewalld</code>中常用的区域名称及策略规则</p></blockquote><table><thead><tr><th>区域</th><th>默认规则策略</th></tr></thead><tbody><tr><td><code>trusted</code></td><td>允许所有的数据包</td></tr><tr><td><code>home</code></td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与<code>ssh</code>、<code>mdns</code>、<code>ipp-client</code>、<code>amba-client</code>与<code>dhcpv6-client</code>服务相关，则允许流量</td></tr><tr><td><code>internal</code></td><td>等同于home区域</td></tr><tr><td><code>work</code></td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与<code>ssh</code>、<code>ipp-client</code>与<code>dhcpv6-client</code>服务相关，则允许流量</td></tr><tr><td><code>public</code></td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与<code>ssh</code>、<code>dhcpv6-client</code>服务相关，则允许流量</td></tr><tr><td><code>external</code></td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与<code>ssh</code>服务相关，则允许流量</td></tr><tr><td><code>dmz</code></td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量</td></tr><tr><td><code>block</code></td><td>拒绝流入的流量，除非与流出的流量相关</td></tr><tr><td><code>drop</code></td><td>拒绝流入的流量，除非与流出的流量相关</td></tr></tbody></table><h4 id="9-2-1、终端管理工具"><a href="#9-2-1、终端管理工具" class="headerlink" title="9.2.1、终端管理工具"></a>9.2.1、终端管理工具</h4><blockquote><p> <code>firewall-cmd</code>命令中使用的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>--get-default-zone</code></td><td>查询默认的区域名称</td></tr><tr><td><code>--set-default-zone=&lt;区域名称&gt;</code></td><td>设置默认的区域，使其永久生效</td></tr><tr><td><code>--get-zones</code></td><td>显示可用的区域</td></tr><tr><td><code>--get-services</code></td><td>显示预先定义的服务</td></tr><tr><td><code>--get-active-zones</code></td><td>显示当前正在使用的区域与网卡名称</td></tr><tr><td><code>--add-source=</code></td><td>将源自此<code>IP</code>或子网的流量导向指定的区域</td></tr><tr><td><code>--remove-source=</code></td><td>不再将源自此<code>IP</code>或子网的流量导向某个指定区域</td></tr><tr><td><code>--add-interface=&lt;网卡名称&gt;</code></td><td>将源自该网卡的所有流量都导向某个指定区域</td></tr><tr><td><code>--change-interface=&lt;网卡名称&gt;</code></td><td>将某个网卡与区域进行关联</td></tr><tr><td><code>--list-all</code></td><td>显示当前区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td>–list-all-zones</td><td>显示所有区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td><code>--add-service=&lt;服务名&gt;</code></td><td>设置默认区域允许该服务的流量</td></tr><tr><td><code>--add-port=&lt;端口号/协议&gt;</code></td><td>设置默认区域允许该端口的流量</td></tr><tr><td><code>-remove-service=&lt;服务名&gt;</code></td><td>设置默认区域不再允许该服务的流量</td></tr><tr><td><code>--remove-port=&lt;端口号/协议&gt;</code></td><td>设置默认区域不再允许该端口的流量</td></tr><tr><td><code>--reload</code></td><td>让“永久生效”的配置规则立即生效，并覆盖当前的配置规则</td></tr><tr><td><code>--panic-on</code></td><td>开启应急状况模式</td></tr><tr><td><code>--panic-off</code></td><td>关闭应急状况模式</td></tr></tbody></table><blockquote><p> 与<code>Linux</code>系统中其他的防火墙策略配置工具一样，使用<code>firewalld</code>配置的防火墙策略默认为运行时</p><p>（<code>Runtime</code>）模式，又称为当前生效模式，而且会随着系统的重启而失效。如果想让配置策略一直存</p><p>在，就需要使用永久（<code>Permanent</code>）模式了，方法就是在用<code>firewall-cmd</code>命令正常设置防火墙策略时</p><p>添加<code>--permanent</code>参数，这样配置的防火墙策略就可以永久生效了。但是，永久生效模式有一个“不近人</p><p>情”的特点，就是使用它设置的策略只有在系统重启之后才能自动生效。如果想让配置的策略立即生效，</p><p>需要手动执行<code>firewall-cmd --reload</code>命令</p></blockquote><blockquote><p><strong>第一步. 查看<code>firewalld</code>服务当前所使用的区域</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-default-zone</span>public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> <strong>第二部. 查询指定网卡在<code>firewalld</code>服务中绑定的区域</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-zone-of-interface=ens160</span>public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>第三步.  把网卡默认区域修改为<code>external</code>，并在系统重启后生效</strong></p></blockquote><pre><code>[root@linuxprobe ~]# firewall-cmd --permanent --zone=external --change-interface=ens160The interface is under control of NetworkManager, setting zone to 'external'.success[root@linuxprobe ~]# firewall-cmd --permanent --get-zone-of-interface=ens160external</code></pre><blockquote><p><strong>第四步. 把<code>firewalld</code>服务的默认区域设置为<code>public</code></strong></p></blockquote><blockquote><p>默认区域也叫<strong>全局配置</strong>，指的是对所有网卡都生效的配置，优先级较低。在下面的代码中可以看到，当</p><p>前默认区域为<code>public</code>，而<code>ens160</code>网卡的区域为<code>external</code>。此时便是以网卡的区域名称为准</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --set-default-zone=public</span>Warning: ZONE_ALREADY_SET: publicsuccess<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-default-zone </span>public<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-zone-of-interface=ens160</span>externa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第四步. 启动和关闭<code>firewalld</code>防火墙服务的应急状况模式</strong></p></blockquote><blockquote><p>使用<code>--panic-on</code>参数会立即<strong>切断一切网络连接</strong>，而使用<code>--panic-off</code>则会恢复网络连接。切记，紧急</p><p>模式会切断一切网络连接，因此在远程管理服务器时，在按下回车键前一定要三思</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --panic-on</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --panic-off</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第六步. 查询<code>SSH</code>和<code>HTTPS</code>协议的流量是否允许放行</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --query-service=ssh</span><span class="token function">yes</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --query-service=https</span>no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第七步. 把<code>HTTPS</code>协议的流量设置为永久允许放行，并立即生效</strong></p></blockquote><blockquote><p>默认情况下进行的修改都属于<code>Runtime模式</code>，即<strong>当前生效而重启后失效</strong>，因此在工作和考试中尽量避免</p><p>使用。而在使用<code>--permanent</code>参数时，则是当前不会立即看到效果，而在重启或重新加载后方可生效。</p><p>于是，在添加了允许放行<code>HTTPS</code>流量的策略后，查询当前模式策略，发现依然是不允许放行<code>HTTPS</code>协议</p><p>的流量</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-service=https</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --query-service=https</span>no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不想重启服务器的话，就用<code>--reload</code>参数吧</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --query-service=https</span><span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第八步. 把<code>HTTP</code>协议的流量设置为永久拒绝，并立即生效</strong></p></blockquote><blockquote><p>由于在默认情况下<code>HTTP</code>协议的流量就没有被允许，所以会有“<code>Warning: NOT_ENABLED: http</code>”这样的提</p><p>示信息，因此对实际操作没有影响</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --remove-service=http</span>Warning: NOT_ENABLED: httpsuccess<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload </span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第九步. 访问8080和8081端口的流量策略设置为允许，但仅限当前生效</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --add-port=8080-8081/tcp</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --list-ports</span>8080-8081/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第十步. 把原本访问本机888端口的流量转发到22端口，要且求当前和长期均有效</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第十一步 富规则的设置</strong></p></blockquote><blockquote><p>富规则也叫复规则，表示更细致、更详细的防火墙策略配置，它可以针对<strong>系统服务、端口号、源地址和</strong></p><p><strong>目标地址</strong>等诸多信息进行更有针对性的策略配置。<strong>它的优先级在所有的防火墙策略中也是最高的</strong>。</p><p>比如，我们可以在<code>firewalld</code>服务中配置一条富规则，使其拒绝<code>192.168.10.0/24</code>网段的所有用户访问</p><p>本机的ssh服务（22端口）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --permanent --zone=public --add-rich-rule="rule family="ipv4" source address="192.168.10.0/24" service name="ssh" reject"</span>success<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在客户端使用<code>ssh</code>命令尝试访问<code>192.168.10.10</code>主机的ssh服务（22端口）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@client A ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>Connecting to 192.168.10.10:22<span class="token punctuation">..</span>.Could not connect to <span class="token string">'192.168.10.10'</span> <span class="token punctuation">(</span>port 22<span class="token punctuation">)</span>: Connection failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2、图形管理工具"><a href="#9-2-2、图形管理工具" class="headerlink" title="9.2.2、图形管理工具"></a>9.2.2、图形管理工具</h4><blockquote><p><code>firewall-config</code>是<code>firewalld</code>防火墙配置管理工具的<code>GUI</code>（图形用户界面）版本，几乎可以实现所有</p><p>以命令行来执行的操作。在默认情况下系统并没有提供f<code>irewall-config</code>命令，我们需要自行用<code>dnf</code>命</p><p>令进行安装，所以需要先配置软件仓库</p></blockquote><blockquote><p><strong>第一步. 安装<code>firewall-config</code></strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装成功后，<code>firewall-config</code>工具的界面如图所示，其功能具体如下:</p><ul><li><strong>1：</strong>选择运行时（<code>Runtime</code>）或永久（<code>Permanent</code>）模式的配置。</li><li><strong>2</strong>：可选的策略集合区域列表。</li><li><strong>3</strong>：常用的系统服务列表。</li><li><strong>4：</strong>主机地址的黑白名单。</li><li><strong>5</strong>：当前正在使用的区域。</li><li><strong>6</strong>：管理当前被选中区域中的服务。</li><li><strong>7</strong>：管理当前被选中区域中的端口。</li><li><strong>8：</strong>设置允许被访问的协议。</li><li><strong>9：</strong>设置允许被访问的端口。</li><li><strong>10</strong>：开启或关闭<code>SNAT</code>（源网络地址转换）技术。</li><li><strong>11</strong>：设置端口转发策略。</li><li><strong>12</strong>：控制请求<code>icmp</code>服务的流量。</li><li><strong>13</strong>：管理防火墙的富规则。</li><li><strong>14</strong>：被选中区域的服务，若勾选了相应服务前面的复选框，则表示允许与之相关的流量。</li><li><strong>15</strong>：<code>firewall-config</code>工具的运行状态。</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220818175746469.png"></p><blockquote><p>在使用<code>firewall-config</code>工具配置完防火墙策略之后，无须进行二次确认，因为只要有修改内容，它就</p><p>自动进行保存</p></blockquote><blockquote><p>将当前区域中请求<code>http</code>服务的流量设置为允许放行，但仅限当前生效</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091016196.png"></p><blockquote><p>尝试添加一条防火墙策略规则，使其放行访问8080～8088端口（<code>TCP</code>协议）的流量，并将其设置为永久</p><p>生效，以达到系统重启后防火墙策略依然生效的目的。在按照下图所示的界面配置完毕之后，还需要在</p><p><code>Options</code>菜单中单击<code>Reload Firewalld</code>命令，让配置的防火墙策略立即生效（见图）。这与在命令行</p><p>中使用<code>--reload</code>参数的效果一样</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091239526.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091319319.png"></p><blockquote><p><code>SNAT</code>是一种为了解决<code>IP</code>地址匮乏而设计的技术，它可以使得多个内网中的用户通过同一个外网<code>IP</code>接入</p><p><code>Internet</code>。该技术的应用非常广泛，甚至可以说我们每天都在使用，只不过没有察觉到罢了。比如，</p><p>当通过家中的网关设备（无线路由器）访问本书配套站点<a href="https://www.linuxprobe.com/">www.linuxprobe.com</a>时，就用到了<code>SNAT</code>技术</p></blockquote><blockquote><p>在网络中不使用<code>SNAT</code>技术（见图“不使用<code>SNAT</code>”）和使用<code>SNAT</code>技术（见图使用<code>SNAT</code>）时的情况。</p><p>在图”不使用<code>SNAT</code>”所示的局域网中有多台<code>PC</code>，如果网关服务器没有应用<code>SNAT</code>技术，则互联网中的网站</p><p>服务器在收到<code>PC</code>的请求数据包，并回送响应数据包时，将无法在网络中找到这个私有网络的<code>IP</code>地址</p><p>，所以PC也就收不到响应数据包了。在图”使用<code>SNAT</code>””所示的局域网中，由于网关服务器应用了<code>SNAT</code>技</p><p>术，所以互联网中的网站服务器会将响应数据包发给网关服务器，再由后者转发给局域网中的PC</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091718381.png" alt="不使用`SNAT`"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091852766.png" alt="使用`SNAT`"></p><blockquote><p>按照下图进行配置，并选中<code>Masquerade zone</code>复选框，就自动<strong>开启了<code>SNAT</code>技术</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819091953838.png"></p><hr><blockquote><p>将本机888端口的流量转发到22端口，且要求当前和长期均有效，具体如图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819092052351.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819092107401.png"></p><hr><blockquote><p>让192.168.10.20主机访问本机的1234端口号，如图所示。其中<code>Element</code>选项能够根据<strong>服务名称</strong>、<strong>端口</strong></p><p>号、<strong>协议</strong>等信息进行匹配；<code>Source</code>与<code>Destination</code>选项后的<code>inverted</code>复选框代表<strong>反选功能</strong>，将其选中</p><p>则代表对已填写信息进行反选，即选中填写信息以外的主机地址；<code>Log</code>复选框在选中后，日志不仅会被</p><p>记录到日志文件中，而且还可以在设置日志的级别（<code>Level</code>）后，再将日志记录到日志文件中，以方便</p><p>后续的筛查</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819092312603.png"></p><hr><blockquote><p>如果生产环境中的服务器<strong>有多块网卡在同时提供服务</strong>（这种情况很常见），则对<strong>内网</strong>和对<strong>外网</strong>提供服务</p><p>的网卡要选择的<strong>防火墙策略区域也是不一样的</strong>。也就是说，可以把<strong>网卡与防火墙策略区域进行绑定</strong>（见</p><p>图），这样就可以使用不同的防火墙区域策略，对源自不同网卡的流量进行有针对性的监控，效果会更</p><p>好</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819092431941.png" alt="把网卡与防火墙策略区域进行绑定"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819092449094.png" alt="网卡与策略区域绑定完成"></p><h3 id="9-3、服务的访问控制列表"><a href="#9-3、服务的访问控制列表" class="headerlink" title="9.3、服务的访问控制列表"></a>9.3、服务的访问控制列表</h3><blockquote><p> <code>TCP Wrapper</code>是<code>RHEL 6/7</code>系统中默认启用的一款流量监控程序，它能够根据来访主机的地址与本机的</p><p>目标服务程序做出允许或拒绝的操作。<strong>在<code>RHEL 8</code>版本中，它已经被<code>firewalld</code>正式替代</strong>。换句话说，</p><p><code>Linux</code>系统中其实有两个层面的防火墙，第一种是前面讲到的基于<code>TCP/IP</code>协议的流量过滤工具，而</p><p><code>TCP Wrapper</code>服务则是能允许或禁止<code>Linux</code>系统提供服务的防火墙，从而在更高层面保护了<code>Linux</code></p><p>系统的安全运行</p></blockquote><blockquote><p><code>TCP Wrapper</code>服务的防火墙策略由两个控制列表文件所控制，用户可以编辑允许控制列表文件来放行对</p><p>服务的请求流量，也可以编辑拒绝控制列表文件来阻止对服务的请求流量。控制列表文件修改后会立即</p><p>生效，系统将会先<strong>检查允许控制列表文件</strong>（<code>/etc/hosts.allow</code>），如果匹配到相应的允许策略则放行</p><p>流量；如果没有匹配，则会<strong>进一步匹配拒绝控制列表文件</strong>（<code>/etc/hosts.deny</code>），若找到匹配项则</p><p>拒绝该流量。如果这两个文件都没有匹配到，则默认放行流量</p></blockquote><blockquote><p> <code>TCP Wrappers</code>服务的控制列表文件中常用的参数</p></blockquote><table><thead><tr><th>客户端类型</th><th>示例</th><th>满足示例的客户端列表</th></tr></thead><tbody><tr><td>单一主机</td><td><code>192.168.10.10</code></td><td><code>IP</code>地址为<code>192.168.10.10</code>的主机</td></tr><tr><td>指定网段</td><td><code>192.168.10.</code></td><td><code>IP</code>段为<code>192.168.10.0/24</code>的主机</td></tr><tr><td>指定网段</td><td><code>192.168.10.0</code>/<code>255.255.255.0</code></td><td><code>IP</code>段为<code>192.168.10.0/24</code>的主机</td></tr><tr><td>指定DNS后缀</td><td><code>.linuxprobe.com</code></td><td>所有<code>DNS</code>后缀为<code>.linuxprobe.com</code>的主机</td></tr><tr><td>指定主机名称</td><td><code>www.linuxprobe.com</code></td><td>主机名称为<code>www.linuxprobe.com</code>的主机</td></tr><tr><td>指定所有客户端</td><td>ALL</td><td>所有主机全部包括在内</td></tr></tbody></table><blockquote><p>在配置<code>TCP Wrapper</code>服务时需要遵循两个原则 ： </p><ul><li>编写拒绝策略规则时，填写的是<strong>服务名称，而非协议名称</strong>；</li><li>建议<strong>先编写拒绝策略规则，再编写允许策略规则</strong>，以便直观地看到相应的效果。</li></ul></blockquote><hr><blockquote><p>下面编写拒绝策略规则文件，禁止访问本机<code>sshd</code>服务的所有流量（无须修改<code>/etc/hosts.deny</code>文件</p><p>中原有的注释信息）</p></blockquote><pre><code>[root@linuxprobe ~]# vim /etc/hosts.deny## hosts.deny This file contains access rules which are used to# deny connections to network services that either use# the tcp_wrappers library or that have been# started through a tcp_wrappers-enabled xinetd.## The rules in this file can also be set up in# /etc/hosts.allow with a 'deny' option instead.## See 'man 5 hosts_options' and 'man 5 hosts_access'# for information on rule syntax.# See 'man tcpd' for information on tcp_wrapperssshd:*[root@linuxprobe ~]# ssh 192.168.10.10ssh_exchange_identification: read: Connection reset by peer</code></pre><hr><blockquote><p>接下来，在允许策略规则文件中添加一条规则，使其放行源自192.168.10.0/24网段，且访问本机<code>sshd</code></p><p>服务的所有流量。可以看到，服务器立刻就放行了访问<code>sshd</code>服务的流量，效果非常直观</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/hosts.allow</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># hosts.allow This file contains access rules which are used to</span><span class="token comment" spellcheck="true"># allow or deny connections to network services that</span><span class="token comment" spellcheck="true"># either use the tcp_wrappers library or that have been</span><span class="token comment" spellcheck="true"># started through a tcp_wrappers-enabled xinetd.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See 'man 5 hosts_options' and 'man 5 hosts_access'</span><span class="token comment" spellcheck="true"># for information on rule syntax.</span><span class="token comment" spellcheck="true"># See 'man tcpd' for information on tcp_wrappers</span>sshd:192.168.10.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: Last login: Wed May 4 07:56:29 2021<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4、驾驶舱管理工具"><a href="#9-4、驾驶舱管理工具" class="headerlink" title="9.4、驾驶舱管理工具"></a>9.4、驾驶舱管理工具</h3><blockquote><p><code>Cockpit</code>是一个基于<code>Web</code>的图形化服务管理工具，对用户相当友好，即便是新手也可以轻松上手。而且</p><p>它天然具备很好的跨平台性，因此被广泛应用于服务器、容器、虚拟机等多种管理场景。最后，红帽公</p><p>司对<code>Cockpit</code>也十分看重，直接将它默认安装到了<code>RHEL 8</code>系统中，由此衍生的<code>CentOS</code>和<code>Fedora</code>也都</p><p>标配有<code>Cockpit</code></p></blockquote><blockquote><p><code>Cockpit</code>在默认情况下就已经被安装到系统中。下面执行<code>dnf</code>命令对此进行确认</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install cockpit</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.AppStream                                       3.1 MB/s <span class="token operator">|</span> 3.2 kB     00:00    BaseOS                                          2.7 MB/s <span class="token operator">|</span> 2.7 kB     00:00    Package cockpit-185-2.el8.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p><code>Cockpit</code>服务程序在<code>RHEL 8</code>版本中没有自动运行，下面将它开启并加入到开机启动项中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start cockpit</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable cockpit.socket</span>Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输入“本机地址:9090”即可访问</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819100354401.png"></p><blockquote><p>进入到<code>Cockpit</code>网页界面后可谓是别有洞天，总共分为十三个功能模块，</p><p>即：系统状态、日志信息、硬盘存储、网卡网络、账户安全、服务程序、软件仓库、报告分析、</p><p>内核排错、<code>SElinux</code>、更新软件、订阅服务、终端界面</p></blockquote><hr><blockquote><p><code>System</code></p></blockquote><blockquote><p>进入<code>Cockpit</code>界面后默认显示的便是<code>System</code>（系统）界面，在该界面中能够看到系<strong>统架构</strong>、</p><p><strong>版本</strong>、<strong>主机名</strong>与<strong>时间</strong>等信息，还能够动态地展现出<strong>CPU</strong>、<strong>硬盘</strong>、<strong>内存</strong>和<strong>网络</strong>的复杂情况，这有</p><p>点类似于<code>Web</code>版的“<code>Winodws</code>系统任务管理器”</p></blockquote><hr><blockquote><p><code>Logs</code></p></blockquote><blockquote><p>这个模块能够<strong>提供系统的全部日志</strong>，但是“为什么图中的内容这么有限呢”？原因出在图中的两个选项中：</p><p><strong>时间</strong>和<strong>日志级别</strong>。通过这两个选项可以让用户更快地找到所需信息，而不是像<code>/var/log/message</code>文件</p><p>那样一股脑儿地都抛给用户</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819100705266.png"></p><hr><blockquote><p><code>Storage</code></p></blockquote><blockquote><p>这个模块显示了硬盘的<code>I/O</code>读写负载情况，也可以让用户通过该界面，用鼠标创建出</p><p><code>RAID</code>、<code>LVM</code>、<code>VDO</code>和<code>iSCSI</code>等存储设备</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819100828009.png"></p><hr><blockquote><p><code>Networking</code></p></blockquote><blockquote><p>动态看网卡的输出和接收值肯定是这个模块的标配功能了。</p><p>我们不仅可以在这里进行网卡的绑定（<code>Bonding</code>）和聚合（<code>Team</code>），还可以创建桥接网卡及添加</p><p><code>VLAN</code>。图的最下方会单独列出与网卡相关的日志信息。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819100927420.png"></p><hr><blockquote><p><code>Accounts</code></p></blockquote><blockquote><p> 我们在这里可以对用户进行重命名，设置用户的权限，还可以锁定、修改密码以及创建SSH密钥信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101023345.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101034720.png"></p><hr><blockquote><p><code>Services</code></p></blockquote><blockquote><p> 在<code>Services</code>功能模块的界面中，可以查看系统中已有的服务列表和运行状态。</p><p>单击某一服务，进入该服务的管理界面后（见图），可以对具体的服务进行<strong>开启</strong>、<strong>关闭</strong>操作。</p><p>在<code>Services</code>功能模块中设置了服务并将其加入到开机启动项后，在系统重启后也依然会为用户提供服</p><p>务。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101204960.png" alt="服务程序界面"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101221620.png" alt="服务管理界面"></p><hr><blockquote><p><code>Applications</code></p></blockquote><blockquote><p> 后期采用<code>Cockpit</code>或红帽订阅服务安装的软件都会显示在这个功能模块中</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101307795.png" alt="软件仓库界面"></p><hr><blockquote><p><code>Diagnostic Report</code></p></blockquote><blockquote><p> <code>Diagnostic Report</code>模块的功能是帮助用户收集及分析系统的信息，找到系统出现问题的原因。</p><p>单击<code>Create Report</code>按钮后大约两分钟左右，会出现如图所示的界面。好吧，摊牌了，这个功能其实很</p><p>鸡肋，就是将<code>sosreport</code>命令做成了一个网页按钮</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101431173.png" alt="报告分析界面"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101447941.png" alt="告生成完毕"></p><hr><blockquote><p><code>Kernel Dump</code></p></blockquote><blockquote><p><code>Kernel Dump</code>（<code>Kdump</code>）是一个在<strong>系统崩溃、死锁或死机时用来收集内核参数的一个服务</strong>。举例来说，</p><p>如果有一天系统崩溃了，这时<code>Kdump</code>服务就会开始工作，将系统的运行状态和内核数据收集到一个名为</p><p><code>dump core</code>的文件中，以便后续让运维人员分析并找出问题所在。由于我们在安装系统时没有启动该服</p><p>务，所以可以等到后续使用时再开启该功能界面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101556129.png" alt="内核排错界面"></p><hr><blockquote><p><code>SElinux</code></p></blockquote><blockquote><p>图所示为<code>SELinux</code>服务的控制按钮和警告信息界面。第11章将详细介绍<code>SELinux</code>安全子系统，这里</p><p>暂时略过</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101651622.png" alt=" SElinux管理界面"></p><hr><blockquote><p><code>Software Updates</code></p></blockquote><blockquote><p><code>Software Updates</code>功能模块的界面如图所示。这里提到的<code>Software Updates</code>并不是我们用来更新其</p><p>他<strong>常规软件</strong>的一个界面，而是用来对红帽客户订阅的服务进行更新的界面。用户只有在购<strong>买了红帽第三</strong></p><p><strong>方服务后</strong>才能使用这里面的功能。在购买了红帽订阅服务后，用户便可以在这里下载到相应服务程序的</p><p>最新版本和稳定版本</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101829456.png" alt="更新软件界面"></p><hr><blockquote><p><code>Subscriptions</code></p></blockquote><blockquote><p><code>subscriptions</code>功能模块的界面如图所示。里依然是一则红帽公司的“小广告”—如果想成为尊贵的红帽</p><p>服务用户，要付费购买订阅服务。个人用户无须购买。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819101922336.png" alt="订阅服务界面"></p><hr><blockquote><p><code>Terminal</code></p></blockquote><blockquote><p><code>Terminal</code>功能模块的界面如图所示。<code>Cockpit</code>服务提供了<code>Shell</code>终端的在线控制平台，可方便用户通</p><p>过网页上的终端功能管理服务器。这个功能深受运维人员喜爱</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819102011142.png"></p><h2 id="十、使用ssh服务管理远程主机"><a href="#十、使用ssh服务管理远程主机" class="headerlink" title="十、使用ssh服务管理远程主机"></a>十、使用ssh服务管理远程主机</h2><hr><h3 id="10-1、配置网卡服务"><a href="#10-1、配置网卡服务" class="headerlink" title="10.1、配置网卡服务"></a>10.1、配置网卡服务</h3><h4 id="10-1-1、配置网卡参数"><a href="#10-1-1、配置网卡参数" class="headerlink" title="10.1.1、配置网卡参数"></a>10.1.1、配置网卡参数</h4><blockquote><p>使用<code>nmtui</code>命令来配置网络</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105026043.png" alt="1 执行nmtui命令运行网络配置工具"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105055980.png" alt="2 选中配置网卡按钮并按下回车键"></p><blockquote><p>在<code>RHEL 5</code>、<code>RHEL 6</code>系统及其他大多数早期的<code>Linux</code>系统中，网卡的名称一直都是<code>eth0</code>、<code>eth1</code>、</p><p><code>eth2</code>、……；在<code>RHEL 7</code>中则变成了类似于<code>eno16777736</code>这样的名字；而在<code>RHEL 8</code>系统中网卡的最新名</p><p>称是类似于<code>ens160</code>、<code>ens192</code>这样的，不过除了网卡的名称发生变化之外，其他一切几乎照旧</p></blockquote><blockquote><p> 在服务器主机的网络配置信息中填写<code>IP</code>地址192.168.10.10/24。24表示子网掩码中的前24位为网络</p><p>号，后8位是主机号（与写成255.255.255.0的效果一样）。网关、<code>DNS</code>等信息暂可不必填写，等用到时</p><p>再补充</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105250920.png" alt="3 选中要配置的网卡名称，然后按下编辑按钮"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105304964.png" alt="4 把网卡IPv4的配置方式改成手动模式"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105336597.png" alt="5 按下显示详细信息按钮"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105358242.png" alt="6 填写IP地址和子网掩码"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105411498.png" alt="7 单击OK按钮保存配置"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819105427087.png" alt="8 单击Back按钮结束配置工作"></p><blockquote><p>只需使用<code>Vim</code>编辑器将网卡配置文件中的<code>ONBOOT</code>参数修改成<code>yes</code>，这样在系统重启后网卡就被激活了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/sysconfig/network-scripts/ifcfg-ens160</span>TYPE<span class="token operator">=</span>EthernetPROXY_METHOD<span class="token operator">=</span>noneBROWSER_ONLY<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>noneDEFROUTE<span class="token operator">=</span>yesIPV4_FAILURE_FATAL<span class="token operator">=</span>noIPV6INIT<span class="token operator">=</span>yesIPV6_AUTOCONF<span class="token operator">=</span>yesIPV6_DEFROUTE<span class="token operator">=</span>yesIPV6_FAILURE_FATAL<span class="token operator">=</span>noIPV6_ADDR_GEN_MODE<span class="token operator">=</span>stable-privacyNAME<span class="token operator">=</span>ens160UUID<span class="token operator">=</span>97486c86-6d1e-4e99-9aa2-68d3172098b2DEVICE<span class="token operator">=</span>ens160ONBOOT<span class="token operator">=</span>yesHWADDR<span class="token operator">=</span>00:0C:29:7D:27:BFIPADDR<span class="token operator">=</span>192.168.10.10PREFIX<span class="token operator">=</span>24IPV6_PRIVACY<span class="token operator">=</span>no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要想让服务程序获取到最新的配置文件，需要手动重启相应的服务，之后就可以看到网络畅通了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection reload ens160</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up ens160</span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping 192.168.10.10</span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.122 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.048 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.106 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.043 ms--- 192.168.10.10 <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 61msrtt min/avg/max/mdev <span class="token operator">=</span> 0.043/0.079/0.122/0.036 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-2、创建网络会话"><a href="#10-1-2、创建网络会话" class="headerlink" title="10.1.2、创建网络会话"></a>10.1.2、创建网络会话</h4><blockquote><p><code>RHEL</code>和<code>CentOS</code>系统默认使用<code>NetworkManager</code>来提供网络服务，这是一种动态管理网络配置的守护进程，能够让网络设备保持连接状态。可以使用<code>nmcli</code>命令来管理<code>NetworkManager</code>服务程序。<code>nmcli</code>是一款基于命令行的网络配置工具，功能丰富，参数众多。它可以轻松地查看网络信息或网络状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection show</span>NAME    UUID                                  TYPE      DEVICE ens160  97486c86-6d1e-4e99-9aa2-68d3172098b2  ethernet  ens160 virbr0  e5fca1ee-7020-4c21-a65b-259d0f993b44  bridge    virbr0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection show ens160 </span>connection.id:                          ens160connection.uuid:                        97486c86-6d1e-4e99-9aa2-68d3172098b2connection.stable-id:                   --connection.type:                        802-3-ethernetconnection.interface-name:              ens160connection.autoconnect:                 <span class="token function">yes</span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>外，<code>RHEL 8</code>系统支持网络会话功能，允许用户在多个配置文件中快速切换（非常类似于<code>firewalld</code>防</p><p>火墙服务中的区域技术）。如果我们在公司网络中使用笔记本电脑时需要手动指定网络的<code>IP</code>地址，而回</p><p>到家中则是使用<code>DHCP</code>自动分配<code>IP</code>地址，这就需要麻烦地频繁修改<code>IP</code>地址，但是使用了网络会话功能后</p><p>一切就简单多了—只需在不同的使用环境中激活相应的网络会话，就可以实现网络配置信息的自动切换</p><p>了</p></blockquote><blockquote><p>使用<code>nmcli</code>命令并按照“<code>connection add con-name type ifname</code>”的格式来创建网络会话。假设将公</p><p>司网络中的网络会话称之为<code>company</code>，将家庭网络中的网络会话称之为<code>house</code>，现在依次创建各自的网</p><p>络会话</p></blockquote><hr><blockquote><p>使用<code>con-name</code>参数指定公司所使用的网络会话名称<code>company</code>，然后依次用<code>ifname</code>参数指定本机的网卡</p><p>名称（千万要以实际环境为准，不要照抄书上的<code>ens160</code>），用<code>autoconnect no</code>参数将网络会话设置为</p><p>默认不被自动激活，以及用<code>ip4</code>及<code>gw4</code>参数手动指定网络的<code>IP</code>地址</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection add con-name company ifname ens160 autoconnect no type ethernet ip4 192.168.10.10/24 gw4 192.168.10.1</span>Connection <span class="token string">'company'</span> <span class="token punctuation">(</span>6ac8f3ad-0846-42f4-819a-e1ae84f4da86<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>使用<code>con-name</code>参数指定家庭所使用的网络会话名称<code>house</code>。因为要从外部<code>DHCP</code>服务器自动获得<code>IP</code>地</p><p>址，所以这里不需要进行手动指定</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection add con-name house type ethernet ifname ens160</span>Connection <span class="token string">'house'</span> <span class="token punctuation">(</span>d848242a-4bdf-4446-9079-6e12ab5d1f15<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在成功创建网络会话后，可以使用<code>nmcli</code>命令查看创建的所有网络会话</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection show</span>NAME     UUID                                  TYPE      DEVICE ens160   97486c86-6d1e-4e99-9aa2-68d3172098b2  ethernet  ens160 virbr0   e5fca1ee-7020-4c21-a65b-259d0f993b44  bridge    virbr0 company  6ac8f3ad-0846-42f4-819a-e1ae84f4da86  ethernet  --     house    d848242a-4bdf-4446-9079-6e12ab5d1f15  ethernet  --  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<code>nmcli</code>命令配置过的网络会话是永久生效的，这样当我们上班后，顺手启动<code>company</code>网络会话，网</p><p>卡信息就自动配置好了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up company </span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>ens160: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.10.88  netmask 255.255.255.0  broadcast 192.168.10.255        inet6 fe80::320e:a005:dfa1:431c  prefixlen 64  scopeid 0x20        ether 00:0c:29:7d:27:bf  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 66  bytes 5469 <span class="token punctuation">(</span>5.3 KiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 99  bytes 11255 <span class="token punctuation">(</span>10.9 KiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果大家使用的是虚拟机，请把虚拟机系统的网卡（网络适配器）切换成桥接模式，如图9所示。然后重</p><p>启虚拟机系统即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819110342395.png" alt="9 设置虚拟机网卡的模式"></p><blockquote><p>启动house家庭会话</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up house</span>Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>ens160: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.0.107  netmask 255.255.255.0  broadcast 192.168.0.255        inet6 fe80::f209:dc47:4004:3868  prefixlen 64  scopeid 0x20        ether 00:0c:29:7d:27:bf  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 22  bytes 6924 <span class="token punctuation">(</span>6.7 KiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 82  bytes 10582 <span class="token punctuation">(</span>10.3 KiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后续不需要网络会话时，直接用<code>delete</code>命令就能删除，特别简单</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection delete house</span>Connection <span class="token string">'house'</span> <span class="token punctuation">(</span>d848242a-4bdf-4446-9079-6e12ab5d1f15<span class="token punctuation">)</span> successfully deleted.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection delete company </span>Connection <span class="token string">'company'</span> <span class="token punctuation">(</span>6ac8f3ad-0846-42f4-819a-e1ae84f4da86<span class="token punctuation">)</span> successfully deleted.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-3、绑定两块网卡"><a href="#10-1-3、绑定两块网卡" class="headerlink" title="10.1.3、绑定两块网卡"></a>10.1.3、绑定两块网卡</h4><blockquote><p>在虚拟机系统中再添加一块网卡设备，请确保两块网卡都处在同一种网络连接模式中，如图10和图11所</p><p>示。<strong>处于相同模式的网卡设备才可以进行网卡绑定</strong>，否则这两块网卡无法互相传送数据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819110636479.png" alt="10 在虚拟机中再添加一块网卡设备"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819110652672.png" alt="11 确保两块网卡处在同一个网络连接中（即网卡模式相同"></p><blockquote><p>网卡绑定的理论知识类似于前面学习的<code>RAID</code>硬盘组，我们需要对参与绑定的网卡设备逐个进行“初始设</p><p>置”。需要注意的是，如图12所示，左侧的<code>ens160</code>及<code>ens192</code>这些原本独立的网卡设备此时需要被配置成</p><p>为一块“从属”网卡，服务于右侧的<code>bond0</code>“主”网卡，不应该再有自己的<code>IP</code>地址等信息。在进行了初始设</p><p>置之后，它们就可以支持网卡绑定</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819110824705.png" alt="12 网卡绑定信息示意图"></p><blockquote><p><strong>第一步、创建出一个bond网卡</strong></p></blockquote><blockquote><p>首先使用如下命令创建一个<code>bond</code>网卡。其中，命令与参数的意思是创建一个类型为<code>bond</code>（绑定）、名</p><p>称为<code>bond0</code>、网卡名为<code>bond0</code>的绑定设备，绑定模式为<code>balance-rr</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection add type bond con-name bond0 ifname bond0 bond.options "mode=balance-rr"</span>Connection <span class="token string">'bond0'</span> <span class="token punctuation">(</span>b37b720d-c5fa-43f8-8578-820d19811f32<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这里使用的是<code>balance-rr</code>网卡绑定模式，其中<code>rr</code>是<code>round-robin</code>的缩写，全称为轮循模式。</p><p><code>round-robin</code>的特点是<strong>会根据设备顺序依次传输数据包，提供负载均衡的效果</strong>，让带宽的性能更好一</p><p>些；而且一旦某个网卡发生故障，会马上切换到另外一台网卡设备上，保证网络传输不被中断。</p><p><code>active-backup</code>是另外一种比较常用的网卡绑定模式，它的特点是平时只有一块网卡正常工作，另一个</p><p>网卡随时待命，一旦工作中的网卡发生损坏，待命的网卡会自动顶替上去。可见，这种网卡绑定模式的</p><p>冗余能力比较强，因此也称为主备模式</p></blockquote><blockquote><p><strong>第二部、向<code>bond0</code>添加从属网卡</strong></p></blockquote><blockquote><p>刚才创建成功的<code>bond0</code>设备当前仅仅是个名称，里面并没有真正能为用户传输数据的网卡设备，接下</p><p>来使用下面的命令把<code>ens160</code>和<code>ens192</code>网卡添加进来。其中，<code>con-name</code>参数后面接的是从属网卡的名</p><p>称（可以随时设置）；<code>ifname</code>参数后面接的是两块网卡的名称。大家一定要以真实的网卡名称为准，不</p><p>要直接复制这里的名字</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection add type ethernet slave-type bond con-name bond0-port1 ifname ens160 master bond0</span>Connection <span class="token string">'bond0-port1'</span> <span class="token punctuation">(</span>8a2f77ee-cc92-4c11-9292-d577ccf8753d<span class="token punctuation">)</span> successfully added.<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection add type ethernet slave-type bond con-name bond0-port2 ifname ens192 master bond0</span>Connection <span class="token string">'bond0-port2'</span> <span class="token punctuation">(</span>b1ca9c47-3051-480a-9623-fbe4bf731a89<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第三步、配置<code>bond0</code>设备的网卡信息</strong></p></blockquote><blockquote><p>用<code>nmcli</code>命令依次配置网络的<code>IP</code>地址及子网掩码、网关、<code>DNS</code>、搜索域和手动配置等参数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection modify bond0 ipv4.addresses 192.168.10.10/24</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection modify bond0 ipv4.gateway 192.168.10.1</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection modify bond0 ipv4.dns 192.168.10.1</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection modify bond0 ipv4.dns-search linuxprobe.com</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection modify bond0 ipv4.method manual</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第四步、启动</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli connection up bond0</span>Connection successfully activated <span class="token punctuation">(</span>master waiting <span class="token keyword">for</span> slaves<span class="token punctuation">)</span> <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/22<span class="token punctuation">)</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nmcli device status</span>DEVICE      TYPE      STATE      CONNECTION  bond0       bond      connected  bond0       ens160      ethernet  connected  ens160      virbr0      bridge    connected  virbr0      ens192      ethernet  connected  bond0-port2 lo          loopback  unmanaged  --          virbr0-nic  tun       unmanaged  --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当用户接下来访问主机<code>IP</code>地址192.168.10.10时，主机实际上是由两块网卡在共同提供服务。可以在本</p><p>地主机执行<code>ping 192.168.10.10</code>命令检查网络的连通性。为了检验网卡绑定技术的自动备援功能，可</p><p>以突然在虚拟机硬件配置中随机移除一块网卡设备，如图13所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819111624891.png" alt="13 随机移除掉任意一块网卡"></p><blockquote><p>可以非常清晰地看到网卡切换的过程（一般只丢失一个数据包），另外一块网卡会继续为用户提供服</p><p>务。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping 192.168.10.10</span>PING 192.168.10.10 <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.109 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.102 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.066 msping: sendmsg: Network is unreachable64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>5 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.065 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>6 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.048 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>7 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.042 ms64 bytes from 192.168.10.10: icmp_seq<span class="token operator">=</span>8 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.079 ms^C--- 192.168.10.10 <span class="token function">ping</span> statistics ---8 packets transmitted, 7 received, 12% packet loss, <span class="token function">time</span> 7006msrtt min/avg/max/mdev <span class="token operator">=</span> 0.042/0.073/0.109/0.023 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于在<code>RHEL 8</code>系统中，网卡绑定切换间隔为1毫秒（也就是1/1000秒），因此发生一个丢包的情况大概</p><p>率不会出现。</p></blockquote><h3 id="10-2、远程控制服务"><a href="#10-2、远程控制服务" class="headerlink" title="10.2、远程控制服务"></a>10.2、远程控制服务</h3><h4 id="10-2-1、配置sshd服务"><a href="#10-2-1、配置sshd服务" class="headerlink" title="10.2.1、配置sshd服务"></a>10.2.1、配置<code>sshd</code>服务</h4><blockquote><p><code>sshd</code>是基于<code>SSH</code>协议开发的一款远程管理服务程序，不仅使用起来方便快捷，而且能够提供两种安全验</p><p>证的方法：</p><ul><li><strong>基于密码的验证</strong>—用账户和密码来验证登录；</li><li><strong>基于密钥的验证</strong>—需要在本地生成密钥对，然后把密钥对中的公钥上传至服务器，并与服务器中的公钥进行比较；该方式相较来说更安全。</li></ul></blockquote><blockquote><p><code>sshd</code>服务的配置信息保存在<code>/etc/ssh/sshd_config</code>文件中。</p></blockquote><blockquote><p><code>sshd</code>服务配置文件中包含的参数以及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>Port 22</code></td><td>默认的<code>sshd</code>服务端口</td></tr><tr><td><code>ListenAddress 0.0.0.0</code></td><td>设定<code>sshd</code>服务器监听的<code>IP</code>地址</td></tr><tr><td><code>Protocol 2</code></td><td><code>SSH</code>协议的版本号</td></tr><tr><td><code>HostKey /tc/ssh/ssh_host_key</code></td><td><code>SSH</code>协议版本为1时，<code>DES</code>私钥存放的位置</td></tr><tr><td><code>HostKey /etc/ssh/ssh_host_rsa_key</code></td><td><code>SSH</code>协议版本为2时，<code>RSA</code>私钥存放的位置</td></tr><tr><td><code>HostKey /etc/ssh/ssh_host_dsa_key</code></td><td><code>SSH</code>协议版本为2时，<code>DSA</code>私钥存放的位置</td></tr><tr><td><code>PermitRootLogin yes</code></td><td>设定是否允许<code>root</code>管理员直接登录</td></tr><tr><td><code>StrictModes yes</code></td><td>当远程用户的私钥改变时直接拒绝连接</td></tr><tr><td><code>MaxAuthTries 6</code></td><td>最大密码尝试次数</td></tr><tr><td><code>MaxSessions 10</code></td><td>最大终端数</td></tr><tr><td><code>PasswordAuthentication yes</code></td><td>是否允许密码验证</td></tr><tr><td><code>PermitEmptyPasswords no</code></td><td>是否允许空密码登录（很不安全）</td></tr></tbody></table><blockquote><p><code>sshd</code>服务实验机器简介</p></blockquote><table><thead><tr><th>主机地址</th><th>操作系统</th><th>作用</th></tr></thead><tbody><tr><td>192.168.10.10</td><td>Linux</td><td>服务器</td></tr><tr><td>192.168.10.20</td><td>Linux</td><td>客户端</td></tr></tbody></table><blockquote><p>接下来在客户端使用ssh命令远程连接服务器，其格式为“<code>ssh</code> [参数]主机<code>IP</code>地址”，要退出登录则执行</p><p><code>exit</code>命令。第一次访问时需要输入<code>yes</code>来确认对方主机的指纹信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:5d52kZi1la/FJK4v4jibLBZhLqzGqbJAskZiME6ZXpQ.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: 此处输入服务器管理员密码Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast login: Fri Jul 24 06:26:58 2020<span class="token punctuation">[</span>root@Server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@Server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token function">logout</span>Connection to 192.168.10.10 closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先使用Vim文本编辑器打开服务器上的<code>sshd</code>服务主配置文件，然后把第46行<code>#PermitRootLogin yes</code></p><p>参数前的井号（#）去掉，并把参数值<code>yes</code>改成<code>no</code>，这样就不再允许<code>root</code>管理员远程登录了</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/ssh/sshd_config </span> ………………省略部分输出信息……………… 43 <span class="token comment" spellcheck="true"># Authentication:</span> 44  45 <span class="token comment" spellcheck="true">#LoginGraceTime 2m</span> 46 PermitRootLogin no 47 <span class="token comment" spellcheck="true">#StrictModes yes</span> 48 <span class="token comment" spellcheck="true">#MaxAuthTries 6</span> 49 <span class="token comment" spellcheck="true">#MaxSessions 10</span> ………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>再次提醒的是，一般的服务程序并不会在配置文件修改之后立即获得最新的参数。如果想让新配置文件</p><p>生效，则需要手动重启相应的服务程序。最好也将这个服务程序加入到开机启动项中，这样系统在下一</p><p>次启动时，该服务程序便会自动运行，继续为用户提供服务</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart sshd</span><span class="token punctuation">[</span>root@Server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable sshd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>root@192.168.10.10's password:此处输入服务器管理员密码Permission denied, please try again.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>如果想使用Windows系统进行访问也没问题。首先确保网络是可以通信的，随后从<code>Xshell</code>、</p><p><code>PuTTY</code>、<code>SecureCRT</code>、<code>SSH Secure Shell Client</code>等工具中选择一个喜欢的登录工具，远程连接一下</p><p>试试看，效果如图14～图16所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819134059732.png" alt="14 远程登录输入账号名称"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819134119034.png" alt="15 远程登录输入账号密码"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819134135908.png" alt="16 远程登录成功界面"></p><h4 id="10-2-2、安全密钥验证"><a href="#10-2-2、安全密钥验证" class="headerlink" title="10.2.2、安全密钥验证"></a>10.2.2、安全密钥验证</h4><blockquote><p><strong>第1步</strong>：在客户端主机中生成“密钥对”，记住是客户端</p></blockquote><pre><code>[root@Client ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): 按回车键或设置密钥的存储路径Enter passphrase (empty for no passphrase): 直接按回车键或设置密钥的密码Enter same passphrase again: 再次按回车键或设置密钥的密码Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:kHa7B8V0nk63evABRrfZhxUpLM5Hx0I6gb7isNG9Hkg root@linuxprobe.comThe key's randomart image is:+---[RSA 2048]----+|          o.=.o.+||       . + =oB X ||      + o =oO O o||     . o + *.+ ..||      .ES . + o  ||     o.o.=   + . ||      =.o.o . o  ||     . . o.  .   ||        ..       |+----[SHA256]-----+</code></pre><blockquote><p><strong>第2步</strong>：把客户端主机中生成的公钥文件传送至远程服务器</p></blockquote><pre><code>[root@Client ~]# ssh-copy-id 192.168.10.10/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@192.168.10.10's password: 此处输入服务器管理员密码Number of key(s) added: 1Now try logging into the machine, with:   "ssh '192.168.10.10'"and check to make sure that only the key(s) you wanted were added.</code></pre><blockquote><p><strong>第4步</strong>：客户端尝试登录到服务器，此时无须输入密码也可成功登录，特别方便。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast failed login: Thu Jan 28 13:44:09 CST 2021 from 192.168.10.20 on ssh:nottyThere were 2 failed login attempts since the last successful login.Last login: Thu Jan 28 13:22:34 2021 from 192.168.10.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-3、远程传输命令"><a href="#10-2-3、远程传输命令" class="headerlink" title="10.2.3、远程传输命令"></a>10.2.3、远程传输命令</h4><blockquote><p><code>scp</code>（<code>secure copy</code>）是一个基于<code>SSH</code>协议在网络之间进行安全传输的命令，</p><p>其格式为“<code>scp</code> [参数]本地文件 远程账户@远程<code>IP</code>地址:远程目录”</p></blockquote><blockquote><p>  <code>scp</code>命令中可用的参数及作用</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-v</code></td><td>显示详细的连接进度</td></tr><tr><td><code>-P</code></td><td>指定远程主机的<code>sshd</code>端口号</td></tr><tr><td><code>-r</code></td><td>用于传送文件夹</td></tr><tr><td><code>-6</code></td><td>使用<code>IPv6</code>协议</td></tr></tbody></table><blockquote><p>由于<code>scp</code>命令是基于SSH协议进行文件传送的，而10.2.2节又设置好了密钥验证，因此当前在传输文件</p><p>时，并不需要账户和密码</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Client ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Welcome to LinuxProbe.Com" > readme.txt</span><span class="token punctuation">[</span>root@Client ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp /root/readme.txt 192.168.10.10:/home</span>readme.txt                                    100%   26    13.6KB/s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>此外，还可以使用<code>scp</code>命令把远程服务器上的文件下载到本地主机，</p><p>其命令格式为“<code>scp</code> [参数]远程用户@远程<code>IP</code>地址:远程文件 本地目录”</p></blockquote><pre class="line-numbers language-bsah"><code class="language-bsah">[root@Client ~]# scp 192.168.10.10:/etc/redhat-release /root[root@Client ~]# scp 192.168.10.10:/etc/redhat-release /rootredhat-release                                100%   45    23.6KB/s   00:00    [root@Client ~]# cat redhat-release Red Hat Enterprise Linux release 8.0 (Ootpa)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3、不间断会话服务"><a href="#10-3、不间断会话服务" class="headerlink" title="10.3、不间断会话服务"></a>10.3、不间断会话服务</h3><blockquote><p> <code>Terminal Multiplexer</code>（终端复用器，简称为<code>Tmux</code>）是一款能够实现多窗口远程控制的开源服务程</p><p>序。简单来说就是为了解决网络异常中断或为了同时控制多个远程终端窗口而设计的程序。用户还可以</p><p>使用<code>Tmux</code>服务程序同时在多个远程会话中自由切换，能够实现如下功能：</p><ul><li><strong>会话恢复</strong>：即便网络中断，也可让会话随时恢复，确保用户不会失去对远程会话的控制。</li><li><strong>多窗口</strong>：每个会话都是独立运行的，拥有各自独立的输入输出终端窗口，终端窗口内显示过的信息也将被分开隔离保存，以便下次使用时依然能看到之前的操作记录。</li><li><strong>会话共享</strong>：当多个用户同时登录到远程服务器时，便可以使用会话共享功能让用户之间的输入输出信息共享。</li></ul></blockquote><blockquote><p>在<code>RHEL 8</code>系统中，默认没有安装<code>Tmux</code>服务程序，因此需要配置软件仓库来安装它。<code>BaseOS</code>和</p><p><code>AppStream</code>都要配置，这里直接开始安装<code>Tmux</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install tmux</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.AppStream                                       3.1 MB/s <span class="token operator">|</span> 3.2 kB     00:00    BaseOS                                          2.7 MB/s <span class="token operator">|</span> 2.7 kB     00:00    Dependencies resolved.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Package         Arch              Version              Repository         Size<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Installing: tmux            x86_64            2.7-1.el8            BaseOS            317 kTransaction Summary<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Install  1 PackageTotal size: 317 kInstalled size: 770 kIs this ok <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>: yDownloading Packages:Running transaction checkTransaction check succeeded.Running transaction <span class="token function">test</span>Transaction <span class="token function">test</span> succeeded.Running transaction  Preparing        <span class="token keyword">:</span>                                                        1/1   Installing       <span class="token keyword">:</span> tmux-2.7-1.el8.x86_64                                  1/1   Running scriptlet: tmux-2.7-1.el8.x86_64                                  1/1   Verifying        <span class="token keyword">:</span> tmux-2.7-1.el8.x86_64                                  1/1 Installed products updated.Installed:  tmux-2.7-1.el8.x86_64                                                         Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-3-1、管理远程会话"><a href="#10-3-1、管理远程会话" class="headerlink" title="10.3.1、管理远程会话"></a>10.3.1、管理远程会话</h4><blockquote><p><code>Tmux</code>服务能做的事情非常多，例如<strong>创建不间断会话、恢复离线工作、将界面切分为不同的窗格、</strong></p><p><strong>共享会话等</strong>。下面直接敲击<code>tmux</code>命令进入会话窗口中，如图18所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135016978.png" alt="18 Tumx服务程序会话界面"></p><blockquote><p>不难发现，会话窗口的底部出现了一个绿色的状态栏，里面分别显示的是<strong>会话编号、名称、主机名及系</strong></p><p><strong>统时间</strong>。</p><p>退出会话窗口的命令是<code>exit</code>，敲击后即可返回到正常的终端界面，如图19所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135117169.png" alt="19 从会话窗口退回到终端界面"></p><blockquote><p> 会话窗口的编号是从0开始自动排序（即0、1、2、3、……），会话窗口数量少的时候还没关系，数量多</p><p>的时候区分起来就很麻烦了。接下来创建一个指定名称为<code>backup</code>的会话窗口。</p><p>当在命令行中敲下下面这条命令的一瞬间，屏幕会快速闪动一下，这时就已经进入<code>Tmux</code>会话中了，在</p><p>里面执行的任何操作都会被后台记录下来</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux new -s backup</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>假设我们突然要去忙其他事情，但会话窗口中执行的进程还不能被中断，此时便可以用<code>detach</code>参数将</p><p>会话隐藏到后台。虽然看起来与刚才没有不同，但实际上可以看到当前的会话正在工作中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux detach</span><span class="token punctuation">[</span>detached <span class="token punctuation">(</span>from session backup<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> 如果觉得每次输入<code>detach</code>参数都很麻烦，可以直接如图20所示关闭中断窗口（<strong>这与进行远程连接时突</strong></p><p><strong>然断网具有相同的效果</strong>），<code>Tmux</code>服务程序会自动帮我们进行保存。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135344059.png" alt="20 强行关闭会话窗口"></p><blockquote><p>这样操作之后，服务和进程都会一直在后台默默运行，不会因为窗口被关闭而造成数据丢失。</p><p>不放心的话可以查看一下后台有哪些会话</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux ls</span>backup: 1 windows <span class="token punctuation">(</span>created Thu Jan 28 15:57:40 2021<span class="token punctuation">)</span> <span class="token punctuation">[</span>80x23<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>回归到<code>backup</code>会话中的方法很简单，直接在<code>tmux</code>命令后面加<code>attach</code>和会话编号或会话名称就可以。</p><p>关闭会话窗口之前正在进行的一切工作状态都会被原原本本地呈现出来，丝毫不受影响</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux attach -t backup</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果不再需要使用这个<code>Tmux</code>会话了，也不用先在<code>tmux</code>命令后面添加<code>attach</code>，再执行<code>exit</code>命令退</p><p>出，而是可以直接使用kill命令杀死这个会话</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux attach -t backup</span><span class="token punctuation">[</span>exited<span class="token punctuation">]</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux ls</span>no server running on /tmp/tmux-0/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在日常的生产环境中，其实并不是必须先创建会话，然后再开始工作。可以直接使用<code>tmux</code>命令执行要运</p><p>行的指令，这样命令中的一切操作都会被记录下来，当命令执行结束后，后台会话也会自动结束</p></blockquote><h4 id="10-3-2、管理多窗格"><a href="#10-3-2、管理多窗格" class="headerlink" title="10.3.2、管理多窗格"></a>10.3.2、管理多窗格</h4><blockquote><p>先创建一个会话。使用“<code>tmux split-window</code>”命令可以创建上下切割的多窗格终端界面，如图21所示。</p><p>使用“<code>tmux split-window -h</code>”命令可以创建左右切割的多窗格终端界面，如图22所示<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135657933.png" alt="21 上下切割多窗格"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135709663.png" alt="22 上下切割多窗格"></p><blockquote><p> 创建多窗格终端界面后，我们同时做几件事情都不会乱了。如果觉得两个窗格还不够，那就再执行几次</p><p>上面的命令吧，退出时执行<code>exit</code>命令即可。</p><p>可以同时按下“<code>Ctrl + B +方向键</code>”调整窗格的尺寸</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>tmux select-pane -U</code></td><td>切换至上方的窗格</td></tr><tr><td><code>tmux select-pane -D</code></td><td>切换至下方的窗格</td></tr><tr><td><code>tmux select-pane -L</code></td><td>切换至左方的窗格</td></tr><tr><td><code>tmux select-pane -R</code></td><td>切换至右方的窗格</td></tr><tr><td><code>tmux swap-pane -U</code></td><td>将当前窗格与上方的窗格互换</td></tr><tr><td><code>tmux swap-pane -D</code></td><td>将当前窗格与下方的窗格互换</td></tr></tbody></table><blockquote><p>如图23所示，原本执行过<code>uptime</code>命令的窗格在下方，只需要在该窗格中执行“<code>tmux swap-pane -U</code>”命</p><p>令即可与上方窗格互换位置，效果如图24所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819135959016.png" alt="23 切换窗格位置前"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819140015789.png" alt="24 切换窗格位置后"></p><blockquote><p>在工作中，通过输入命令来切换窗格难免有些麻烦，实际上<code>Tmux</code>服务为用户提供了一系列快捷键来执</p><p>行窗格的切换。方法是先同时按下<code>Ctrl+B</code>组合键，然后松手后再迅速按下其他后续按键，而不是一起按</p><p>下。</p></blockquote><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><code>%</code></td><td>划分左右两个窗格</td></tr><tr><td><code>"</code></td><td>划分上下两个窗格</td></tr><tr><td><code>&lt;方向键&gt;</code></td><td>切换到上下左右相邻的一个窗格</td></tr><tr><td><code>;</code></td><td>切换至上一个窗格</td></tr><tr><td><code>o</code></td><td>切换至下一个窗格</td></tr><tr><td><code>{</code></td><td>将当前窗格与上一个窗格位置互换</td></tr><tr><td><code>}</code></td><td>将当前窗格与下一个窗格位置互换</td></tr><tr><td><code>x</code></td><td>关闭窗格</td></tr><tr><td><code>!</code></td><td>将当前窗格拆分成独立窗口</td></tr><tr><td><code>q</code></td><td>显示窗格编号</td></tr></tbody></table><h4 id="10-3-3、会话共享功能"><a href="#10-3-3、会话共享功能" class="headerlink" title="10.3.3、会话共享功能"></a>10.3.3、会话共享功能</h4><blockquote><p><code>Tmux</code>服务不仅可以确保用户在极端情况下也不丢失对系统的远程控制，保证了生产环境中远程工作的</p><p>不间断性，而且它还具有<strong>会话共享、分屏切割窗格、会话锁定</strong>等实用的功能。其中，<strong>会话共享功能</strong>是一</p><p>件很酷的事情，当多个用户同时控制服务器的时候，它可以<strong>把服务器屏幕内容共享出来</strong>。也就是说，每</p><p>个用户都能够看到相同的内容，还能一起同时操作。会话共享功能的技术拓扑如图27所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819140400862.png" alt="27 会话共享功能技术拓扑"></p><blockquote><p>要实现会话共享功能，首先使用<code>ssh</code>服务将客户端A远程连接到服务器，随后使用<code>Tmux</code>服务创建一个新</p><p>的会话窗口，名称为<code>share</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@client A ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:5d52kZi1la/FJK4v4jibLBZhLqzGqbJAskZiME6ZXpQ.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: 此处输入服务器管理员密码Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast login: Fri Jul 24 06:26:58 2020<span class="token punctuation">[</span>root@client A ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux new -s share</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后，使用<code>ssh</code>服务将客户端B也远程连接到服务器，并执行获取远程会话的命令。接下来，两台客户端</p><p>就能看到相同的内容了。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@client B ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 192.168.10.10</span>The authenticity of host <span class="token string">'192.168.10.10 (192.168.10.10)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:5d52kZi1la/FJK4v4jibLBZhLqzGqbJAskZiME6ZXpQ.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192.168.10.10<span class="token string">' (ECDSA) to the list of known hosts.root@192.168.10.10'</span>s password: 此处输入服务器管理员密码Activate the web console with: systemctl <span class="token function">enable</span> --now cockpit.socketLast login: Fri Jul 24 06:26:58 2020<span class="token punctuation">[</span>root@client B ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tmux attach-session -t share</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3、检索日志信息"><a href="#10-3、检索日志信息" class="headerlink" title="10.3、检索日志信息"></a>10.3、检索日志信息</h3><blockquote><p> 在<code>RHEL 8</code>系统中，<strong>默认的日志服务程序是</strong><code>rsyslog</code>。可以将<code>rsyslog</code>理解成之前的<code>syslogd</code>服务的增</p><p>强版本，它更加注重日志的安全性和性能指标。为了便于日后的检索，不同的日志信息会被写入到不同</p><p>的文件中。在<code>Linux</code>系统中，常见的日志文件如表所示</p></blockquote><table><thead><tr><th>文件路径及命令</th><th>作用</th></tr></thead><tbody><tr><td><code>/var/log/boot.log</code></td><td>系统开机自检事件及引导过程等信息</td></tr><tr><td><code>/var/log/lastlog</code></td><td>用户登录成功时间、终端名称及<code>IP</code>地址等信息</td></tr><tr><td><code>/var/log/btmp</code></td><td>记录登录失败的时间、终端名称及<code>IP</code>地址等信息</td></tr><tr><td><code>/var/log/messages</code></td><td>系统及各个服务的运行和报错信息</td></tr><tr><td><code>/var/log/secure</code></td><td>系统安全相关的信息</td></tr><tr><td><code>/var/log/wtmp</code></td><td>系统启动与关机等相关信息</td></tr></tbody></table><blockquote><p>在日常工作中，<code>/var/log/message</code>这个综合性的文件用得最多。在处理<code>Linux</code>系统中出现的各种故障</p><p>时，一般是最先发现故障的症状，而找到故障的原因则一定离不开日志信息的帮忙。从理论上讲，日志</p><p>文件分为下面3种类型：</p><ul><li><strong>系统日志</strong>：主要记录<strong>系统的运行情况和内核信息</strong>。</li><li><strong>用户日志</strong>：主要记录<strong>用户的访问信息，包含用户名、终端名称、登入及退出时间、来源<code>IP</code>地址和执行过的操作</strong>等。</li><li><strong>程序日志</strong>：稍微大一些的服务一般都会保存一份与其同名的日志文件，里面记录着服务运行过程中各种事件的信息；每个服务程序都有自己独立的日志文件，且格式相差较大。</li></ul></blockquote><blockquote><p> 上面提到，每个稍微大一些的服务都有自己独立的日志文件，为了让用户在检索信息时不至于特别麻</p><p>烦，<code>journalctl</code>命令应运而生。</p><p><code>journalctl</code>命令用于检索和管理系统日志信息，英文全称为“<code>journal control</code>”，</p><p>语法格式为“<code>journalctl</code>参数”。它可以根据<strong>事件、类型、服务名称等信息</strong>进行信息检索，从而大大提高</p><p>了日常排错的效率。<code>journalctl</code>命令的常见参数如表所示。</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-k</code></td><td>内核日志</td></tr><tr><td><code>-b</code></td><td>启动日志</td></tr><tr><td><code>-u</code></td><td>指定服务</td></tr><tr><td><code>-n</code></td><td>指定条数</td></tr><tr><td><code>-p</code></td><td>指定类型</td></tr><tr><td><code>-f</code></td><td>实时刷新（追踪日志）</td></tr><tr><td><code>--since</code></td><td>指定时间</td></tr><tr><td><code>--disk-usage</code></td><td>占用空间</td></tr></tbody></table><hr><blockquote><p>查看系统中最后5条日志信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl -n 5 </span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 13:39:51 CS<span class="token operator">></span>Jan 31 13:33:54 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started Fingerprint Authentic<span class="token operator">></span>Jan 31 13:33:55 localhost.localdomain gnome-keyring-daemon<span class="token punctuation">[</span>2533<span class="token punctuation">]</span>: couldn't init<span class="token operator">></span>Jan 31 13:33:55 localhost.localdomain gdm-password<span class="token punctuation">]</span><span class="token punctuation">[</span>4983<span class="token punctuation">]</span>: gkr-pam: unlocked lo<span class="token operator">></span>Jan 31 13:33:56 localhost.localdomain NetworkManager<span class="token punctuation">[</span>1203<span class="token punctuation">]</span>:   <span class="token punctuation">[</span>1612071236<span class="token operator">></span>Jan 31 13:39:51 localhost.localdomain cupsd<span class="token punctuation">[</span>1230<span class="token punctuation">]</span>: REQUEST localhost - - "POST <span class="token operator">></span>lines 1-6/6 <span class="token punctuation">(</span>END<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>还可以使用<code>-f</code>参数实时刷新日志的最新内容</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl -f </span>-- Logs begin at Fri 2020-07-24 05:59:38 CST. --Jan 31 13:33:54 localhost.localdomain dbus-daemon<span class="token punctuation">[</span>1058<span class="token punctuation">]</span>: <span class="token punctuation">[</span>system<span class="token punctuation">]</span> Activating via systemd: <span class="token function">service</span> name<span class="token operator">=</span><span class="token string">'net.reactivated.Fprint'</span> unit<span class="token operator">=</span><span class="token string">'fprintd.service'</span> requested by <span class="token string">':1.172'</span> <span class="token punctuation">(</span>uid<span class="token operator">=</span>0 pid<span class="token operator">=</span>2600 comm<span class="token operator">=</span><span class="token string">"/usr/bin/gnome-shell "</span> label<span class="token operator">=</span><span class="token string">"unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023"</span><span class="token punctuation">)</span>Jan 31 13:33:54 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting Fingerprint Authentication Daemon<span class="token punctuation">..</span>.Jan 31 13:33:54 localhost.localdomain dbus-daemon<span class="token punctuation">[</span>1058<span class="token punctuation">]</span>: <span class="token punctuation">[</span>system<span class="token punctuation">]</span> Successfully activated <span class="token function">service</span> <span class="token string">'net.reactivated.Fprint'</span>Jan 31 13:33:54 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started Fingerprint Authentication Daemon.………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>日志等级</th><th>说明介绍</th></tr></thead><tbody><tr><td><code>emerg</code></td><td>系统出现严重故障，内核崩溃等情况</td></tr><tr><td><code>alert</code></td><td>应立即修复的故障，数据库损坏等情况</td></tr><tr><td><code>crit</code></td><td>危险较高的故障，硬盘损坏导致程序运行失败的情况</td></tr><tr><td><code>err</code></td><td>一般危险的故障，某个服务启动或运行失败的情况</td></tr><tr><td><code>warning</code></td><td>警告信息，某个服务参数或功能错误的情况</td></tr><tr><td><code>notice</code></td><td>一般无危险的故障，只是需要处理的情况</td></tr><tr><td><code>info</code></td><td>通用性消息，给用户提示一些有用信息</td></tr><tr><td><code>debug</code></td><td>调试程序所产生的信息</td></tr><tr><td><code>none</code></td><td>没有优先级，不做日志记录</td></tr></tbody></table><hr><blockquote><p>看系统中较高级别的报错信息，可以在<code>journalctl</code>命令中用-p参数进行指定</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl -p crit</span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 15:06:07 CST. --Jul 24 05:59:38 localhost.localdomain kernel: Detected CPU family 6 model 158 stepping 13Jul 24 05:59:38 localhost.localdomain kernel: Warning: Intel Processor - this hardware has not undergone testing by Red Hat and might not be certified. Please consult https://hardware.redhat.com <span class="token keyword">for</span> certified hardware.………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>仅查询今日的日志信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl --since today</span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 15:10:01 CST. --Jan 31 12:48:25 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting update of the root trust anchor <span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain rsyslogd<span class="token punctuation">[</span>1392<span class="token punctuation">]</span>: imjournal: sd_journal_get_cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> fail<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain rsyslogd<span class="token punctuation">[</span>1392<span class="token punctuation">]</span>: imjournal: journal reloaded<span class="token punctuation">..</span>. <span class="token punctuation">[</span>v8.3<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started update of the root trust anchor for<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain sssd<span class="token punctuation">[</span>kcm<span class="token punctuation">]</span><span class="token punctuation">[</span>2764<span class="token punctuation">]</span>: Shutting down………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>仅查询最近1小时的日志信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl --since "-1 hour"</span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 15:10:01 CST. --Jan 31 14:25:36 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting dnf makecache<span class="token punctuation">..</span>.Jan 31 14:25:36 localhost.localdomain dnf<span class="token punctuation">[</span>5516<span class="token punctuation">]</span>: Updating Subscription Management repositories.Jan 31 14:25:36 localhost.localdomain dnf<span class="token punctuation">[</span>5516<span class="token punctuation">]</span>: Unable to <span class="token function">read</span> consumer identityJan 31 14:25:36 localhost.localdomain dnf<span class="token punctuation">[</span>5516<span class="token punctuation">]</span>: This system is not registered to Red Hat<span class="token operator">></span>Jan 31 14:25:36 localhost.localdomain dnf<span class="token punctuation">[</span>5516<span class="token punctuation">]</span>: Metadata cache refreshed recently.Jan 31 14:25:36 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started dnf makecache.………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>仅查询12点整到14点整的日志信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl --since "12:00" --until "14:00"</span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 15:10:01 CST. --Jan 31 12:48:25 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting update of the root trust anchor<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain rsyslogd<span class="token punctuation">[</span>1392<span class="token punctuation">]</span>: imjournal: sd_journal_get_cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain rsyslogd<span class="token punctuation">[</span>1392<span class="token punctuation">]</span>: imjournal: journal reloaded<span class="token punctuation">..</span>. <span class="token punctuation">[</span>v8.37<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started update of the root trust anchor<span class="token operator">></span>Jan 31 12:48:25 localhost.localdomain sssd<span class="token punctuation">[</span>kcm<span class="token punctuation">]</span><span class="token punctuation">[</span>2764<span class="token punctuation">]</span>: Shutting downJan 31 12:48:30 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting SSSD Kerberos Cache Manager<span class="token punctuation">..</span>.Jan 31 12:48:30 localhost.localdomain systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started SSSD Kerberos Cache Manager.Jan 31 12:48:30 localhost.localdomain sssd<span class="token punctuation">[</span>kcm<span class="token punctuation">]</span><span class="token punctuation">[</span>3981<span class="token punctuation">]</span>: Starting up………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>查询从2020年7月1日至2020年8月1日的日志信息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl --since "2020-07-01" --until "2020-08-01"</span>-- Logs begin at Fri 2020-07-24 05:59:38 CST, end at Sun 2021-01-31 15:10:01 CST. --Jul 24 05:59:38 localhost.localdomain kernel: Linux version 4.18.0-80.el8.x86_64 <span class="token punctuation">(</span>mockbuild<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: Command line: BOOT_IMAGE<span class="token operator">=</span><span class="token punctuation">(</span>hd0,msdos1<span class="token punctuation">)</span>/vmlinuz<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: Disabled fast string operationsJul 24 05:59:38 localhost.localdomain kernel: x86/fpu: Supporting XSAVE feature 0x001: <span class="token string">'x87>Jul 24 05:59:38 localhost.localdomain kernel: x86/fpu: Supporting XSAVE feature 0x002: '</span>SSE<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: x86/fpu: Supporting XSAVE feature 0x004: 'AVX<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: x86/fpu: xstate_offset<span class="token punctuation">[</span>2<span class="token punctuation">]</span>:  576, xstate_sizes<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: x86/fpu: Enabled xstate features 0x7, context<span class="token operator">></span>Jul 24 05:59:38 localhost.localdomain kernel: BIOS-provided physical RAM map:………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>在默认情况下，所有的日志信息都是混在一起的。如果想看具体某项服务的日志信息，可以使用</p><p><code>_SYSTEMD_UNIT</code>参数进行查询，服务名称的后面要有“<code>.service</code>”，这是标准服务名称的写法</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># journalctl -u sshd</span>-- Logs begin at Mon 2020-09-14 15:35:27 CST, end at Sun 2021-01-31 17:26:15 CST. --Nov 09 13:50:03 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1218<span class="token punctuation">]</span>: Server listening on 0.0.0.0 port 22.Nov 09 13:58:45 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1218<span class="token punctuation">]</span>: Received signal 15<span class="token punctuation">;</span> terminating.-- Reboot --Nov 09 13:59:29 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1127<span class="token punctuation">]</span>: Server listening on 0.0.0.0 port 22.Nov 09 14:12:12 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1262<span class="token punctuation">]</span>: Accepted password <span class="token keyword">for</span> root from 111.196Nov 09 14:12:12 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1262<span class="token punctuation">]</span>: pam_unix<span class="token punctuation">(</span>sshd:session<span class="token punctuation">)</span>: session openedNov 09 14:14:31 iZuf61gqesu0zmrcsma8x4Z sshd<span class="token punctuation">[</span>1127<span class="token punctuation">]</span>: Received signal 15<span class="token punctuation">;</span> terminating.………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、使用Apache服务部署静态网站"><a href="#十一、使用Apache服务部署静态网站" class="headerlink" title="十一、使用Apache服务部署静态网站"></a>十一、使用Apache服务部署静态网站</h2><hr><h3 id="11-1、网站服务程序"><a href="#11-1、网站服务程序" class="headerlink" title="11.1、网站服务程序"></a>11.1、网站服务程序</h3><blockquote><p>目前能够提供Web网络服务的程序有<code>IIS</code>、<code>Nginx</code>和<code>Apache等。</code>其中，<code>IIS</code>（<code>Internet Information </code></p><p><code>Service</code>，互联网信息服务）是<code>Windows</code>系统中默认的<code>Web</code>服务程序，这是一款图形化的网站管理工</p><p>具，不仅可以提供<code>Web</code>网站服务，还可以提供<code>FTP</code>、<code>NMTP</code>、<code>SMTP</code>等服务。</p></blockquote><blockquote><p>2004年10月4日，为俄罗斯知名门户站点而开发的<code>Web</code>服务程序<code>Nginx</code>横空出世。<code>Nginx</code>程序作为一款</p><p>轻量级的网站服务软件，因其稳定性和丰富的功能而快速占领服务器市场，但<code>Nginx</code>最被认可的还是其</p><p>系统资源消耗低且并发能力强的特性，因此得到了国内诸如新浪、网易、腾讯等门户网站的青睐</p></blockquote><blockquote><p> <code>Apache</code>程序是目前拥有很高市场占有率的<code>Web</code>服务程序之一，其跨平台和安全性广泛被认可且拥有快</p><p>速、可靠、简单的<code>API</code>扩展</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819154110969.png" alt="Apache软件基金会著名的Logo"></p><blockquote><p>第一步：动手安装<code>Apache</code>服务程序。注意，在使用<code>dnf</code>进行安装时，跟在命令后面的<code>Apache</code>服务的软</p><p>件包名称为<code>httpd</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install httpd</span>Updating Subscription Management repositories.Unable to <span class="token function">read</span> consumer identityThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.AppStream                                       3.1 MB/s <span class="token operator">|</span> 3.2 kB     00:00    BaseOS                                          2.7 MB/s <span class="token operator">|</span> 2.7 kB     00:00    Dependencies resolved.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Package            Arch   Version                   Repository           Size<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Installing: httpd              x86_64 2.4.37-10.module+el8+2764+7127e69e   AppStream 1.4 MInstalling dependencies: apr                x86_64 1.6.3-9.el8                          AppStream 125 k apr-util           x86_64 1.6.1-6.el8                          AppStream 105 k httpd-filesystem   noarch 2.4.37-10.module+el8+2764+7127e69e   AppStream  34 k httpd-tools        x86_64 2.4.37-10.module+el8+2764+7127e69e   AppStream 101 k mod_http2          x86_64 1.11.3-1.module+el8+2443+605475b7    AppStream 156 k redhat-logos-httpd noarch 80.7-1.el8                           BaseOS     25 kInstalling weak dependencies: apr-util-bdb       x86_64 1.6.1-6.el8                          AppStream  25 k apr-util-openssl   x86_64 1.6.1-6.el8                          AppStream  27 kEnabling module streams: httpd                     2.4                                                 Transaction Summary<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Install  9 PackagesTotal size: 2.0 MInstalled size: 5.4 MIs this ok <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>: yDownloading Packages:Running transaction checkTransaction check succeeded.Running transaction <span class="token function">test</span>Transaction <span class="token function">test</span> succeeded.………………省略部分输出信息………………                                    Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第二部： 启用<code>httpd</code>服务程序并将其加入到开机启动项中，使其能够随系统开机而运行，从而持续为</p><p>用户提供Web服务</p></blockquote><pre><code>[root@linuxprobe ~]# systemctl start httpd[root@linuxprobe ~]# systemctl enable httpdCreated symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.</code></pre><h3 id="11-2、配置服务文件参数"><a href="#11-2、配置服务文件参数" class="headerlink" title="11.2、配置服务文件参数"></a>11.2、配置服务文件参数</h3><blockquote><p><code>Linux</code>系统中的配置文件</p></blockquote><table><thead><tr><th>作用</th><th>文件名称</th></tr></thead><tbody><tr><td>服务目录</td><td><code>/etc/httpd</code></td></tr><tr><td>主配置文件</td><td><code>/etc/httpd/conf/httpd.conf</code></td></tr><tr><td>网站数据目录</td><td><code>/var/www/html</code></td></tr><tr><td>访问日志</td><td><code>/var/log/httpd/access_log</code></td></tr><tr><td>错误日志</td><td><code>/var/log/httpd/error_log</code></td></tr></tbody></table><blockquote><p>在<code>httpd</code>服务程序的主配置文件中，存在3种类型的信息：<strong>注释行信息、全局配置、区域配置</strong>，</p><p>如图1所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819165458040.png" alt="1 httpd服务主配置文件的参数结构"></p><blockquote><p>局配置参数就是一种全局性的配置参数，可作用于所有的子站点，既保证了子站点的正常访问，也有效</p><p>降低了频繁写入重复参数的工作量。区域配置参数则是单独针对每个独立的子站点进行设置的</p></blockquote><blockquote><p>配置<code>httpd</code>服务程序时最常用的参数以及用途描述</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>ServerRoot</code></td><td>服务目录</td></tr><tr><td><code>ServerAdmin</code></td><td>管理员邮箱</td></tr><tr><td><code>User</code></td><td>运行服务的用户</td></tr><tr><td><code>Group</code></td><td>运行服务的用户组</td></tr><tr><td><code>ServerName</code></td><td>网站服务器的域名</td></tr><tr><td><code>DocumentRoot</code></td><td>网站数据目录</td></tr><tr><td><code>Listen</code></td><td>监听的IP地址与端口号</td></tr><tr><td><code>DirectoryIndex</code></td><td>默认的索引页页面</td></tr><tr><td><code>ErrorLog</code></td><td>错误日志文件</td></tr><tr><td><code>CustomLog</code></td><td>访问日志文件</td></tr><tr><td><code>Timeout</code></td><td>网页超时时间，默认为300秒</td></tr></tbody></table><blockquote><p>从上表中可知，<code>DocumentRoot</code>参数用于定义网站数据的保存路径，其参数的默认值</p><p>是<code>/var/www/html</code>（即把网站数据存放到这个目录中）；而当前网站普遍的首页面名称是</p><p><code>index.html</code>，因此可以向<code>/var/www/html/index.html</code>文件中写入一段内容，替换掉<code>httpd</code></p><p>服务程序的默认首页面。该操作会立即生效</p></blockquote><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Welcome To LinuxProbe.Com" > /var/www/html/index.html </span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><blockquote><p>在执行上述操作之后，再在<code>Firefox</code>浏览器中刷新<code>httpd</code>服务程序，可以看到该程序的首页面内容已经</p><p>发生了改变，如图2所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220819174730311.png" alt="2 首页面内容已经被修改"></p><hr><blockquote><p>保存网站数据的目录修改为<code>/home/wwwroot</code>目录</p></blockquote><blockquote><p><strong>第1步</strong>：建立网站数据的保存目录，并创建首页文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /home/wwwroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "The New Web Directory" > /home/wwwroot/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> <strong>第2步</strong>：打开<code>httpd</code>服务程序的主配置文件，将约第122行用于定义网站数据保存路径的参数</p><p><code>DocumentRoot</code>修改为<code>/home/wwwroot</code>，同时还需要将约第127行与第134行用于定义目录权限的参数</p><p><code>Directory</code>后面的路径也修改为<code>/home/wwwroot</code>。配置文件修改完毕后即可保存并退出</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf </span>………………省略部分输出信息………………117 <span class="token comment" spellcheck="true">#</span>118 <span class="token comment" spellcheck="true"># DocumentRoot: The directory out of which you will serve your</span>119 <span class="token comment" spellcheck="true"># documents. By default, all requests are taken from this directory, but</span>120 <span class="token comment" spellcheck="true"># symbolic links and aliases may be used to point to other locations.</span>121 <span class="token comment" spellcheck="true">#</span>122 DocumentRoot <span class="token string">"/home/wwwroot"</span>123 124 <span class="token comment" spellcheck="true">#</span>125 <span class="token comment" spellcheck="true"># Relax access to content within /var/www.</span>126 <span class="token comment" spellcheck="true">#</span>127 <span class="token operator">&lt;</span>Directory <span class="token string">"/home/wwwroot"</span><span class="token operator">></span>128     AllowOverride None129     <span class="token comment" spellcheck="true"># Allow open access:</span>130     Require all granted131 <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>132 133 <span class="token comment" spellcheck="true"># Further relax access to the default document root:</span>134 <span class="token operator">&lt;</span>Directory <span class="token string">"/home/wwwroot"</span><span class="token operator">></span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：重新启动<code>httpd</code>服务程序并验证效果，浏览器刷新页面后的内容如图3所示。</p><p>奇怪！怎么提示权限不足了？</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822085442325.png" alt="4 Web页面提示权限不足"></p><h3 id="11-3、SELinux安全子系统"><a href="#11-3、SELinux安全子系统" class="headerlink" title="11.3、SELinux安全子系统"></a>11.3、<code>SELinux</code>安全子系统</h3><blockquote><p><code>SELinux</code>（<code>Security-Enhanced Linux</code>）是美国国家安全局在<code>Linux</code>开源社区的帮助下开发的一个强</p><p>制访问控制（<code>MAC，Mandatory Access Control</code>）的安<strong>全子系统</strong>。<code>Linux</code>系统使用<code>SELinux</code>技术的</p><p>目的是<strong>为了让各个服务进程都受到约束，使其仅获取到本应获取的资源</strong>。能够从多方面监控违法行为：</p><ul><li>对服务程序的功能进行限制（<code>SELinux</code>域限制可以确保服务程序做不了出格的事情）；</li><li>对文件资源的访问进行限制（<code>SELinux</code>安全上下文确保文件资源只能被其所属的服务程序进行访问）</li></ul></blockquote><blockquote><p><code>SELinux</code>服务有3种配置模式，具体如下：</p><ul><li><strong>enforcing</strong>：强制启用安全策略模式，将拦截服务的不合法请求。</li><li><strong>permissive</strong>：遇到服务越权访问时，只发出警告而不强制拦截。</li><li><strong>disabled</strong>：对于越权的行为不警告也不拦截。</li></ul></blockquote><blockquote><p>查看<code>SELinux</code>服务主配置文件中定义的默认状态</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">修改为enforcing。<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/selinux/config</span><span class="token comment" spellcheck="true"># This file controls the state of SELinux on the system.</span><span class="token comment" spellcheck="true"># SELINUX= can take one of these three values:</span><span class="token comment" spellcheck="true">#     enforcing - SELinux security policy is enforced.</span><span class="token comment" spellcheck="true">#     permissive - SELinux prints warnings instead of enforcing.</span><span class="token comment" spellcheck="true">#     disabled - No SELinux policy is loaded.</span>SELINUX<span class="token operator">=</span>enforcing<span class="token comment" spellcheck="true"># SELINUXTYPE= can take one of these three values:</span><span class="token comment" spellcheck="true">#     targeted - Targeted processes are protected,</span><span class="token comment" spellcheck="true">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><span class="token comment" spellcheck="true">#     mls - Multi Level Security protection.</span>SELINUXTYPE<span class="token operator">=</span>targeted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>SELinux</code>服务的主配置文件中，定义的是<code>SELinux</code>的默认运行状态，可以将其理解为系统重启后的状态，因此它不会在更改后立即生效。可以使用<code>getenforce</code>命令获得当前<code>SELinux</code>服务的运行模式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getenforce </span>Enforcing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>为了确认图5所示的结果是因为<code>SELinux</code>而导致的，可以用<code>setenforce </code>[0|1]命令修改<code>SELinux</code>当前的</p><p>运行模式（<strong>0为禁用，1为启用</strong>）。注意，<strong>这种修改只是临时的，在系统重启后就会失效</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setenforce 0</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getenforce</span>Permissive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>再次刷新网页，就会看到正常的网页内容了，如图5所示。可见，问题是出在了<code>SELinux</code>服务上</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822085642886.png" alt="5 页面内容按照预期显示"></p><blockquote><p><code>httpd</code>服务程序的功能是允许用户访问网站内容，因此<code>SELinux</code>肯定会默认放行用户对网站的请求操</p><p>作。但是，我们将网站数据的默认保存目录修改为<code>/home/wwwroot</code>，这就产生问题了</p></blockquote><blockquote><p>现在，把<code>SELinux</code>服务恢复到强制启用安全策略模式，然后分别查看原始网站数据的保存目录与当前网</p><p>站数据的保存目录是否拥有不同的<code>SELinux</code>安全上下文值</p></blockquote><blockquote><p> 在<code>ls</code>命令中，<code>-Z</code>参数用于查看文件的安全上下文值，<code>-d</code>参数代表对象是个文件夹</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setenforce 1</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -Zd /var/www/html</span>drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /var/www/html<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -Zd /home/wwwroot</span>drwxrwxrwx. root root unconfined_u:object_r:home_root_t:s0 /home/wwwroot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 文件上设置的<code>SELinux</code>安全上下文是由用户段、角色段以及类型段等多个信息项共同组成的：</p><ul><li>用户段<code>system_u</code>代表系统进程的身份</li><li>角色段<code>object_r</code>代表文件目录的角色</li><li>类型段<code>httpd_sys_content_t</code>代表网站服务的系统文件</li></ul></blockquote><blockquote><p> 针对当前这种情况，我们只需要使用<code>semanage</code>命令，将当前网站目录<code>/home/wwwroot</code>的<code>SELinux</code>安全</p><p>上下文修改为跟原始网站目录的一样就行了</p><p><code>semanage</code>命令用于管理<code>SELinux</code>的策略，英文全称为“<code>SELinux manage</code>”，</p><p>语法格式为“<code>semanage</code> [参数] [文件]”</p></blockquote><blockquote><p><code>SELinux</code>服务极大地提升了<code>Linux</code>系统的安全性，将用户权限牢牢地锁在笼子里。<code>semanage</code>命令不仅</p><p>能够像传统的<code>chcon</code>命令那样<strong>设置文件、目录的策略</strong>，还能够<strong>管理网络端口、消息接口</strong>（这些新特性将</p><p>在本章后文中涵盖）。使用<code>semanage</code>命令时，经常用到的几个参数及其作用如表所示</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-l</code></td><td>查询</td></tr><tr><td><code>-a</code></td><td>添加</td></tr><tr><td><code>-m</code></td><td>修改</td></tr><tr><td><code>-d</code></td><td>删除</td></tr></tbody></table><blockquote><p> 向新的网站数据目录中新添加一条<code>SELinux</code>安全上下文，让这个目录以及里面的所有文件能够被</p><p><code>httpd</code>服务程序访问到</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">bash<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> 在执行上述设置之后，还无法立即访问网站，还需要使用<code>restorecon</code>命令将设置好的<code>SELinux</code>安全上</p><p>下文立即生效。在使用<code>restorecon</code>命令时，可以加上<code>-Rv</code>参数对指定的目录进行递归操作，以及显示</p><p><code>SELinux</code>安全上下文的修改过程。最后，再次刷新页面，就可以正常看到网页内容了，结果如图6所示</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># restorecon -Rv /home/wwwroot/</span>Relabeled /home/wwwroot from unconfined_u:object_r:user_home_dir_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822090837052.png" alt="6 正常看到网页内容"></p><h3 id="11-4、个人用户主页功能"><a href="#11-4、个人用户主页功能" class="headerlink" title="11.4、个人用户主页功能"></a>11.4、个人用户主页功能</h3><blockquote><p><strong>第1步</strong>：</p><p>在<code>httpd</code>服务程序中，默认没有开启个人用户主页功能。为此，我们需要编辑下面的配置文件，然后在</p><p>第17行的<code>UserDir disabled</code>参数前面加上井号（#），表示让<code>httpd</code>服务程序开启个人用户主页功</p><p>能；同时再把第24行的<code>UserDir public_html</code>参数前面的井号（#）去掉（<code>UserDir</code>参数表示网站数据</p><p>在用户家目录中的保存目录名称，即<code>public_html</code>目录）。最后，在修改完毕后记得保存</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf.d/userdir.conf </span>  1 <span class="token comment" spellcheck="true">#</span>  2 <span class="token comment" spellcheck="true"># UserDir: The name of the directory that is appended onto a user's home</span>  3 <span class="token comment" spellcheck="true"># directory if a ~user request is received.</span>  4 <span class="token comment" spellcheck="true">#</span>  5 <span class="token comment" spellcheck="true"># The path to the end user account 'public_html' directory must be</span>  6 <span class="token comment" spellcheck="true"># accessible to the webserver userid.  This usually means that ~userid</span>  7 <span class="token comment" spellcheck="true"># must have permissions of 711, ~userid/public_html must have permissions</span>  8 <span class="token comment" spellcheck="true"># of 755, and documents contained therein must be world-readable.</span>  9 <span class="token comment" spellcheck="true"># Otherwise, the client will only receive a "403 Forbidden" message.</span> 10 <span class="token comment" spellcheck="true">#</span> 11 <span class="token operator">&lt;</span>IfModule mod_userdir.c<span class="token operator">></span> 12     <span class="token comment" spellcheck="true">#</span> 13     <span class="token comment" spellcheck="true"># UserDir is disabled by default since it can confirm the presence</span> 14     <span class="token comment" spellcheck="true"># of a username on the system (depending on home directory</span> 15     <span class="token comment" spellcheck="true"># permissions).</span> 16     <span class="token comment" spellcheck="true">#</span> 17     <span class="token comment" spellcheck="true"># UserDir disabled</span> 18  19     <span class="token comment" spellcheck="true">#</span> 20     <span class="token comment" spellcheck="true"># To enable requests to /~user/ to serve the user's public_html</span> 21     <span class="token comment" spellcheck="true"># directory, remove the "UserDir disabled" line above, and uncomment</span> 22     <span class="token comment" spellcheck="true"># the following line instead:</span> 23     <span class="token comment" spellcheck="true"># </span> 24       UserDir public_html 25 <span class="token operator">&lt;</span>/IfModule<span class="token operator">></span> 26  27 <span class="token comment" spellcheck="true">#</span> 28 <span class="token comment" spellcheck="true"># Control access to UserDir directories.  The following is an example</span> 29 <span class="token comment" spellcheck="true"># for a site where these directories are restricted to read-only.</span> 30 <span class="token comment" spellcheck="true">#</span> 31 <span class="token operator">&lt;</span>Directory <span class="token string">"/home/*/public_html"</span><span class="token operator">></span> 32     AllowOverride FileInfo AuthConfig Limit Indexes 33     Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec 34     Require method GET POST OPTIONS 35 <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第2步</strong>：在用户家目录中建立用于保存网站数据的目录及首页面文件。另外，还需要把家目录的权限修改</p><p>为755，保证其他人也有权限读取里面的内容</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># su - linuxprobe</span><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> public_html<span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token string">"This is linuxprobe's website"</span> <span class="token operator">></span> public_html/index.html<span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> -R 755 /home/linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：重新启动<code>httpd</code>服务程序，在浏览器的地址栏中输入网址，其格式为“网址/～用户名”（其中的波</p><p>浪号是必需的，而且网址、波浪号、用户名之间没有空格）。从理论上来讲，现在就可以看到用户的个</p><p>人网站了。出乎意料的是，系统显示报错页面，如图6所示。这一定还是<code>SELinux</code>惹的祸</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>linuxprobe@linuxprobe ~<span class="token punctuation">]</span>$ <span class="token keyword">exit</span><span class="token function">logout</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822100203807.png" alt="6 禁止访问用户的个人网站"></p><blockquote><p><strong>第4步</strong>：<code>httpd</code>服务程序在提供个人用户主页功能时，该用户的网站数据目录本身就应该是存放到与这</p><p>位用户对应的家目录中的，所以应该不需要修改家目录的<code>SELinux</code>安全上下文。但是，前文还讲到了</p><p><code>SELinux</code>域的概念。<code>SELinux</code>域确保服务程序不能执行违规的操作，只能本本分分地为用户提供服务。</p><p><code>httpd</code>服务中突然开启的这项个人用户主页功能到底有没有被<code>SELinux</code>域默认允许呢？</p><p>接下来使用<code>getsebool</code>命令查询并过滤出所有与HTTP协议相关的安全策略。其中，<code>off</code>为禁止状态，</p><p><code>on</code>为允许状态。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># getsebool -a | grep http</span>httpd_anon_write --<span class="token operator">></span> offhttpd_builtin_scripting --<span class="token operator">></span> onhttpd_can_check_spam --<span class="token operator">></span> offhttpd_can_connect_ftp --<span class="token operator">></span> offhttpd_can_connect_ldap --<span class="token operator">></span> offhttpd_can_connect_mythtv --<span class="token operator">></span> offhttpd_can_connect_zabbix --<span class="token operator">></span> offhttpd_can_network_connect --<span class="token operator">></span> offhttpd_can_network_connect_cobbler --<span class="token operator">></span> offhttpd_can_network_connect_db --<span class="token operator">></span> offhttpd_can_network_memcache --<span class="token operator">></span> offhttpd_can_network_relay --<span class="token operator">></span> offhttpd_can_sendmail --<span class="token operator">></span> offhttpd_dbus_avahi --<span class="token operator">></span> offhttpd_dbus_sssd --<span class="token operator">></span> offhttpd_dontaudit_search_dirs --<span class="token operator">></span> offhttpd_enable_cgi --<span class="token operator">></span> onhttpd_enable_ftp_server --<span class="token operator">></span> offhttpd_enable_homedirs --<span class="token operator">></span> offhttpd_execmem --<span class="token operator">></span> offhttpd_graceful_shutdown --<span class="token operator">></span> offhttpd_manage_ipa --<span class="token operator">></span> offhttpd_mod_auth_ntlm_winbind --<span class="token operator">></span> offhttpd_mod_auth_pam --<span class="token operator">></span> offhttpd_read_user_content --<span class="token operator">></span> offhttpd_run_ipa --<span class="token operator">></span> offhttpd_run_preupgrade --<span class="token operator">></span> offhttpd_run_stickshift --<span class="token operator">></span> offhttpd_serve_cobbler_files --<span class="token operator">></span> offhttpd_setrlimit --<span class="token operator">></span> offhttpd_ssi_exec --<span class="token operator">></span> offhttpd_sys_script_anon_write --<span class="token operator">></span> offhttpd_tmp_exec --<span class="token operator">></span> offhttpd_tty_comm --<span class="token operator">></span> offhttpd_unified --<span class="token operator">></span> offhttpd_use_cifs --<span class="token operator">></span> offhttpd_use_fusefs --<span class="token operator">></span> offhttpd_use_gpg --<span class="token operator">></span> offhttpd_use_nfs --<span class="token operator">></span> offhttpd_use_openstack --<span class="token operator">></span> offhttpd_use_sasl --<span class="token operator">></span> offhttpd_verify_dns --<span class="token operator">></span> offmysql_connect_http --<span class="token operator">></span> offnamed_tcp_bind_http_port --<span class="token operator">></span> offprosody_bind_http_port --<span class="token operator">></span> off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>大致确定后就可以用<code>setsebool</code>命令来修改<code>SELinux</code>策略中各条规则的布尔值了。大家一定要记得在</p><p><code>setsebool</code>命令后面加上-P参数，让修改后的<code>SELinux</code>策略规则永久生效且立即生效。随后刷新网页</p></blockquote><pre><code>[root@linuxprobe ~]# setsebool -P httpd_enable_homedirs=on[root@linuxprobe ~]# firefox</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822102552667.png" alt="7 正常看到个人用户主页面中的内容"></p><blockquote><p>网站中添加密码功能</p></blockquote><blockquote><p><strong>第1步</strong>：先使用<code>htpasswd</code>命令生成密码数据库。<code>-c</code>参数表示第一次生成；后面再分别添加密码数据库的</p><p>存放文件，以及验证要用到的用户名称（该用户不必是系统中已有的本地账户）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># htpasswd -c /etc/httpd/passwd linuxprobe</span>New password:此处输入用于网页验证的密码Re-type new password:再输入一遍进行确认Adding password <span class="token keyword">for</span> user linuxprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：继续编辑个人用户主页功能的配置文件。把第31～37行的参数信息修改成下列内容，其中以井号</p><p>（#）开头的内容为添加的注释信息，可将其忽略。随后保存并退出配置文件，重启<code>httpd</code>服务程序即可</p><p>生效</p></blockquote><pre><code>[root@linuxprobe ~]# vim /etc/httpd/conf.d/userdir.conf………………省略部分输出信息……………… 27 # 28 # Control access to UserDir directories.  The following is an example 29 # for a site where these directories are restricted to read-only. 30 # 31 &lt;Directory "/home/*/public_html"&gt; 32     AllowOverride all         #刚刚生成出的密码验证文件保存路径 33     authuserfile "/etc/httpd/passwd"         #当用户访问网站时的提示信息 34     authname "My privately website"        #验证方式为口令模式 35     authtype basic        #访问网站时需要验证的用户名称 36     require user linuxprobe 37 &lt;/Directory&gt;[root@linuxprobe ~]# systemctl restart httpd</code></pre><blockquote><p> 此后，当用户再想访问某个用户的个人网站时，就必须输入账户和密码才能正常访问了。另外，验证时</p><p>使用的账户和密码是用<code>htpasswd</code>命令生成的专门用于网站登录的账户和密码，而不是系统中的账户和密</p><p>码，请不要搞错了。登录界面如图8与图9所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822102914222.png" alt="9 需要输入账户和密码才能访问"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822102926690.png" alt="9 口令验证成功"></p><h3 id="11-5、虚拟网站主机功能"><a href="#11-5、虚拟网站主机功能" class="headerlink" title="11.5、虚拟网站主机功能"></a>11.5、虚拟网站主机功能</h3><blockquote><p><code>Apache</code>的虚拟主机功能是服务器基于用户请求的不同<code>IP</code>地址、主机域名或端口号，提供多个网站同时</p><p>为外部提供访问服务的技术。如图10所示，用户请求的资源不同，最终获取到的网页内容也各不相同。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822103134718.png" alt="10 用户请求网站资源"></p><h4 id="11-5-1、基于IP地址"><a href="#11-5-1、基于IP地址" class="headerlink" title="11.5.1、基于IP地址"></a>11.5.1、基于<code>IP</code>地址</h4><blockquote><p>如果一台服务器有多个<code>IP</code>地址，而且每个<code>IP</code>地址与服务器上部署的每个网站一一对应，这样当用户请</p><p>求访问不同的<code>IP</code>地址时，会访问到不同网站的页面资源。而且，每个网站都有一个独立的<code>IP</code>地址，这</p><p>对搜索引擎优化也大有裨益。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822104051891.png" alt="11 使用nmtui命令配置网络参数"></p><blockquote></blockquote><pre><code>[root@linuxprobe ~]# nmcli connection up ens160 Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)</code></pre><blockquote><p> <strong>第1步</strong>：分别在<code>/home/wwwroot</code>中创建用于保存不同网站数据的3个目录，并向其中分别写入网站的首页</p><p>文件。每个首页文件中应有明确区分不同网站内容的信息，方便稍后能更直观地检查效果</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/10</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/20</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/30</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "IP:192.168.10.10" > /home/wwwroot/10/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "IP:192.168.10.20" > /home/wwwroot/20/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "IP:192.168.10.30" > /home/wwwroot/30/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：从<code>httpd</code>服务的配置文件中大约第132行处开始，分别追加写入3个基于<code>IP</code>地址的虚拟主机网站</p><p>参数，然后保存并退出。记得需要重启<code>httpd</code>服务，这些配置才生效。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>………………省略部分输出信息………………132 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10<span class="token operator">></span>133     DocumentRoot /home/wwwroot/10134     ServerName www.linuxprobe.com135     <span class="token operator">&lt;</span>Directory /home/wwwroot/10<span class="token operator">></span>136     AllowOverride None137     Require all granted138     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>139 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>  140 <span class="token operator">&lt;</span>VirtualHost 192.168.10.20<span class="token operator">></span>141     DocumentRoot /home/wwwroot/20142     ServerName www.linuxcool.com143     <span class="token operator">&lt;</span>Directory /home/wwwroot/20<span class="token operator">></span>144     AllowOverride None145     Require all granted146     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>147 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>  148 <span class="token operator">&lt;</span>VirtualHost 192.168.10.30<span class="token operator">></span>149     DocumentRoot /home/wwwroot/30150     ServerName www.linuxdown.com151     <span class="token operator">&lt;</span>Directory /home/wwwroot/30<span class="token operator">></span>152     AllowOverride None153     Require all granted154     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>155 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：此时访问网站，则会看到<code>httpd</code>服务程序的默认首页面中显示“权限不足”。大家现在应该立刻就</p><p>反应过来—这是<code>SELinux</code>在捣鬼。由于当前的<code>/home/wwwroot</code>目录及里面的网站数据目录的<code>SELinux</code>安</p><p>全上下文与网站服务不吻合，因此<code>httpd</code>服务程序无法获取到这些网站数据目录。我们需要手动把新的</p><p>网站数据目录的<code>SELinux</code>安全上下文设置正确（见前文的实验），并使用<code>restorecon</code>命令让新设置的</p><p><code>SELinux</code>安全上下文立即生效，这样就可以立即看到网站的访问效果了，如图12所示</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># restorecon -Rv /home/wwwroot</span>Relabeled /home/wwwroot from unconfined_u:object_r:user_home_dir_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/10 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/10/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/20 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/20/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/30 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/30/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822105544516.png" alt="13 基于不同的IP地址访问虚拟主机网站"></p><h4 id="11-5-2、基于主机名"><a href="#11-5-2、基于主机名" class="headerlink" title="11.5.2、基于主机名"></a>11.5.2、基于主机名</h4><blockquote><p>当服务器无法为每个网站都分配一个独立<code>IP</code>地址的时候，可以尝试让<code>Apache</code>自动识别用户请求的域</p><p>名，从而根据不同的域名请求来传输不同的内容。在这种情况下的配置更加简单，只需要保证位于生产</p><p>环境中的服务器上有一个可用的<code>IP</code>地址（这里以192.168.10.10为例）就可以了。由于当前还没有介绍</p><p>如何配置<code>DNS</code>解析服务，因此需要手动定义<code>IP</code>地址与域名之间的对应关系。<code>/etc/hosts</code>是Linux系统中</p><p>用于强制把某个主机域名解析到指定<code>IP</code>地址的配置文件。简单来说，只要这个文件配置正确，即使网络</p><p>参数中没有<code>DNS</code>信息也依然能够将域名解析为某个<code>IP</code>地址。</p></blockquote><blockquote><p><strong>第1步</strong>：手动定义<code>IP</code>地址与域名之间对应关系的配置文件，保存并退出后会立即生效。可以通过分别</p><p><code>ping</code>这些域名来验证域名是否已经成功解析为<code>IP</code>地址</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/hosts</span>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.10.10   www.linuxprobe.com www.linuxcool.com www.linuxdown.com<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping -c 4 www.linuxprobe.com</span>PING www.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.070 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.077 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.061 ms64 bytes from www.linuxprobe.com <span class="token punctuation">(</span>192.168.10.10<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.069 ms--- www.linuxprobe.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 2999msrtt min/avg/max/mdev <span class="token operator">=</span> 0.061/0.069/0.077/0.008 ms<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> <strong>第2步</strong>：分别在<code>/home/wwwroot</code>中创建用于保存不同网站数据的3个目录，并向其中分别写入网站的首页</p><p>文件。每个首页文件中应有明确区分不同网站内容的信息，方便稍后能更直观地检查效果</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/linuxcool</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/linuxdown</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.linuxprobe.com" > /home/wwwroot/linuxprobe/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.linuxcool.com" > /home/wwwroot/linuxcool/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.linuxdown.com" > /home/wwwroot/linuxdown/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：从<code>httpd</code>服务的配置文件中大约第132行处开始，分别追加写入3个基于主机名的虚拟主机网站</p><p>参数，然后保存并退出。记得需要重启<code>httpd</code>服务，这些配置才生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>………………省略部分输出信息………………132 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10<span class="token operator">></span>133     Documentroot /home/wwwroot/linuxprobe134     ServerName www.linuxprobe.com135     <span class="token operator">&lt;</span>Directory /home/wwwroot/linuxprobe<span class="token operator">></span>136     AllowOverride None137     Require all granted138     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>139 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span> 140 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10<span class="token operator">></span>141     Documentroot /home/wwwroot/linuxcool142     ServerName www.linuxcool.com143     <span class="token operator">&lt;</span>Directory /home/wwwroot/linuxcool<span class="token operator">></span>144     AllowOverride None145     Require all granted146     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>147 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span> 148 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10<span class="token operator">></span>149     Documentroot /home/wwwroot/linuxdown150     ServerName www.linuxdown.com151     <span class="token operator">&lt;</span>Directory /home/wwwroot/linuxdown<span class="token operator">></span>152     AllowOverride None153     Require all granted154     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>155 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：因为当前的网站数据目录还是在<code>/home/wwwroot</code>目录中，因此还是必须要正确设置网站数据</p><p>目录文件的<code>SELinux</code>安全上下文，使其与网站服务功能相吻合。最后记得用<code>restorecon</code>命令让新配置</p><p>的<code>SELinux</code>安全上下文立即生效，这样就可以立即访问到虚拟主机网站了，效果如图14所示</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxprobe</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxprobe/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxcool</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxcool/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxdown</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/linuxdown/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># restorecon -Rv /home/wwwroot</span>Relabeled /home/wwwroot from unconfined_u:object_r:user_home_dir_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxprobe from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxprobe/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxcool from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxcool/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxdown from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/linuxdown/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822110014348.png" alt="14 基于主机域名访问虚拟主机网站"></p><h4 id="11-5-2、基于端口号"><a href="#11-5-2、基于端口号" class="headerlink" title="11.5.2、基于端口号"></a>11.5.2、基于端口号</h4><blockquote><p>基于端口号的虚拟主机功能可以让用户通过指定的端口号来访问服务器上的网站资源。在使用<code>Apache</code>配</p><p>置虚拟网站主机功能时，基于端口号的配置方式是最复杂的。因此我们不仅要考虑<code>httpd</code>服务程序的配</p><p>置因素，还需要考虑到<code>SELinux</code>服务对新开设端口的监控。一般来说，使用80、443、8080等端口号来</p><p>提供网站访问服务是比较合理的，如果使用其他端口号则会受到<code>SELinux</code>服务的限制。</p></blockquote><blockquote><p><strong>第1步</strong>：分别在<code>/home/wwwroot</code>中创建用于保存不同网站数据的3个目录，并向其中分别写入网站的</p><p>首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便稍后能更直观地检查效果。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/6111</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/6222</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /home/wwwroot/6333</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port:6111" > /home/wwwroot/6111/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port:6222" > /home/wwwroot/6222/index.html</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port:6333" > /home/wwwroot/6333/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第2步</strong>：在<code>httpd</code>服务配置文件的第46行～48行分别添加用于监听6111、6222和6333端口的参数。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf </span>………………省略部分输出信息………………  37 <span class="token comment" spellcheck="true"># Listen: Allows you to bind Apache to specific IP addresses and/or</span> 38 <span class="token comment" spellcheck="true"># ports, instead of the default. See also the </span> 39 <span class="token comment" spellcheck="true"># directive.</span> 40 <span class="token comment" spellcheck="true">#</span> 41 <span class="token comment" spellcheck="true"># Change this to Listen on specific IP addresses as shown below to </span> 42 <span class="token comment" spellcheck="true"># prevent Apache from glomming onto all bound IP addresses.</span> 43 <span class="token comment" spellcheck="true">#</span> 44 <span class="token comment" spellcheck="true">#Listen 12.34.56.78:80</span> 45 Listen 80 46 Listen 6111 47 Listen 6222 48 Listen 6333………………省略部分输出信息……………… <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第3步</strong>：从<code>httpd</code>服务的配置文件中大约第134行处开始，分别追加写入3个基于端口号的虚拟主机网</p><p>站参数，然后保存并退出。记得需要重启<code>httpd</code>服务，这些配置才生效。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>………………省略部分输出信息……………… 134 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10:6111<span class="token operator">></span>135     DocumentRoot /home/wwwroot/6111136     ServerName www.linuxprobe.com137     <span class="token operator">&lt;</span>Directory /home/wwwroot/6111<span class="token operator">></span>138     AllowOverride None139     Require all granted140     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span> 141 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>142 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10:6222<span class="token operator">></span>143     DocumentRoot /home/wwwroot/6222144     ServerName www.linuxcool.com145     <span class="token operator">&lt;</span>Directory /home/wwwroot/6222<span class="token operator">></span>146     AllowOverride None147     Require all granted148     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>149 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>150 <span class="token operator">&lt;</span>VirtualHost 192.168.10.10:6333<span class="token operator">></span>151     DocumentRoot /home/wwwroot/6333152     ServerName www.linuxdown.com153     <span class="token operator">&lt;</span>Directory /home/wwwroot/6333<span class="token operator">></span>154     AllowOverride None155     Require all granted156     <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>157 <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>………………省略部分输出信息………………<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第4步</strong>：因为我们把网站数据目录存放在<code>/home/wwwroot</code>目录中，因此还是必须要正确设置网站数据目</p><p>录文件的<code>SELinux</code>安全上下文，使其与网站服务功能相吻合。最后记得用<code>restorecon</code>命令让新配置的</p><p><code>SELinux</code>安全上下文立即生效</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6333</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6333/*</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># restorecon -Rv /home/wwwroot/</span>Relabeled /home/wwwroot from unconfined_u:object_r:user_home_dir_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6111 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6111/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6222 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6222/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6333 from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0Relabeled /home/wwwroot/6333/index.html from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span>Job <span class="token keyword">for</span> httpd.service failed because the control process exited with error code.See <span class="token string">"systemctl status httpd.service"</span> and <span class="token string">"journalctl -xe"</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在妥当配置<code>httpd</code>服务程序和<code>SELinux</code>安全上下文并重启<code>httpd</code>服务后，竟然出现报错信息。这是因为</p><p><code>SELinux</code>服务检测到6111、6222和6333端口原本不属于<code>Apache</code>服务应该需要的资源，但现在却以</p><p><code>httpd</code>服务程序的名义监听使用了，所以<code>SELinux</code>会拒绝使用<code>Apache</code>服务使用这3个端口。可以使用</p><p><code>semanage</code>命令查询并过滤出所有与<code>HTTP</code>协议相关且<code>SELinux</code>服务允许的端口列表</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage port -l | grep http</span>http_cache_port_t            tcp      8080, 8118, 8123, 10001-10010http_cache_port_t            udp      3130http_port_t                  tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000pegasus_http_port_t          tcp      5988pegasus_https_port_t         tcp      5989<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>第5步</strong>：<code>SELinux</code>允许的与<code>HTTP</code>协议相关的端口号中默认没有包含6111、6222和6333，因此需要将</p><p>这3个端口号手动添加进去。该操作会立即生效，而且在系统重启过后依然有效。设置好后再重启<code>httpd</code></p><p>服务程序，然后就可以看到网页内容了，结果如图15所示。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage port -a -t http_port_t -p tcp 6111</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage port -a -t http_port_t -p tcp 6222</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage port -a -t http_port_t -p tcp 6333</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># semanage port -l | grep http</span>http_cache_port_t            tcp      8080, 8118, 8123, 10001-10010http_cache_port_t            udp      3130http_port_t                  tcp      6333, 6222, 6111, 80, 81, 443, 488, 8008, 8009, 8443, 9000pegasus_http_port_t          tcp      5988pegasus_https_port_t         tcp      5989<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822110625027.png" alt="15 基于端口号访问虚拟主机网站"></p><h3 id="11-6、Apache的访问控制"><a href="#11-6、Apache的访问控制" class="headerlink" title="11.6、Apache的访问控制"></a>11.6、<code>Apache</code>的访问控制</h3><blockquote><p><code>Apache</code>可以基于源主机名、源<code>IP</code>地址或源主机上的浏览器特征等信息对网站上的资源进行访问控制。</p><p>它通过<code>Allow</code>指令允许某个主机访问服务器上的网站资源，通过<code>Deny</code>指令实现禁止访问。在允许或禁止</p><p>访问网站资源时，还会用到<code>Order</code>指令，这个指令用来定义<code>Allow</code>或<code>Deny</code>指令<strong>起作用的顺序</strong>，其匹配原</p><p>则是按照顺序进行匹配，若匹配成功则执行后面的默认指令。比如“<code>Order Allow, Deny</code>”表示先将源主</p><p>机与允许规则进行匹配，若匹配成功则允许访问请求，反之则拒绝访问请求</p></blockquote><blockquote><p><strong>第1步</strong>：先在服务器上的网站数据目录中新建一个子目录，并在这个子目录中创建一个包含<code>Successful</code></p><p>单词的首页文件。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /var/www/html/server</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Successful" > /var/www/html/server/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> <strong>第2步</strong>：打开<code>httpd</code>服务的配置文件，在第161行后面添加下述规则来限制源主机的访问。这段规则的</p><p>含义是允许使用<code>Firefox</code>浏览器的主机访问服务器上的首页文件，除此之外的所有请求都将被拒绝。使</p><p>用<code>Firefox</code>浏览器的访问效果如图16所示，使用其他浏览器的访问效果如图17所示。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>………………省略部分输出信息………………161 <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/html/server"</span><span class="token operator">></span>162     SetEnvIf User-Agent <span class="token string">"Firefox"</span> ff<span class="token operator">=</span>1163     Order allow,deny164     Allow from env<span class="token operator">=</span>ff165 <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>………………省略部分输出信息………………<span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span class="token punctuation">[</span>root@linuxprobe ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firefox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822111102325.png" alt="16 火狐浏览器成功访问"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822111119030.png" alt="17 其它浏览器访问失败"></p><blockquote><p>除了匹配源主机的浏览器特征之外，还可以通过匹配源主机的<code>IP</code>地址进行访问控制。例如，我们只允许</p><p><code>IP</code>地址为<code>192.168.10.20</code>的主机访问网站资源，那么就可以在<code>httpd</code>服务配置文件的第161行后面添加</p><p>下述规则。这样在重启<code>httpd</code>服务程序后再用本机（即服务器，其<code>IP</code>地址为192.168.10.10）来访问网</p><p>站的首页面时就会提示访问被拒绝了，如图18所示</p></blockquote><pre><code>[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf………………省略部分输出信息………………161 &lt;Directory "/var/www/html/server"&gt;162     Order allow,deny 163     Allow from 192.168.10.20164 &lt;/Directory&gt;………………省略部分输出信息………………[root@linuxprobe ~]# systemctl restart httpd[root@linuxprobe ~]# firefox</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/linux/image-20220822111301271.png" alt="18 因IP地址不符合要求而被拒绝访问"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 创建虚拟机</title>
      <link href="/2022/07/26/vmware/"/>
      <url>/2022/07/26/vmware/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本片文章仅供参考</p></blockquote><h2 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h2><hr><pre class="line-numbers language-tex"><code class="language-tex">安装环境: Windows7/win10 VMware版本: VMware Workstation11/14/15或者Parallels Desktop(PD),Linux版本: CentOS 7.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、WMware介绍"><a href="#2、WMware介绍" class="headerlink" title="2、WMware介绍"></a>2、<code>WMware</code>介绍</h2><hr><pre class="line-numbers language-tex"><code class="language-tex">VMware是一个虚拟PC的软件，可以在现有的操作系统上虚拟出一个新的硬件环境，相当于模拟出一台新的PC ，以此来实现在一台机器上真正同时运行两个独立的操作系统 。 VMware主要特点：    1.不需要分区或重新开机就能在同一台PC上使用两种以上的操作系统     2.本机系统可以与虚拟机系统网络通信     3.可以设定并且随时修改虚拟机操作系统的硬件环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、安装注意事项"><a href="#3、安装注意事项" class="headerlink" title="3、安装注意事项"></a>3、安装注意事项</h2><hr><pre class="line-numbers language-tex"><code class="language-tex">1.安装路径下不能有中文，空格，特殊符号（尽量不要安装在C盘）,路径不能太深 2.如果想要卸载重新安装，双击其安装文件，选择卸载软件，尽量不要手动去删除其安装目录 3.如果使用手动删除VMware的安装目录进行卸载，要自行删除注册表中VMware的相关信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、CentOS-的安装"><a href="#4、CentOS-的安装" class="headerlink" title="4、CentOS 的安装"></a>4、<code>CentOS</code> 的安装</h2><hr><h3 id="4-1、准备事项"><a href="#4-1、准备事项" class="headerlink" title="4.1、准备事项"></a>4.1、准备事项</h3><hr><blockquote><p>安装包： [CentOS-7-x86_64-Minimal-1908.iso](........\VmWare-hcs\CentOS 7 -64\CentOS-7-x86_64-Minimal-1908.iso) </p></blockquote><hr><pre class="line-numbers language-tex"><code class="language-tex">注意！！：    在bios里面设置虚拟化 将 inter technology vatuializtion设置成 enable    虚拟机：VMware workstation     虚拟机版本：CentOS-7-x86_64-Minimal-1908.iso     电脑: 笔记本或者台式机     系统版本: win7 win8.1 win10 mac 等操作系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、安装"><a href="#4-2、安装" class="headerlink" title="4.2、安装"></a>4.2、安装</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151246490.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151313686.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151654634.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151832365.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151925196.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726151945072.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152003598.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152025726.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152047365.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152157889.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152217309.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152234809.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152252437.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152310007.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152328247.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152345810.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152411361.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152428137.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152442710.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152456750.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152512000.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152527383.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152545327.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152606997.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152623788.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152638734.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152656177.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152712497.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152727561.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152744901.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152803913.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152820636.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152838044.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152853457.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152911373.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152928719.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152942354.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726152955221.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220726153010873.png"></p><h2 id="5、网络相关操作"><a href="#5、网络相关操作" class="headerlink" title="5、网络相关操作"></a>5、网络相关操作</h2><hr><h3 id="5-1、修改IP地址"><a href="#5-1、修改IP地址" class="headerlink" title="5.1、修改IP地址"></a>5.1、修改<code>IP</code>地址</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33 BOOTPROTO<span class="token operator">=</span>static static 静态ip dhcp 动态ip none 不设置,默认静态ip HWADDR<span class="token operator">=</span>00:0C:29:3D:B0:9B 电脑的mac地址,建议去掉 UUID<span class="token operator">=</span>6f89eb5e-bff4-4f6b-a045-b7722bd188fc 电脑的UID 建议去掉 ONBOOT<span class="token operator">=</span>yes 是否开机自动使用 nm_controlled<span class="token operator">=</span>yes 设置network manager的参数,实时生效,修改后无需要重启网卡立即生效。建议 删掉IPADDR<span class="token operator">=</span>192.168.10.111 NETMASK<span class="token operator">=</span>255.255.255.0 或者 PREFIX<span class="token operator">=</span>24 GATEWAY<span class="token operator">=</span>192.168.10.2 <span class="token comment" spellcheck="true">#网段2任意，IP地址2固定，网段为vmnet8的设置的IP网段 </span>DNS1<span class="token operator">=</span>114.114.114.114 国内的DNSDNS2<span class="token operator">=</span>8.8.8.8 谷歌的DNS defroute<span class="token operator">=</span>yes 默认的路由 建议删掉 IPV4_FAILURE_FATAL<span class="token operator">=</span>yes 如果为yes，则ipv4配置失败禁用设备 建议删掉<span class="token comment" spellcheck="true">##重启网络生效：</span><span class="token function">service</span> network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2、关闭防火墙"><a href="#5-2、关闭防火墙" class="headerlink" title="5.2、关闭防火墙"></a>5.2、关闭防火墙</h3><h4 id="5-2-1、即时生效，重启后复原"><a href="#5-2-1、即时生效，重启后复原" class="headerlink" title="5.2.1、即时生效，重启后复原"></a>5.2.1、即时生效，重启后复原</h4><pre class="line-numbers language-bash"><code class="language-bash">eg: 关闭:systemctl stop firewalld eg: 开启:systemctl start firewalld eg: 查看状态:systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2、非即时生效，重启后永久性生效"><a href="#5-2-2、非即时生效，重启后永久性生效" class="headerlink" title="5.2.2、非即时生效，重启后永久性生效"></a>5.2.2、非即时生效，重启后永久性生效</h4><pre class="line-numbers language-bash"><code class="language-bash">eg: 关闭:systemctl disable firewalld eg: 开启:systemctl <span class="token function">enable</span> firewalld eg: 查看状态:systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3、关闭NetworkManager"><a href="#5-2-3、关闭NetworkManager" class="headerlink" title="5.2.3、关闭NetworkManager"></a>5.2.3、关闭<code>NetworkManager</code></h4><blockquote><p><code>NetworkManager</code>服务是管理和监控网络设置的守护进程，<code>CentOS7</code>更加注重使用<code>NetworkManager</code>服</p><p>务来实现网络的配置和管理,它是一个动态的，事件驱动的网络管理服务。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">常用管理命令： systemctl status NetworkManagersystemctl start NetworkManagersystemctl stop NetworkManager systemctl disable NetworkManagersystemctl <span class="token function">enable</span> NetworkManage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、修改主机名"><a href="#6、修改主机名" class="headerlink" title="6、修改主机名"></a>6、修改主机名</h2><hr><pre class="line-numbers language-bash"><code class="language-bash">hostnamectl set-hostname hostnewname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7、修改映射关系"><a href="#7、修改映射关系" class="headerlink" title="7、修改映射关系"></a>7、修改映射关系</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##修改主机名和ip地址之间的映射关系 </span><span class="token comment" spellcheck="true">##执行 vim /etc/hosts 进入hosts文件,加入代码 主机ip 主机名 </span>192.168.10.111 lagou01 192.168.10.112 lagou02 192.168.10.113 lagou03 <span class="token comment" spellcheck="true">##最好让主机名字,虚拟机名字,网络连接名字保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、免密登入"><a href="#8、免密登入" class="headerlink" title="8、免密登入"></a>8、免密登入</h2><hr><h3 id="8-1、在第一台机器上生成一对钥匙，公钥和私钥"><a href="#8-1、在第一台机器上生成一对钥匙，公钥和私钥" class="headerlink" title="8.1、在第一台机器上生成一对钥匙，公钥和私钥"></a>8.1、在第一台机器上生成一对钥匙，公钥和私钥</h3><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220802171709798.png"></p><h3 id="8-2、当前用户的宿主目录下的-ssh目录多了两个文件"><a href="#8-2、当前用户的宿主目录下的-ssh目录多了两个文件" class="headerlink" title="8.2、当前用户的宿主目录下的.ssh目录多了两个文件"></a>8.2、当前用户的宿主目录下的<code>.ssh</code>目录多了两个文件</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/VMware/image-20220802171743076.png"></p><h3 id="8-3、-将公钥拷贝给要免密码登录的机器"><a href="#8-3、-将公钥拷贝给要免密码登录的机器" class="headerlink" title="8.3、 将公钥拷贝给要免密码登录的机器"></a>8.3、 将公钥拷贝给要免密码登录的机器</h3><blockquote><p>需要输入密码</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id user@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> CentOs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse 的使用教程（二）</title>
      <link href="/2022/07/18/clickhouse-er/"/>
      <url>/2022/07/18/clickhouse-er/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文章仅供参考</p></blockquote><h2 id="一、ClickHouse-的数据类型"><a href="#一、ClickHouse-的数据类型" class="headerlink" title="一、ClickHouse 的数据类型"></a>一、<code>ClickHouse</code> 的数据类型</h2><hr><h3 id="1、整形"><a href="#1、整形" class="headerlink" title="1、整形"></a>1、整形</h3><blockquote><p>固定长度的整形，包括<strong>有符号整型</strong>或<strong>无符号整型</strong>。</p><p>整型范围（-2n-1~2n-1-1）：</p></blockquote><table><thead><tr><th>名称</th><th>范围</th><th>大小(字节)</th></tr></thead><tbody><tr><td>Int8</td><td>[-128 : 127]</td><td>1</td></tr><tr><td>Int16</td><td>[-32768 : 32767]</td><td>2</td></tr><tr><td>Int31</td><td>[-2147483648 : 2147483647]</td><td>3</td></tr><tr><td>Int64</td><td>[-9223372036854775808 : 9223372036854775807]</td><td>4</td></tr></tbody></table><blockquote><p>无符号整型范围（0 ~ 2n -1）</p></blockquote><table><thead><tr><th>名称</th><th>范围</th><th>大小（字节）</th></tr></thead><tbody><tr><td>Ulnt8</td><td>[0 : 255]</td><td>1</td></tr><tr><td>Ulnt16</td><td>[0 : 65535]</td><td>2</td></tr><tr><td>Ulnt32</td><td>[0 : 4294967295]</td><td>3</td></tr><tr><td>Ulnt64</td><td>[0 : 18446744073709551615]</td><td>4</td></tr></tbody></table><h3 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h3><table><thead><tr><th>名称</th><th><strong>有效精度（位数）</strong></th><th>大小（字节）</th><th>传统</th></tr></thead><tbody><tr><td>Float32</td><td>7</td><td>4</td><td>Float</td></tr><tr><td>Float64</td><td>16</td><td>8</td><td>Double</td></tr></tbody></table><blockquote><p>建议尽可能以整数形式存储数据。例如，将固定精度的数字转换为整数值，如时间用毫秒为单位表示，因为浮点型进</p><p>行计算时可能引起四舍五入的误差。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">0.9</span> ┌───────minus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>─┐ │ <span class="token number">0.09999999999999998</span> │ └─────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>与标准<code>SQL</code>相比，<code>ClickHouse</code> 支持以下类别的浮点数：</p><p>Inf-正无穷：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span> ┌─divide<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>─┐ │ inf │ └──────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>-Inf-负无穷：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span> ┌─divide<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>─┐│ <span class="token operator">-</span>inf │ └──────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>NaN-非数字</code>：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> ┌─divide<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>─┐ │ nan │ └──────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Decimal"><a href="#3、Decimal" class="headerlink" title="3、Decimal"></a>3、Decimal</h3><blockquote><p>格式：Decimal（P,S)</p><p>P:代表精度，决定总位数（正数部分+小数部分），取值范围0-38</p><p>S:代表规模，决定小数位数，取值范围是0-P</p><p><code>ClickHouse</code>对Decimal提供三种简写：</p><p><code>Decimal32</code>，<code>Decimal64</code>，<code>Decimal128</code></p></blockquote><h4 id="3-1、相加、减精度取大"><a href="#3-1、相加、减精度取大" class="headerlink" title="3.1、相加、减精度取大"></a>3.1、相加、减精度取大</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> ┌─plus<span class="token punctuation">(</span>toDecimal64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>─┐ │ <span class="token number">4.0000</span> │ └────────────────────────────────────────────┘ <span class="token keyword">SELECT</span> toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> ┌─minus<span class="token punctuation">(</span>toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>─┐ │ <span class="token number">2.0000</span> │ └─────────────────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2、相乘精度取和"><a href="#3-2、相乘精度取和" class="headerlink" title="3.2、相乘精度取和"></a>3.2、相乘精度取和</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> ┌─multiply<span class="token punctuation">(</span>toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>─┐ │ <span class="token number">8.000000</span> │ └────────────────────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3、相除精度取被除数"><a href="#3-3、相除精度取被除数" class="headerlink" title="3.3、相除精度取被除数"></a>3.3、相除精度取被除数</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">/</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> ┌─divide<span class="token punctuation">(</span>toDecimal32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toDecimal32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>─┐ │ <span class="token number">2.0000</span> │└──────────────────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、字符串"><a href="#4、字符串" class="headerlink" title="4、字符串"></a>4、字符串</h3><h4 id="4-1、String"><a href="#4-1、String" class="headerlink" title="4.1、String"></a>4.1、<code>String</code></h4><blockquote><p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。</p></blockquote><h4 id="4-2、FixedString-n"><a href="#4-2、FixedString-n" class="headerlink" title="4.2、FixedString(n)"></a>4.2、<code>FixedString(n)</code></h4><blockquote><p>固定长度 N 的字符串，N 必须是严格的正自然数。当服务端读取长度小于 N 的字符串时候，通过在字符串末尾添加空字节来达到 N 字节长度。 当服务端读取长度大于 N 的字符串时候，将返回错误消息。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">SELECTtoFixedString<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LENGTH<span class="token punctuation">(</span>toFixedString<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> LENGTH ┌─toFixedString<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>─┬─LENGTH─┐ │ <span class="token number">abc</span> │ <span class="token number">5</span> │└─────────────────────────┴────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3、UUID"><a href="#4-3、UUID" class="headerlink" title="4.3、UUID"></a>4.3、<code>UUID</code></h4><blockquote><p><code>ClickHouse</code>将<code>UUID</code>这种在传统数据库中充当主键的类型直接做成了数据类型</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> UUID_TEST <span class="token punctuation">(</span>     <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> UUID<span class="token punctuation">,</span>     <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> String <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> Memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、枚举类型"><a href="#5、枚举类型" class="headerlink" title="5、枚举类型"></a>5、枚举类型</h3><blockquote><p>包括 <code>Enum8</code> 和 <code>Enum16</code> 类型。<code>Enum</code> 保存 ‘string’= integer 的对应关系。</p><p><code>Enum8</code> 用 ‘String’=<code>Int8</code>对描述。</p><p><code>Enum16</code> 用 ‘String’= <code>Int16</code> 对描述。</p></blockquote><h3 id="6、数组"><a href="#6、数组" class="headerlink" title="6、数组"></a>6、数组</h3><blockquote><p>Array(T)：由 T 类型元素组成的数组。</p><p>可以使用array函数来创建数组：array(T)</p><p>也可以使用方括号：<code>ClickHouse</code>能够自动推断数据类型 []</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span> toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--数组中可以有不同的数据类型，但是需要相互兼容。 ┌─x─────┬─toTypeName(array(1, 2))─┐ </span>│ <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> │ Array<span class="token punctuation">(</span>UInt8<span class="token punctuation">)</span> │ └───────┴─────────────────────────┘ <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.002</span> sec<span class="token punctuation">.</span> :<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span> toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span> ┌─x─────┬─toTypeName<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>─┐ │ <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> │ Array<span class="token punctuation">(</span>UInt8<span class="token punctuation">)</span> │ └───────┴────────────────────┘<span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.002</span> sec<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是声明表字段的时候，需要指明数据类型：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Array_test <span class="token punctuation">(</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> Array<span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> memory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、元组"><a href="#7、元组" class="headerlink" title="7、元组"></a>7、元组</h3><blockquote><p><code>Tuple(T1, T2, ...)</code>：元组，其中每个元素都有单独的类型。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> tuple<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span> toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">SELECT</span>     <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span>         toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     ┌─x───────┬─toTypeName<span class="token punctuation">(</span>tuple<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>─┐ │ <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> │ Tuple<span class="token punctuation">(</span>UInt8<span class="token punctuation">,</span> String<span class="token punctuation">)</span> │ └─────────┴───────────────────────────┘ <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.021</span> sec<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、Date-DateTime"><a href="#8、Date-DateTime" class="headerlink" title="8、Date,DateTime"></a>8、<code>Date</code>,<code>DateTime</code></h3><blockquote><p>日期类型，用两个字节存储，表示从 1970-01-01 (无符号) 到当前的日期值。</p></blockquote><h3 id="9、布尔类型"><a href="#9、布尔类型" class="headerlink" title="9、布尔类型"></a>9、布尔类型</h3><blockquote><p>没有单独的类型来存储布尔值。可以使用 <code>UInt8</code> 类型，取值限制为 0 或 1。 </p></blockquote><h2 id="二、表引擎"><a href="#二、表引擎" class="headerlink" title="二、表引擎"></a>二、表引擎</h2><hr><blockquote><p>表引擎（即表的类型）决定了：</p><p>① 数据的存储方式和位置，写到哪里以及从哪里读取数据</p><p>② 支持哪些查询以及如何支持。</p><p>③ 并发数据访问。</p><p>④ 索引的使用（如果存在）。</p><p>⑤ 是否可以执行多线程请求。</p><p>⑥ 数据复制参数。</p><p><code>ClickHouse</code>的表引擎有很多，下面介绍其中几种，对其他引擎有兴趣的可以去查阅官方文档：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/">https://clickhouse.yandex/docs/zh/operations/table_engines/</a></p></blockquote><h3 id="1、日志"><a href="#1、日志" class="headerlink" title="1、日志"></a>1、日志</h3><hr><h4 id="1-1、TinyLog"><a href="#1-1、TinyLog" class="headerlink" title="1.1、TinyLog"></a>1.1、<code>TinyLog</code></h4><blockquote><p>最简单的表引擎，用于将数据存储在磁盘上。每列都存储在单独的压缩文件中，写入时，数据将附加到文件末尾。</p><p>该引擎没有并发控制</p><ul><li>如果同时从表中读取和写入数据，则读取操作将抛出异常；</li><li>如果同时写入多个查询中的表，则数据将被破坏。</li></ul><p>这种表引擎的典型用法是 <code>write-once</code>：<strong>首先只写入一次数据，然后根据需要多次读取。</strong></p></blockquote><h4 id="1-2、Log"><a href="#1-2、Log" class="headerlink" title="1.2、Log"></a>1.2、Log</h4><blockquote><p><code>Log</code>与 <code>TinyLog </code>的不同之处在于，«标记» 的小文件与列文件存在一起。这些标记写在每个数据块上，并且包含偏移量，这些偏移量指示从哪里开始读取文件以便跳过指定的行数。这使得可以在多个线程中读取表数据。<strong>对于并发数据访问，可以同时执行读取操作，而写入操作则阻塞读取和其它写入</strong>。<code>Log</code> 引擎不支持索引。同样，如果写入表失败，则该表将被破坏，并且从该表读取将返回错误。**<code>Log</code> 引擎适用于临时数**据，<code>write-once</code> 表以及测试或演示目的。</p></blockquote><h4 id="1-3、StripeLog"><a href="#1-3、StripeLog" class="headerlink" title="1.3、StripeLog"></a>1.3、<code>StripeLog</code></h4><blockquote><p>该引擎属于日志引擎系列。请在日志引擎系列文章中（<a href="https://clickhouse.tech/docs/zh/engines/table-engines/log-family/%EF%BC%89%E6%9F%A5%E7%9C%8B%E5%BC%95%E6%93%8E%E7%9A%84%E5%85%B1%E5%90%8C%E5%B1%9E%E6%80%A7%E5%92%8C%E5%B7%AE%E5%BC%82%E3%80%82">https://clickhouse.tech/docs/zh/engines/table-engines/log-family/）查看引擎的共同属性和差异。</a></p><p>写数据，<code>StripeLog</code><strong>引擎不支持</strong> **<code>ALTER UPDATE </code><strong>和</strong> <code>ALTER DELETE </code><strong>操作</strong>。</p><p><code>ClickHouse</code> 为每张表写入以下文件：</p><ul><li><p><code>data.bin</code> — 数据文件。</p></li><li><p><code>index.mrk</code> — 带标记的文件。标记包含了已插入的每个数据块中每列的偏移量。</p></li></ul><p>读数据</p><p>带标记的文件使得 <code>ClickHouse</code> 可以并行的读取数据。这意味着 <code>SELECT</code> 请求返回行的顺序是不可预测的。使用<code>ORDER BY </code>子句对行进行排序。</p><p><code>ClickHouse</code> 在查询数据时使用多线程。每个线程读取单独的数据块并在完成后独立的返回结果行。这样的结果是，大多数情况下，<strong>输出中块的顺序和输入时相应块的顺序是不同的</strong>。</p></blockquote><h3 id="2、Memory内存引擎"><a href="#2、Memory内存引擎" class="headerlink" title="2、Memory内存引擎"></a>2、<code>Memory</code>内存引擎</h3><hr><blockquote><p>内存引擎，数据以未压缩的原始形式直接保存在内存当中，<strong>服务器重启数据就会消失</strong>。读写操作不会相互阻塞，不支持索引。简单查询下有非常非常高的性能表现（超过10G/s）。</p><p>一般用到它的地方不多，除了用来测试，就是在需要非常高的性能，同时数据量又不太大（上限大概 1 亿行）的场景。</p></blockquote><h3 id="3、Merge-引擎"><a href="#3、Merge-引擎" class="headerlink" title="3、Merge 引擎"></a>3、Merge 引擎</h3><hr><blockquote><p><code>Merge</code> 引擎 (不要跟 <code>MergeTree</code> 引擎混淆) 本身不存储数据，但可用于同时从任意多个其他的表中读取数据。 读是自动并行的，不支持写入。读取时，那些被真正读取到数据的表的索引（如果有的话）会被使用。</p><p><code>Merge</code> 引擎的参数：一个数据库名和一个用于匹配表名的正则表达式。</p></blockquote><blockquote><p>案例：先建<code>t1</code>，<code>t2</code>，<code>t3</code>三个表，然后用 <code>Merge</code> 引擎的 t 表再把它们链接起来。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">:<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token punctuation">(</span>id UInt16<span class="token punctuation">,</span> name String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>TinyLog<span class="token punctuation">;</span> :<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> t2 <span class="token punctuation">(</span>id UInt16<span class="token punctuation">,</span> name String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>TinyLog<span class="token punctuation">;</span> :<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> t3 <span class="token punctuation">(</span>id UInt16<span class="token punctuation">,</span> name String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>TinyLog<span class="token punctuation">;</span>:<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> t <span class="token punctuation">(</span>id UInt16<span class="token punctuation">,</span> name String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">Merge</span><span class="token punctuation">(</span>currentDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'^t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>:<span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> :<span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t2<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>:<span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t3<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'i am in t3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span> ┌─id─┬─name─┐ │ <span class="token number">2</span> │second │└────┴──────┘ ┌─id─┬─name──┐│ <span class="token number">1</span> │ <span class="token keyword">first</span> │ └────┴───────┘ ┌─id─┬─name───────┐│ <span class="token number">3</span> │ i am <span class="token operator">in</span> t3 │ └────┴────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、MerrgeTree"><a href="#4、MerrgeTree" class="headerlink" title="4、MerrgeTree"></a>4、<code>MerrgeTree</code></h3><hr><blockquote><p><code>Clickhouse</code> 中最强大的表引擎当属 <code>MergeTree</code> （合并树）引擎及该系列（<code>*MergeTree</code>）中的其他引擎。</p><p><code>MergeTree</code> 引擎系列的基本理念如下。当你有巨量数据要插入到表中，你要高效地一批批写入数据片段，并希望这些数据片段在后台按照一定规则合并。相比在插入时不断修改（重写）数据进存储，这种策略会高效很多。</p></blockquote><h4 id="4-1、MergeTree的创建方式"><a href="#4-1、MergeTree的创建方式" class="headerlink" title="4.1、MergeTree的创建方式"></a>4.1、<code>MergeTree</code>的创建方式</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">db</span><span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span> <span class="token punctuation">(</span>     name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">INDEX</span> index_name1 expr1 <span class="token keyword">TYPE</span> type1<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> GRANULARITY value1<span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> index_name2 expr2 <span class="token keyword">TYPE</span> type2<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> GRANULARITY value2 <span class="token punctuation">)</span>    <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr     <span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> expr<span class="token punctuation">]</span>     <span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span>     <span class="token punctuation">[</span>TTL expr <span class="token punctuation">[</span><span class="token keyword">DELETE</span><span class="token operator">|</span><span class="token keyword">TO</span> <span class="token keyword">DISK</span> <span class="token string">'xxx'</span><span class="token operator">|</span><span class="token keyword">TO</span> VOLUME <span class="token string">'xxx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> mt_table<span class="token punctuation">(</span>    <span class="token keyword">date</span> <span class="token keyword">Date</span><span class="token punctuation">,</span>    id UInt8<span class="token punctuation">,</span>    name String<span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> MergeTree <span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMM<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mt_table3<span class="token punctuation">(</span>     <span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span> <span class="token keyword">Date</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>id<span class="token punctuation">`</span> UInt8<span class="token punctuation">,</span>     <span class="token punctuation">`</span>name<span class="token punctuation">`</span> String <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token comment" spellcheck="true">##插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> mt_table <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-05-01'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> mt_table <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-06-01'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> mt_table <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-05-03'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>/var/lib/clickhouse/data/default/mt_tree</code>下可以看到：</p><ul><li><code>*.bin</code>是按列保存数据的文件</li><li><code>*.mrk</code>保存块偏移量</li><li><code>primary.idx</code>保存主键索引</li></ul><p>关键字解释：</p><ul><li><code>ENGINE</code> - 引擎名和参数。<code> ENGINE = MergeTree()</code>. <code>MergeTree</code> 引擎没有参数。</li><li><code>PARTITION BY</code> — 分区键 。要按月分区，可以使用表达式 <code>toYYYYMM(date_column) </code>，这里的 <code>date_column</code> 是一个 Date 类型的列。这里该分区名格式会是 “YYYYMM” 这样。</li><li><code>ORDER BY</code> — 表的排序键。<strong>必选</strong>！可以是一组列的元组或任意的表达式。 例如: <code>ORDER BY (CounterID, EventDate)</code> 。</li><li><code>PRIMARY KEY</code> - 主键，如果要设成 跟排序键不相同。默认情况下主键跟排序键（由 <code>ORDER BY </code>子句指定）相同。 因此，大部分情况下不需要再专门指定一个<code>PRIMARY KEY </code>子句。</li><li><code>SAMPLE BY</code> — 用于抽样的表达式。如果要用抽样表达式，主键中必须包含这个表达式。例如： <code>SAMPLE BY intHash32(UserID) ORDER BY (CounterID, EventDate, intHash32(UserID)) </code></li><li><code>SETTINGS</code> — 影响 <code>MergeTree</code> 性能的额外参数：<ul><li><code>index_granularity </code>— 索引粒度。即索引中相邻『标记』间的数据行数。默认值，8192 。该列表中所有可用的参数可以从这里查看 <code>MergeTreeSettings.h</code></li><li><code>index_granularity_bytes</code> — 索引粒度，以字节为单位，默认值: 10Mb。如果仅按数据行数限制索引粒度,请设置为0(不建议)。</li><li><code>enable_mixed_granularity_parts </code>— 启用或禁用通过 <code>index_granularity_bytes </code>控制索引粒度的大小。在19.11版本之前, 只有 <code>index_granularity</code> 配置能够用于限制索引粒度的大小。当从大表(数十或数百兆)中查询数据时候，<code>index_granularity_bytes</code> 配置能够提升<code>ClickHouse</code>的性能。如果你的表内数据量很大，可以开启这项配置用以提升<code>SELECT</code> 查询的性能。</li><li><code>use_minimalistic_part_header_in_zookeeper </code>— 数据片段头在 <code>ZooKeeper</code> 中的存储方式。如果设置了<code>use_minimalistic_part_header_in_zookeeper=1 </code>，<code>ZooKeeper</code> 会存储更少的数据。更多信息参考『服务配置参数』这章中的 设置描述 。</li><li><code>min_merge_bytes_to_use_direct_io</code> — 使用直接 I/O 来操作磁盘的合并操作时要求的最小数据量。合并数据片段时，<code>ClickHouse </code>会计算要被合并的所有数据的总存储空间。如果大小超过了<code>min_merge_bytes_to_use_direct_io</code> 设置的字节数，则 <code>ClickHouse</code> 将使用直接 I/O 接口（<code>O_DIRECT </code>选项）对磁盘读写。如果设置 <code>min_merge_bytes_to_use_direct_io = 0 </code>，则会禁用直接 I/O。默认值：10 *1024 * 1024 * 1024 字节。</li><li><code>merge_with_ttl_timeout</code> — TTL合并频率的最小间隔时间。默认值: 86400 (1 天)。</li><li><code>write_fifinal_mark </code>— 启用或禁用在数据片段尾部写入最终索引标记。默认值: 1（不建议更改）。</li><li><code>storage_policy </code>— 存储策略。 参见 使用多个区块装置进行数据存储</li></ul></li></ul></blockquote><h4 id="4-2、MergeTree的存储结构"><a href="#4-2、MergeTree的存储结构" class="headerlink" title="4.2、MergeTree的存储结构"></a>4.2、<code>MergeTree</code>的存储结构</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- mt_table </span>    <span class="token operator">|</span><span class="token comment" spellcheck="true">-- 20180301_20180330_1_100_20 </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- checksums.txt </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- columns.txt </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- date.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- date.mrk2</span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- id.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- id.mrk2 </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- name.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- name.mrk2</span>    <span class="token operator">|</span> <span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- primary.idx</span>    <span class="token operator">|</span><span class="token comment" spellcheck="true">-- 20180601_20180629_101_200_20</span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- checksums.txt</span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- columns.txt </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- date.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- date.mrk2 </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- id.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- id.mrk2 </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- name.bin </span>    <span class="token operator">|</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">-- name.mrk2</span>    <span class="token operator">|</span> <span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- primary.idx</span>    <span class="token operator">|</span><span class="token comment" spellcheck="true">-- detached </span>        <span class="token comment" spellcheck="true">-- format_version.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>checksums.txt</code>：<strong>二进制</strong>的校验文件，保存了余下文件的大小size和size的Hash值，用于快速校验文件的完整和正确性</p><p><code>columns.txt</code>：<strong>明文</strong>的列信息文件，如：</p><p><code>date.bin</code>：压缩格式（默认<code>LZ4</code>）的数据文件，保存了原始数据。以列名<code>.bin</code>命名。</p><p><code>date.mrk2</code>：使用了自适应大小的索引间隔,名字为 <code>.mrk2</code>。<strong>二进制</strong>的列字段标记文件，作用是把稀疏索引<code>.idx</code>文件和存数据的文件<code>.bin</code>联系起来。</p><p><code>primary.idx</code>：二进制的一级索引文件，在建表的时候通过OrderBy或者PrimaryKey声明的稀疏索引。</p></blockquote><h4 id="4-3数据分区"><a href="#4-3数据分区" class="headerlink" title="4.3数据分区"></a>4.3数据分区</h4><blockquote><p>数据是以分区目录的形式组织的，每个分区独立分开存储。</p><p>这种形式，查询数据时，可以有效的跳过无用的数据文件。</p></blockquote><h5 id="4-3-1、数据分区的规则"><a href="#4-3-1、数据分区的规则" class="headerlink" title="4.3.1、数据分区的规则"></a>4.3.1、数据分区的规则</h5><blockquote><p>分区键的取值，生成分区ID，分区根据ID决定。根据分区键的数据类型不同，分区ID的生成目前有四种规则：</p><p>(1) 不指定分区键</p><p>(2) 使用整形</p><p>(3) 使用日期类型 <code>toYYYYMM(date)</code></p><p>(4) 使用其他类型</p><p>数据在写入时，会对照分区ID落入对应的分区。</p></blockquote><h5 id="4-3-2、分区目录的生成规则"><a href="#4-3-2、分区目录的生成规则" class="headerlink" title="4.3.2、分区目录的生成规则"></a>4.3.2、分区目录的生成规则</h5><p><code>partitionID_MinBlockNum_MaxBlockNum_Level</code> =&gt; 分区目录</p><blockquote><p><code>BlockNum</code>是一个全局整型，从1开始，每当新创建一个分区目录，此数字就累加1。</p><p><code>MinBlockNum</code>:最小数据块编号</p><p><code>MaxBlockNum</code>:最大数据块编号</p><p>对于一个新的分区，<code>MinBlockNum</code>和<code>MaxBlockNum</code>的值相同</p><p>如：2020_03_1_1_0, 2020_03_2_2_0</p><p><code>Level</code>:合并的层级，即某个分区被合并过得次数。不是全局的，而是针对某一个分区。</p></blockquote><h5 id="4-3-3、分区目录的合并过程"><a href="#4-3-3、分区目录的合并过程" class="headerlink" title="4.3.3、分区目录的合并过程"></a>4.3.3、分区目录的合并过程</h5><blockquote><p><code>MergeTree</code>的分区目录在数据写入过程中被创建。</p><p>不同的批次写入数据属于同一分区，也会生成不同的目录，在之后的某个时刻再合并（写入后的10-15分钟），合并后的旧分区目录默认8分钟后删除。</p><p>同一个分区的多个目录合并以后的命名规则：</p><ul><li><code>MinBlockNum</code>:取同一分区中<code>MinBlockNum</code>值最小的</li><li><code>MaxBlockNum</code>：取同一分区中<code>MaxBlockNum</code>值最大的</li><li><code>Level</code>:取同一分区最大的Level值加1</li></ul></blockquote><h4 id="4-4、索引"><a href="#4-4、索引" class="headerlink" title="4.4、索引"></a>4.4、索引</h4><h5 id="4-4-1、一级索引"><a href="#4-4-1、一级索引" class="headerlink" title="4.4.1、一级索引"></a>4.4.1、一级索引</h5><blockquote><p>文件：<code>primary.idx</code></p><p><code>MergeTree</code>的主键使用<code>Primary Key</code>定义，主键定义之后，<code>MergeTree</code>会根据i<code>ndex_granularity</code>间隔（默认8192)为数据生成一级索引并保存至<code>primary.idx</code>文件中。这种方式是稀疏索引简化形式：通过<code>order by</code>指代主键</p></blockquote><h6 id="4-4-1-1、稀疏索引"><a href="#4-4-1-1、稀疏索引" class="headerlink" title="4.4.1.1、稀疏索引"></a>4.4.1.1、稀疏索引</h6><blockquote><p><code>primary.idx</code>文件的一级索引采用稀疏索引。</p><p><strong>稠密索引</strong>：每一行索引标记对应一行具体的数据记录</p><p><strong>稀疏索引</strong>：每一行索引标记对应一段数据记录（默认索引粒度为8192）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220719093444738.png"></p><blockquote><p> 稀疏索引占用空间小，所以<code>primary.idx</code>内的索引数据常驻内存，取用速度快！</p></blockquote><h6 id="4-4-1-2、索引力度"><a href="#4-4-1-2、索引力度" class="headerlink" title="4.4.1.2、索引力度"></a>4.4.1.2、索引力度</h6><blockquote><p><code>index_granularity</code>参数，表示索引粒度。新版本中<code>clickhouse</code>提供了自适应索引粒度。</p><p>索引粒度在<code>MergeTree引</code>擎中很重要。</p></blockquote><h6 id="4-4-1-3、索引数据的生成规则"><a href="#4-4-1-3、索引数据的生成规则" class="headerlink" title="4.4.1.3、索引数据的生成规则"></a>4.4.1.3、索引数据的生成规则</h6><blockquote><p><code>primary.idx</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220719095528142.png"></p></blockquote><h6 id="4-4-1-4、索引的查询过程"><a href="#4-4-1-4、索引的查询过程" class="headerlink" title="4.4.1.4、索引的查询过程"></a>4.4.1.4、索引的查询过程</h6><blockquote><p><code>MarkRange</code>：一小段数据区间</p><p>按照<code>index_granularity</code>的间隔粒度，将一段完整的数据划分成多个小的数据段，小的数据段就是<code>MarkRange</code>，<code>MarkRange</code>与索引编号对应。</p></blockquote><blockquote><p>索引查询 where id = 3</p><p>第一步：形成区间格式： [3,3]</p><p>第二步：进行交集 [3,3]∩[0,199]</p><p>第三步：合并   <code>MarkRange</code>:(<code>start0</code>,<code>end 20</code>)</p></blockquote><h5 id="4-4-2、跳数索引"><a href="#4-4-2、跳数索引" class="headerlink" title="4.4.2、跳数索引"></a>4.4.2、跳数索引</h5><h6 id="4-4-2-1、granularity和index-granularity的关系"><a href="#4-4-2-1、granularity和index-granularity的关系" class="headerlink" title="4.4.2.1、granularity和index_granularity的关系"></a>4.4.2.1、<code>granularity</code>和<code>index_granularity</code>的关系</h6><blockquote><p><code>index_granularity</code>定义了数据的粒度 <code>granularity</code>定义了聚合信息汇总的粒度 换言之，<code>granularity</code>定义了一行跳数索引能够跳过多少个<code>index_granularity</code>区间的数据</p></blockquote><h6 id="4-4-2-2、索引可用的类型"><a href="#4-4-2-2、索引可用的类型" class="headerlink" title="4.4.2.2、索引可用的类型"></a>4.4.2.2、索引可用的类型</h6><ul><li><code>minmax</code>·存储指定表达式的极值（如果表达式是 <code>tuple </code>，则存储<code> tuple</code> 中每个元素的极值），这些信息用于跳过数据块，类似主键。</li><li><code>set(max_rows) </code>存储指定表达式的惟一值（不超过 <code>max_rows</code> 个，<code>max_rows</code>=0 则表示『无限制』）。这些信息可用于检查 WHERE 表达式是否满足某个数据块。</li><li><code>ngrambf_v1</code>(<code>n, size_of_bloom_fifilter_in_bytes, number_of_hash_functions, random_seed</code>) 存储包含数据块中所有 n 元短语的 布隆过滤器 。只可用在字符串上。 可用于优化 equals ，<code> like</code> 和 <code>in</code> 表达式的性能。 n – 短语长度。 <code>size_of_boom_fifilter_in_bytes</code> – 布隆过滤器大小，单位字节。（因为压缩得好，可以指定比较大的值，如256或512）。 <code>number_of_hash_functions</code> – 布隆过滤器中使用的 hash 函数的个数。 random_seed –hash 函数的随机种子。</li><li><code>tokenbf_v1</code>(<code>size_of_bloom_fifilter_in_bytes, number_of_hash_functions, random_seed</code>) 跟 <code>ngrambf_v1</code> 类似，不同于<code>ngrams</code>存储字符串指定长度的所有片段。它只存储被非字母数据字符分割的片段。</li></ul><h4 id="4-5数据存储"><a href="#4-5数据存储" class="headerlink" title="4.5数据存储"></a>4.5数据存储</h4><blockquote><p>表<strong>由按主键排序的数据</strong>片段 组成。</p><p>当数据被插入到表中时，会分成数据片段并按主键的字典序排序。例如，主键是 (<code>CounterID, Date</code>) 时，片段中数据按 <code>CounterID</code> 排序，具有相同 <code>CounterID</code> 的部分按 Date 排序。不同分区的数据会被分成不同的片段，<code>ClickHouse</code> 在后台合并数据片段以便更高效存储。不会合并来自不同分区的数据片段。这个合并机制并不保证相同主键的所有行都会合并到同一个数据片段中。</p><p><code>ClickHouse</code> 会为每个数据片段创建一个索引文件，索引文件包含每个索引行（『标记』）的主键值。索引行号定义为 n * index_granularity 。最大的 n 等于总行数除以 index_granularity 的值的整数部分。对于每列，跟主键相同的索引行处也会写入『标记』。这些『标记』让你可以直接找到数据所在的列。</p><p>你可以只用一单一大表并不断地一块块往里面加入数据 – <code>MergeTree</code> 引擎的就是为了这样的场景</p></blockquote><h5 id="4-5-1、按列存储"><a href="#4-5-1、按列存储" class="headerlink" title="4.5.1、按列存储"></a>4.5.1、按列存储</h5><blockquote><p>在<code>MergeTree</code>中数据按列存储，具体到每个列字段，都拥有一个<code>.bin</code>数据文件，是最终存储数据的文件。 按列存储的好处：</p><p> 1、更好的压缩 </p><p> 2、最小化数据扫描范围</p><p><code>MergeTree</code>往<code>.bin</code>文件存数据的步骤：</p><p>​1、对数据进行压缩</p><p>​2、根据<code>OrderBy</code>排序</p><p>​3、数据以压缩数据块的形式写入<code>.bin</code>文件</p></blockquote><h5 id="4-5-2、压缩数据块"><a href="#4-5-2、压缩数据块" class="headerlink" title="4.5.2、压缩数据块"></a>4.5.2、压缩数据块</h5><blockquote><p><code>CompressionMethod_CompressedSize_UnccompressedSize</code></p><p>一个压缩数据块有两部分组成：</p><p>1、头信息 </p><p>2、压缩数据</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 20180301_20180330_1_100_20<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># clickhouse-compressor --stat &lt;./date.bin > out.log </span><span class="token punctuation">[</span>root@hdp-1 20180301_20180330_1_100_20<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat out.log </span>200 207 <span class="token punctuation">[</span>root@hdp-1 20180301_20180330_1_100_20<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果按照默认8192的索引粒度把数据分成批次，每批次读入数据的规则：</p><p>​设x为批次数据的大小，</p><p>​如果单批次获取的数据 x&lt;64k,则继续读下一个批次，找到size&gt;64k则生成下一个数据块</p><p>​如果单批次数据64k&lt;x&lt;1M则直接生成下一个数据块</p><p>​如果x&gt;1M,则按照1M切分数据，剩下的数据继续按照上述规则执行。</p></blockquote><h5 id="4-5-3、数据标记"><a href="#4-5-3、数据标记" class="headerlink" title="4.5.3、数据标记"></a>4.5.3、数据标记</h5><blockquote><p><code>.mrk</code>文件</p><p>将以及索引<code>primary.idx</code>和数据文件<code>.bin</code>建立映射关系</p><p>通用用<code>hits_v1</code>表说明：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725152048187.png"></p></blockquote><h5 id="4-5-4、-mrk文件内容的生成规则"><a href="#4-5-4、-mrk文件内容的生成规则" class="headerlink" title="4.5.4、 .mrk文件内容的生成规则"></a>4.5.4、<code> .mrk</code>文件内容的生成规则</h5><blockquote><p>数据标记和区间是对齐的。均按照<code>index_granularity</code>粒度间隔。可以通过索引区间的下标编号找到对应的数据标记。</p><p>每一个列字段的<code>.bin</code>文件都有一个<code>.mrk</code>数据标记文件，用于记录数据在<code>.bin</code>文件中的偏移量信息。</p><p>标记数据采用<code>LRU</code>缓存策略加快其取用速度</p></blockquote><h5 id="4-5-5、-mrk文件的工作方式"><a href="#4-5-5、-mrk文件的工作方式" class="headerlink" title="4.5.5、.mrk文件的工作方式"></a>4.5.5、<code>.mrk</code>文件的工作方式</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725153439932.png"></p><h5 id="4-5-6、分区、索引、标记和压缩协同"><a href="#4-5-6、分区、索引、标记和压缩协同" class="headerlink" title="4.5.6、分区、索引、标记和压缩协同"></a>4.5.6、分区、索引、标记和压缩协同</h5><h6 id="4-5-6-1、写入过程"><a href="#4-5-6-1、写入过程" class="headerlink" title="4.5.6.1、写入过程"></a>4.5.6.1、写入过程</h6><ol><li>生成分区目录</li><li>合并分区目录</li><li>生成<code>primary.inx</code>索引文件、每一列的<code>.bin</code>和<code>.mrk</code>文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725153932561.png"></p><h6 id="4-5-6-2、查询过程"><a href="#4-5-6-2、查询过程" class="headerlink" title="4.5.6.2、查询过程"></a>4.5.6.2、查询过程</h6><ol><li>根据分区索引缩小查询范围</li><li>根据数据标记，缩小查询范围</li><li>解压压缩块</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725154316144.png"></p><h6 id="5-5-6-3、数据标记与压缩数据块的对应关系"><a href="#5-5-6-3、数据标记与压缩数据块的对应关系" class="headerlink" title="5.5.6.3、数据标记与压缩数据块的对应关系"></a>5.5.6.3、数据标记与压缩数据块的对应关系</h6><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725154424858.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725154437330.png"></p><p>一对多：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220725154823321.png"></p><h5 id="4-5-7、MergTree的TTL"><a href="#4-5-7、MergTree的TTL" class="headerlink" title="4.5.7、MergTree的TTL"></a>4.5.7、<code>MergTree</code>的<code>TTL</code></h5><blockquote><p><code>TTL</code>：<code>time to live</code> 数据存活时间。<code>TTL</code>既可以设置在表上，也可以设置在列上。<code>TTL</code>指定的时间到期后则删除相应的表或列，如果同时设置了<code>TTL</code>，则根据先过期时间删除相应数据。</p><p>用法：</p><p><code>TTL time_col + INTERVAL 3 DAY</code></p><p>表示数据存活时间是<code>time_col</code>时间的3天后</p><p><code>INTERVAL</code>可以设定的时间：<code>SECOND</code> <code>MINUTE</code> <code>HOUR</code> <code>DAY</code> <code>WEEK</code> <code>MONTH</code> <code>QUARTER</code> <code>YEAR</code></p></blockquote><h6 id="4-5-7-1、-TTL设置在列上"><a href="#4-5-7-1、-TTL设置在列上" class="headerlink" title="4.5.7.1、 TTL设置在列上"></a>4.5.7.1、 <code>TTL</code>设置在列上</h6><pre class="line-numbers language-bash"><code class="language-bash">create table ttl_table_v1 <span class="token punctuation">(</span>    <span class="token function">id</span> String,     create_time DateTime,     code String TTL create_time + INTERVAL 10 SECOND,     <span class="token function">type</span> UInt8 TTL create_time + INTERVAL 10 SECOND <span class="token punctuation">)</span>ENGINE <span class="token operator">=</span> MergeTree PARTITION BY toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> ORDER BY <span class="token function">id</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##插入数据</span>insert into ttl_table_v1 values<span class="token punctuation">(</span><span class="token string">'A000'</span>,now<span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token string">'C1'</span>,1<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token string">'A000'</span>,now<span class="token punctuation">(</span><span class="token punctuation">)</span>+INTERVAL 10 MINUTE,<span class="token string">'C1'</span>,1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##查询数据</span>SELECT * FROM ttl_table_v1┌─id───┬─────────create_time─┬─code─┬─type─┐ │ A000 │ 2020-08-19 20:11:51 │      │    0 ││ A000 │ 2020-08-19 20:21:51 │ C1   │    1 │ └──────┴─────────────────────┴──────┴──────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.5.7.2、<code>TTL</code>设置在表上</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tt1_table_v2 <span class="token punctuation">(</span>     id String<span class="token punctuation">,</span>    create_time <span class="token keyword">DateTime</span><span class="token punctuation">,</span>     code String TTL create_time <span class="token operator">+</span> INTERVAL <span class="token number">10</span> SECOND<span class="token punctuation">,</span>    <span class="token keyword">type</span> UInt8  <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree  <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span>  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time  TTL create_time <span class="token operator">+</span> INTERVAL <span class="token number">1</span> DAY <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--修改数据有效时间</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tt1_table_v1 <span class="token keyword">MODIFY</span> TTL create_time <span class="token operator">+</span> INTERVAL <span class="token operator">+</span> <span class="token number">3</span> DAY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>TTL</code>目前没有取消方法</strong></p></blockquote><h6 id="4-5-7-3、-TTL文件说明"><a href="#4-5-7-3、-TTL文件说明" class="headerlink" title="4.5.7.3、 TTL文件说明"></a>4.5.7.3、 <code>TTL</code>文件说明</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 202008_1_1_0<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat ttl.txt </span>ttl <span class="token function">format</span> version: 1 <span class="token punctuation">{</span><span class="token string">"columns"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"code"</span>,<span class="token string">"min"</span>:1597839121,<span class="token string">"max"</span>:1597839721<span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"type"</span>,<span class="token string">"min"</span>:1597839121,<span class="token string">"max"</span>:1597839721<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>SELECT toDateTime<span class="token punctuation">(</span>1597839121<span class="token punctuation">)</span> AS ttl_min, toDateTime<span class="token punctuation">(</span>1597839721<span class="token punctuation">)</span> AS ttl_max ┌─────────────ttl_min─┬─────────────ttl_max─┐ │ 2020-08-19 20:12:01 │ 2020-08-19 20:22:01 │ └─────────────────────┴─────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-8、MergeTree的存储策略"><a href="#4-5-8、MergeTree的存储策略" class="headerlink" title="4.5.8、MergeTree的存储策略"></a>4.5.8、<code>MergeTree</code>的存储策略</h5><blockquote><p> 整体配置之后的文件</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>storage_configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata1/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/colddata/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_cold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disks</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default_jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jbod</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>:                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default_jbod</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>moving_from_hot_to_cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>1073741824<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cold</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_cold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>moving_from_hot_to_cold</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>moving_from_hot_to_cold_new</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>1048576<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cold</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_cold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>moving_from_hot_to_cold_new</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>storage_configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-5-8-1、默认策略"><a href="#4-5-8-1、默认策略" class="headerlink" title="4.5.8.1、默认策略"></a>4.5.8.1、默认策略</h6><blockquote><p><code>19.15</code>之前,只能单路径存储，存储位置为在<code>confifig.xml</code>配置文件中指定</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- Path to data directory, with trailing slash. --<span class="token operator">></span> <span class="token operator">&lt;</span>path<span class="token operator">></span>/var/lib/clickhouse/<span class="token operator">&lt;</span>/path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>19.15之后，支持多路径存储策略的自定义存储策略，目前有三类策略：</p><ol><li><code>JBOD</code> 策略</li><li><code>HOT/COLD</code>策略</li></ol></blockquote><h6 id="4-5-8-2、JBOD策略"><a href="#4-5-8-2、JBOD策略" class="headerlink" title="4.5.8.2、JBOD策略"></a>4.5.8.2、<code>JBOD</code>策略</h6><blockquote><p>配置<code>config.xml</code></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>storage_configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata1/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/colddata/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_cold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disks</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default_jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jbod</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>:                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default_jbod</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>storage_configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重启<code>ClickHouse</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> clickhouse-server restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>重启后查询磁盘信息</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>     name<span class="token punctuation">,</span>     path<span class="token punctuation">,</span>     formatReadableSize<span class="token punctuation">(</span>free_space<span class="token punctuation">)</span> <span class="token keyword">as</span> free<span class="token punctuation">,</span>     formatReadableSize<span class="token punctuation">(</span>total_space<span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token punctuation">,</span>     formatReadableSize<span class="token punctuation">(</span>keep_free_space<span class="token punctuation">)</span> <span class="token keyword">as</span> reserved <span class="token keyword">from</span>     system<span class="token punctuation">.</span>disks<span class="token punctuation">;</span>┌─name──────┬─path─────────────────────────────────┬─free─────┬─total─────┬─reserved─┐│ <span class="token keyword">default</span>   │ <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>clickhouse<span class="token operator">/</span>                 │ <span class="token number">5.02</span> GiB │ <span class="token number">16.99</span> GiB │ <span class="token number">0.00</span> B   │ │ disk_cold │ <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>clickhouse<span class="token operator">/</span>chbase<span class="token operator">/</span>colddata<span class="token operator">/</span> │ <span class="token number">5.02</span> GiB │ <span class="token number">16.99</span> GiB │ <span class="token number">0.00</span> B   │ │ disk_hot1 │ <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>clickhouse<span class="token operator">/</span>chbase<span class="token operator">/</span>hotdata1<span class="token operator">/</span> │ <span class="token number">5.02</span> GiB │ <span class="token number">16.99</span> GiB │ <span class="token number">0.00</span> B   │ │ disk_hot2 │ <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>clickhouse<span class="token operator">/</span>chbase<span class="token operator">/</span>hotdata2<span class="token operator">/</span> │ <span class="token number">5.02</span> GiB │ <span class="token number">16.99</span> GiB │ <span class="token number">0.00</span> B   │ └───────────┴──────────────────────────────────────┴──────────┴───────────┴──────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>system.storage_policies</code>系统表可以看到刚才配置的策略也生效了。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    policy_name<span class="token punctuation">,</span>    volume_name<span class="token punctuation">,</span>    volume_priority<span class="token punctuation">,</span>    disks<span class="token punctuation">,</span>     formatReadableSize<span class="token punctuation">(</span>max_data_part_size<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_data_part_size<span class="token punctuation">,</span>     move_factor <span class="token keyword">FROM</span>     system<span class="token punctuation">.</span>storage_policies     ┌─policy_name──┬─volume_name─┬──disks─────────────────────┬─move_factor─┐ │ <span class="token keyword">default</span>      │ <span class="token keyword">default</span>     │ <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span>               │ <span class="token number">0</span>           │ │ default_jbod │ jbod        │ <span class="token punctuation">[</span><span class="token string">'disk_hot1'</span><span class="token punctuation">,</span><span class="token string">'disk_hot2'</span><span class="token punctuation">]</span>  │ <span class="token number">0.2</span>         │ └──────────────┴─────────────┴────────────────────────────┴─────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>JBOD</code> 策略验证</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> jbod_table <span class="token punctuation">(</span>    id Uint64<span class="token punctuation">)</span>enging <span class="token operator">=</span> MergeTree<span class="token keyword">order</span> <span class="token keyword">by</span> id settings sorage_policy <span class="token operator">=</span> <span class="token string">'default_jbod'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> jbod_table <span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> numbers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> jbod_table <span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> numbers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询数据磁盘分部情况</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>disk_name <span class="token keyword">from</span> system<span class="token punctuation">.</span>parts <span class="token keyword">where</span> <span class="token keyword">table</span><span class="token operator">=</span><span class="token string">'jbod_table'</span><span class="token punctuation">;</span>┌─name──────┬─disk_name─┐ │ all_1_1_0 │ disk_hot1 │ │ all_2_2_0 │ disk_hot2 │└───────────┴───────────┘<span class="token comment" spellcheck="true">--触发合并操作</span><span class="token keyword">optimize</span> <span class="token keyword">table</span> jbod_table<span class="token punctuation">;</span><span class="token keyword">SELECT</span>    name<span class="token punctuation">,</span>     disk_name <span class="token keyword">FROM</span>     system<span class="token punctuation">.</span>parts <span class="token keyword">WHERE</span>    <span class="token keyword">table</span> <span class="token operator">=</span> <span class="token string">'jbod_table'</span>    ┌─name──────┬─disk_name─┐ │ all_1_1_0 │ disk_hot1 ││ all_1_2_1 │ disk_hot1 │ │ all_2_2_0 │ disk_hot2 │ └───────────┴───────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-5-8-3、HOT-x2F-COLD策略"><a href="#4-5-8-3、HOT-x2F-COLD策略" class="headerlink" title="4.5.8.3、HOT   /COLD策略"></a>4.5.8.3、<code>HOT  </code> /<code>COLD</code>策略</h6><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>storage_configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata1/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_hot2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/hotdata2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_hot2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk_cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/chbase/colddata/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk_cold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disks</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default_jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jbod</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>:                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jbod</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default_jbod</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>moving_from_hot_to_cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>volumes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_hot1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>1073741824<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max_data_part_size_bytes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cold</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span><span class="token punctuation">></span></span>disk_cold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cold</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>volumes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>move_factor</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>move_factor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>moving_from_hot_to_cold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>storage_configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重启服务：<code>service clickhouse-server restart</code></p></blockquote><h3 id="5、MergeTree家族表索引"><a href="#5、MergeTree家族表索引" class="headerlink" title="5、MergeTree家族表索引"></a>5、<code>MergeTree</code>家族表索引</h3><hr><h4 id="5-1、ReplacingMergeTree"><a href="#5-1、ReplacingMergeTree" class="headerlink" title="5.1、ReplacingMergeTree"></a>5.1、<code>ReplacingMergeTree</code></h4><blockquote><p>这个引擎是在 <code>MergeTree</code> 的基础上，添加了“处理重复数据”的功能，该引擎和<code>MergeTree</code>的不同之处在于它会删除具有相同主键的重复项。</p><p>特点:</p><ol><li>使用<code>ORDER BY</code>排序键作为判断重复的唯一键</li><li>数据的去重只会在合并的过程中触发</li><li>以数据分区为单位删除重复数据，不同分区的的重复数据不会被删除</li><li>找到重复数据的方式依赖数据已经<code>ORDER BY</code>排好序了</li><li>如果没有<code>ver</code>版本号，则保留重复数据的最后一行</li><li>如果设置了<code>ver</code>版本号，则保留重复数据中<code>ver</code>版本号最大的数据</li></ol><p>格式：</p><p><code>ENGINE [=] ReplacingMergeTree(date-column [, sampling_expression], (primary, key), index_granularity, [ver])</code></p><p>可以看出他比MergeTree只多了一个<code>ver</code>，这个ver指代版本列。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例</span><span class="token keyword">create</span> <span class="token keyword">table</span> replace_table<span class="token punctuation">(</span>    id String<span class="token punctuation">,</span>     code String<span class="token punctuation">,</span>    create_time <span class="token keyword">DateTime</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>ReplacingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>code<span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'2020-08-21 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'2020-08-22 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'C8'</span><span class="token punctuation">,</span><span class="token string">'2020-08-23 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'C9'</span><span class="token punctuation">,</span><span class="token string">'2020-08-24 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A002'</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">,</span><span class="token string">'2020-08-25 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A003'</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">,</span><span class="token string">'2020-08-26 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>触发数据合并</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">optimize</span> <span class="token keyword">table</span> jbod_table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>合并后查询数据  , 通过观察，去重是根据<code>ORDER BY</code>来的，并非<code>PRIMARY KEY</code></p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> replace_table ┌─id───┬─code─┬─────────create_time─┐ │ A001 │ C1   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A001 │ C8   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A001 │ C9   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> ││ A002 │ C2   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A003 │ C3   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ └──────┴──────┴─────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在继续插入一条数据</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> replace_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'2020-05-21 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--触发数据合并</span><span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> replace_table<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> replace_table┌─id───┬─code─┬─────────create_time─┐ │ A001 │ C1   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │└──────┴──────┴─────────────────────┘ ┌─id───┬─code─┬─────────create_time─┐ │ A001 │ C1   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A001 │ C8   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A001 │ C9   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A002 │ C2   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A003 │ C3   │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │└──────┴──────┴─────────────────────┘<span class="token comment" spellcheck="true">--通过观察，不同分区的数据不会去重。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2、SummingMergeTree"><a href="#5-2、SummingMergeTree" class="headerlink" title="5.2、SummingMergeTree"></a>5.2、<code>SummingMergeTree</code></h4><blockquote><p>该引擎继承自 <code>MergeTree</code>。区别在于，当合并 <code>SummingMergeTree</code> 表的数据片段时，<code>ClickHouse</code> 会把所有具有<strong>相同聚合数据的条件</strong><code>Key</code>的行合并为一行，该行包含了被合并的行中具有数值数据类型的列的汇总值。如果聚合数据的条件<code>Key</code>的组合方式使得单个键值对应于大量的行，则可以显著的减少存储空间并加快数据查询的速度，对于不可加的列，会取一个<strong>最先出现的值</strong>。</p><p>特征：</p><ol><li>用<code>ORDER BY</code>排序键作为聚合数据的条件<code>Key </code></li><li>合并分区的时候触发汇总逻辑</li><li>以数据分区为单位聚合数据，不同分区的数据不会被汇总</li><li>如果在定义引擎时指定了<code>Columns</code>汇总列（非主键）则<code>SUM</code>汇总这些字段</li><li>如果没有指定，则汇总所有非主键的数值类型字段</li><li><code>SUM</code>汇总相同的聚合<code>Key</code>的数据，依赖<code>ORDER BY</code>排序</li><li>同一分区的<code>SUM</code>汇总过程中，非汇总字段的数据保留第一行取值</li><li>支持嵌套结构，但列字段名称必须以<code>Map</code>后缀结束。</li></ol></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--语法     columns — 包含将要被汇总的列的列名的元组</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">db</span><span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span> <span class="token punctuation">(</span>     name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>     name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> SummingMergeTree<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">columns</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span> <span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例</span><span class="token keyword">create</span> <span class="token keyword">table</span> smt_table <span class="token punctuation">(</span>    <span class="token keyword">date</span> <span class="token keyword">Date</span><span class="token punctuation">,</span>     name String<span class="token punctuation">,</span>    <span class="token number">a</span> UInt16<span class="token punctuation">,</span>     <span class="token number">b</span> UInt16<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>SummingMergeTree<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-10'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-10'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-11'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-11'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-11'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> smt_table <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2019-07-12'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--等待一段时间或optimize table smt_table手动触发merge，后查询</span>:<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> smt_table ┌───────<span class="token keyword">date</span>─┬─name─┬─<span class="token number">a</span>─┬─<span class="token number">b</span>─┐ │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">10</span> │ <span class="token number">a</span>    │ <span class="token number">1</span> │ <span class="token number">2</span> ││ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">10</span> │ <span class="token number">b</span>    │ <span class="token number">2</span> │ <span class="token number">1</span> │ │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span> │ <span class="token number">a</span>    │ <span class="token number">3</span> │ <span class="token number">1</span> │ │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span> │ <span class="token number">b</span>    │ <span class="token number">6</span> │ <span class="token number">8</span> │ │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">12</span> │ <span class="token number">c</span>    │ <span class="token number">1</span> │ <span class="token number">3</span> │ └────────────┴──────┴───┴───┘<span class="token comment" spellcheck="true">--发现2019-07-11，b的a列合并相加了，b列取了8（因为b列为8的数据最先插入）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例2</span><span class="token keyword">create</span> <span class="token keyword">table</span> summing_table<span class="token punctuation">(</span>     id String<span class="token punctuation">,</span>     city String<span class="token punctuation">,</span>    v1 UInt32<span class="token punctuation">,</span>    v2 Float64<span class="token punctuation">,</span>     create_time <span class="token keyword">DateTime</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>SummingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>city<span class="token punctuation">)</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> summing_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'beijing'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'2020-08-20 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> summing_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'beijing'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'2020-08-30 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> summing_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'shanghai'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'2020-08-20 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> summing_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'beijing'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'2020-06-20 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> summing_table <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token string">'beijing'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">'2020-02-20 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--手动触发合并数据</span><span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> summing_table Ok<span class="token punctuation">.</span> <span class="token number">0</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.003</span> sec<span class="token punctuation">.</span> hdp<span class="token number">-1</span> :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> summing_table<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> summing_table ┌─id───┬─city────┬─v1─┬─v2─┬─────────create_time─┐ │ A001 │ beijing │ <span class="token number">50</span> │ <span class="token number">60</span> │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ └──────┴─────────┴────┴────┴─────────────────────┘ ┌─id───┬─city────┬─v1─┬─v2─┬─────────create_time─┐ │ A000 │ beijing │ <span class="token number">10</span> │ <span class="token number">20</span> │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ └──────┴─────────┴────┴────┴─────────────────────┘ ┌─id───┬─city─────┬─v1─┬─v2─┬─────────create_time─┐ │ A000 │ beijing  │ <span class="token number">30</span> │ <span class="token number">50</span> │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ │ A000 │ shanghai │ <span class="token number">10</span> │ <span class="token number">20</span> │ <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span> │ └──────┴──────────┴────┴────┴─────────────────────┘<span class="token comment" spellcheck="true">--通过观察，根据ORDER BY排序键(id,city)作为聚合Key,因为没有在建表指定SummingMergeTree的时候没有指定</span><span class="token comment" spellcheck="true">--Sum列，所以把所有非主键数值类型的列都进行了SUM逻辑</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例3：SummingMergeTree支持嵌套类型的字段，但列字段名称必须以Map后缀结束。</span><span class="token keyword">create</span> <span class="token keyword">table</span> summing_table_nested<span class="token punctuation">(</span>    id String<span class="token punctuation">,</span>     nestMap Nested<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> <span class="token keyword">key</span> UInt32<span class="token punctuation">,</span> val UInt64 <span class="token punctuation">)</span><span class="token punctuation">,</span>    create_time <span class="token keyword">DateTime</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>SummingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--数据如何看</span>id:A001nestMap<span class="token punctuation">.</span>id: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>nestMap<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>nestMap<span class="token punctuation">.</span>val <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>create_time: <span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">08</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token comment" spellcheck="true">--汇总方式</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3、AggregateMergeTree"><a href="#5-3、AggregateMergeTree" class="headerlink" title="5.3、AggregateMergeTree"></a>5.3、<code>AggregateMergeTree</code></h4><blockquote><p>说明： 该引擎继承自 <code>MergeTree</code>，并改变了数据片段的合并逻辑。<code> ClickHouse</code> 会将相同主键的所有行（在一个数据片段内）替换为单个存储一系列聚合函数状态的行。 可以使用 A<code>ggregatingMergeTree</code> 表来做增量数据统计聚合，包括物化视图的数据聚合。 引擎需使用 <code>AggregateFunction</code> 类型来处理所有列。 如果要按一组规则来合并减少行数，则使用 <code>AggregatingMergeTree</code> 是合适的。 对于<code>AggregatingMergeTree</code>不能直接使用<code>insert</code>来查询写入数据。</p><p>一般是用insert select。但更常用的是创建物化视图</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例</span> <span class="token comment" spellcheck="true">--先创建一个MergeTree引擎的基表</span> hdp<span class="token number">-1</span> :<span class="token punctuation">)</span> <span class="token keyword">create</span> <span class="token keyword">table</span> arr_table_base <span class="token punctuation">(</span>    id String<span class="token punctuation">,</span>     city String<span class="token punctuation">,</span>    code String<span class="token punctuation">,</span>    <span class="token keyword">value</span> UInt32<span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span>MergeTree<span class="token keyword">partition</span> <span class="token keyword">by</span> city <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--创建一个AggregatingMergeTree的物化视图</span><span class="token keyword">create</span> materialized <span class="token keyword">view</span> agg_view <span class="token keyword">engine</span><span class="token operator">=</span>AggregatingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> city <span class="token keyword">order</span> <span class="token keyword">by</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>city<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">select</span>     id<span class="token punctuation">,</span>    city<span class="token punctuation">,</span>    uniqState<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">as</span> code<span class="token punctuation">,</span>    sumState<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">value</span> <span class="token keyword">from</span> arr_table_base <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>city<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--基表  arr_table_base 写入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> arr_table_base <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'wuhan'</span><span class="token punctuation">,</span><span class="token string">'code1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'wuhan'</span><span class="token punctuation">,</span><span class="token string">'code2'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'A000'</span><span class="token punctuation">,</span><span class="token string">'zhuhai'</span><span class="token punctuation">,</span><span class="token string">'code1'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--手动触发数据合并</span><span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> summing_table <span class="token comment" spellcheck="true">--数据合并后查询数据</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>sumMerge<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uniqMerge<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">from</span> agg_view <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>city<span class="token punctuation">;</span> SELECTid<span class="token punctuation">,</span> sumMerge<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uniqMerge<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">FROM</span> agg_view <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id<span class="token punctuation">,</span> city ┌─id───┬─sumMerge<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>─┬─uniqMerge<span class="token punctuation">(</span>code<span class="token punctuation">)</span>─┐ │ A000 │ <span class="token number">200</span>             │ <span class="token number">1</span>               │ │ A000 │ <span class="token number">201</span>             │ <span class="token number">2</span>               │ └──────┴─────────────────┴─────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用场景：</p><p>​<strong>可以使用AggregatingMergeTree表来做增量数据统计聚合，包括物化视图的数据聚合</strong></p></blockquote><h4 id="5-4、CollapsingMergeTree"><a href="#5-4、CollapsingMergeTree" class="headerlink" title="5.4、CollapsingMergeTree"></a>5.4、<code>CollapsingMergeTree</code></h4><blockquote><p>以增代删：</p><p>说明： <code>yandex</code>官方给出的介绍是<code>CollapsingMergeTree</code> 会异步的删除（折叠）这些除了特定列 <code>Sign</code> 有 1 和 -1 的值以外，其余所有字段的值都相等的成对的行。没有成对的行会被保留。该引擎可以显著的降低存储量并提高 <code>SELECT</code>查询效率。 <code>CollapsingMergeTree</code>引擎有个状态列<code>sign</code>，这个值1为”状态”行，-1为”取消”行，对于数据只关心状态列为状态的数据，不关心状态列为取消的数据</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建CollapsingMergeTree表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> cmt_tab<span class="token punctuation">(</span>    sign Int8<span class="token punctuation">,</span>     <span class="token keyword">date</span> <span class="token keyword">Date</span><span class="token punctuation">,</span>     name String<span class="token punctuation">,</span>    <span class="token keyword">point</span> String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>CollapsingMergeTree<span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">date</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> SAMPLE <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'cctv'</span><span class="token punctuation">,</span><span class="token string">'100000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'cctv'</span><span class="token punctuation">,</span><span class="token string">'100000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'hntv'</span><span class="token punctuation">,</span><span class="token string">'10000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'hntv'</span><span class="token punctuation">,</span><span class="token string">'10000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'hbtv'</span><span class="token punctuation">,</span><span class="token string">'11000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-13'</span><span class="token punctuation">,</span><span class="token string">'hbtv'</span><span class="token punctuation">,</span><span class="token string">'11000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-14'</span><span class="token punctuation">,</span><span class="token string">'cctv'</span><span class="token punctuation">,</span><span class="token string">'200000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-14'</span><span class="token punctuation">,</span><span class="token string">'hntv'</span><span class="token punctuation">,</span><span class="token string">'15000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmt_tab<span class="token punctuation">(</span>sign<span class="token punctuation">,</span><span class="token keyword">date</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">point</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2019-12-14'</span><span class="token punctuation">,</span><span class="token string">'hbtv'</span><span class="token punctuation">,</span><span class="token string">'16000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--通过optimize table amt_tab_view命令手动Merge后查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cmt_tab ┌─sign─┬───────<span class="token keyword">date</span>─┬─name─┬─<span class="token keyword">point</span>──┐ │ <span class="token number">1</span>    │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">14</span> │ cctv │ <span class="token number">200000</span> │└──────┴────────────┴──────┴────────┘ ┌─sign─┬───────<span class="token keyword">date</span>─┬─name─┬─<span class="token keyword">point</span>─┐│ <span class="token number">1</span>    │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">14</span> │ hntv │ <span class="token number">15000</span> │ └──────┴────────────┴──────┴───────┘┌─sign─┬───────<span class="token keyword">date</span>─┬─name─┬─<span class="token keyword">point</span>─┐ │ <span class="token number">1</span>    │ <span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">14</span> │ hbtv │ <span class="token number">16000</span> │ └──────┴────────────┴──────┴───────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用场景：</p><p>​大数据中对于数据更新很难做到，比如统计一个网站或TV的在用户数，更多场景都是选择用记录每个点的数据，再对数据进行一定聚合查询。而<code>clickhouse</code>通过<code>CollapsingMergeTree</code>就可以实现，所以使得<code>CollapsingMergeTree</code><strong>大部分用于<code>OLAP</code>场景</strong></p></blockquote><h4 id="5-5、VersionedCollapsingMergeTree"><a href="#5-5、VersionedCollapsingMergeTree" class="headerlink" title="5.5、VersionedCollapsingMergeTree"></a>5.5、<code>VersionedCollapsingMergeTree</code></h4><blockquote><p>这个引擎和CollapsingMergeTree差不多，只是对CollapsingMergeTree引擎加了一个版本，比如可以适用于<strong>非实时用户在线统计</strong>，统计每个节点用户在在线业务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/ClickHouse%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220726113823818.png"></p><h3 id="6、ClickHouse连接三方应用"><a href="#6、ClickHouse连接三方应用" class="headerlink" title="6、ClickHouse连接三方应用"></a>6、<code>ClickHouse</code>连接三方应用</h3><hr><h4 id="6-1、HDFS"><a href="#6-1、HDFS" class="headerlink" title="6.1、HDFS"></a>6.1、<code>HDFS</code></h4><blockquote><p>该引擎提供了集成<code>Apache Hadoop</code>生态系统通过允许管理数据 <code>HDFS</code>通过<code>ClickHouse</code>. 这个引擎是相似的 到 文件和 URL 引擎，但提供Hadoop特定的功能。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--调用格式</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> HDFS<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该 <code>URI</code>参数是<code>HDFS</code>中的整个文件<code>URI</code>。 该 <code>format</code> 参数指定一种可用的文件格式。 执行 <code>SELECT</code> 查询时，格式必须支持输入，并执行<code> INSERT queries – for output</code>. <code>The available formats are listed in the</code> 格式 科。 路径部分 <code>URI </code>可能包含水珠。 在这种情况下，表将是只读的。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> hdfs_engine_table <span class="token punctuation">(</span>    name String<span class="token punctuation">,</span>     <span class="token keyword">value</span> UInt32<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>HDFS<span class="token punctuation">(</span>'hdfs:<span class="token comment" spellcheck="true">//hdfs1:9000/other_storage', 'TSV')</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> hdfs_engine_table <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--查询数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> hdfs_engine_table <span class="token keyword">LIMIT</span> <span class="token number">2</span> ┌─name─┬─<span class="token keyword">value</span>─┐ │ one  │ <span class="token number">1</span>     │ │ two  │ <span class="token number">2</span>     │ └──────┴───────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：</p><ul><li>读取和写入可以并行</li><li>不支持<ul><li>ALTER 和 SELECT…SAMPLE 操作</li><li>索引</li><li>复制</li></ul></li></ul></blockquote><blockquote><p>示例</p><p>假设我们在HDFS上有几个TSV格式的文件，其中包含以下Uri:</p><ul><li>‘hdfs://hdfs1:9000/some_dir/some_fifile_1’</li><li>‘hdfs://hdfs1:9000/some_dir/some_fifile_2’</li><li>‘hdfs://hdfs1:9000/some_dir/some_fifile_3’</li><li>‘hdfs://hdfs1:9000/another_dir/some_fifile_1’</li><li>‘hdfs://hdfs1:9000/another_dir/some_fifile_2’</li><li>‘hdfs://hdfs1:9000/another_dir/some_fifile_3’</li></ul></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--第一种方式</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_with_range <span class="token punctuation">(</span>    name String<span class="token punctuation">,</span>     <span class="token keyword">value</span> UInt32<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> HDFS<span class="token punctuation">(</span>'hdfs:<span class="token comment" spellcheck="true">//hdfs1:9000/{some,another}_dir/some_file_{1..3}', 'TSV')</span><span class="token comment" spellcheck="true">--第二种方式</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_with_question_mark <span class="token punctuation">(</span>    name String<span class="token punctuation">,</span>     <span class="token keyword">value</span> UInt32<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> HDFS<span class="token punctuation">(</span>'hdfs:<span class="token comment" spellcheck="true">//hdfs1:9000/{some,another}_dir/some_file_?', 'TSV')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2、MYSQL"><a href="#6-2、MYSQL" class="headerlink" title="6.2、MYSQL"></a>6.2、<code>MYSQL</code></h4><blockquote><p><code>MySQL</code> 引擎可以对存储在远程 <code>MySQL</code> 服务器上的数据执行 <code>SELECT</code> 查询。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--调用格式</span>MySQL<span class="token punctuation">(</span><span class="token string">'host:port'</span><span class="token punctuation">,</span> <span class="token string">'database'</span><span class="token punctuation">,</span> <span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">[</span><span class="token punctuation">,</span> replace_query<span class="token punctuation">,</span> <span class="token string">'on_duplicate_clause'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>调用参数：</p><ol><li><code>host:port</code> — <code>MySQL</code> 服务器地址。</li><li><code>database</code> — 数据库的名称。</li><li><code>table</code> — 表名称。</li><li><code>user </code>— 数据库用户。</li><li><code>password</code> — 用户密码。</li><li><code>replace_query</code> — 将 <code>INSERT INTO </code>查询是否替换为 <code>REPLACE INTO</code> 的标志。如果 <code>replace_query=1</code>，则替换查询</li><li><code>on_duplicate_clause</code> — 将 <code>ON DUPLICATE KEY UPDATE</code> <code>'on_duplicate_clause' </code>表达式添加到 <code>INSERT </code>查询语句中。例如：<code>impression = VALUES(impression) + impression</code>。如果需要指定 <code>'on_duplicate_clause'</code>，则需要设置 <code>replace_query=0</code>。如果同时设置 <code>replace_query = 1</code> 和<code> 'on_duplicate_clause'</code>，则会抛出异常。</li></ol><p>此时，简单的 <code>WHERE</code> 子句（例如 =, !=, &gt;, &gt;=, &lt;, &lt;=）是在 MySQL 服务器上执行。</p><p><strong>其余条件以及 <code>LIMIT</code> 采样约束语句仅在对<code>MySQL</code>的查询完成后才在<code>ClickHouse</code>中执行</strong></p><p>MySQL 引擎<strong>不支持 可为空 数据类型</strong>，因此，当从MySQL表中读取数据时，NULL 将转换为指定列类型的默认值（通常为0或空字符串）。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mysql_table2 <span class="token punctuation">(</span>     <span class="token punctuation">`</span>id<span class="token punctuation">`</span> UInt32<span class="token punctuation">,</span>     <span class="token punctuation">`</span>name<span class="token punctuation">`</span> String<span class="token punctuation">,</span>     <span class="token punctuation">`</span>age<span class="token punctuation">`</span> UInt32 <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MySQL<span class="token punctuation">(</span><span class="token string">'10.1.192.183:3306'</span><span class="token punctuation">,</span> <span class="token string">'bigdata'</span><span class="token punctuation">,</span> <span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'lucas'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql_table2 ┌─id─┬─name──┬─age─┐ │ <span class="token number">3</span>  │ jack  │ <span class="token number">28</span>  │ │ <span class="token number">4</span>  │ lucas │ <span class="token number">18</span>  │ └────┴───────┴─────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3、Kafka"><a href="#6-3、Kafka" class="headerlink" title="6.3、Kafka"></a>6.3、<code>Kafka</code></h4><blockquote><p>此引擎与 <code>Apache Kafka</code>结合使用。</p><p><code>Kafka</code> 特性：</p><ol><li>发布或者订阅数据流。</li><li>容错存储机制。</li><li>处理流数据。</li></ol></blockquote><blockquote><p>老本格式</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">Kafka<span class="token punctuation">(</span>kafka_broker_list<span class="token punctuation">,</span> kafka_topic_list<span class="token punctuation">,</span> kafka_group_name<span class="token punctuation">,</span> kafka_format       <span class="token punctuation">[</span><span class="token punctuation">,</span> kafka_row_delimiter<span class="token punctuation">,</span> kafka_schema<span class="token punctuation">,</span> kafka_num_consumers<span class="token punctuation">]</span>     <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>新版格式</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">Kafka SETTINGS     kafka_broker_list <span class="token operator">=</span> <span class="token string">'localhost:9092'</span><span class="token punctuation">,</span>    kafka_topic_list <span class="token operator">=</span> <span class="token string">'topic1,topic2'</span><span class="token punctuation">,</span>    kafka_group_name <span class="token operator">=</span> <span class="token string">'group1'</span><span class="token punctuation">,</span>     kafka_format <span class="token operator">=</span> <span class="token string">'JSONEachRow'</span><span class="token punctuation">,</span>     kafka_row_delimiter <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">,</span>    kafka_schema <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     kafka_num_consumers <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>必要参数</strong>：</p><ol><li><code>kafka_broker_list</code> – 以逗号分隔的 <code>brokers</code> 列表 (localhost:9092)。</li><li><code>kafka_topic_list</code> – <code>topic</code> 列表 (<code>my_topic</code>)。</li><li><code>kafka_group_name</code> – <code>Kafka</code> 消费组名称 (<code>group1</code>)。如果不希望消息在集群中重复，请在每个分片中使用相同的组名。</li><li><code>kafka_format</code> – 消息体格式。使用与 SQL 部分的 <code>FORMAT</code> 函数相同表示方法，例如 <code>JSONEachRow</code>。了解详细信息，请参考 Formats 部分。</li></ol><p>可选参数：</p><ol><li><code>kafka_row_delimiter</code> - 每个消息体（记录）之间的分隔符。</li><li><code>kafka_schema</code> – 如果解析格式需要一个 <code>schema</code> 时，此参数必填。例如，普罗托船长 需要 <code>schema</code> 文件路径以及根对象 <code>schema.capnp:Message</code> 的名字。</li><li><code>kafka_num_consumers</code> – 单个表的消费者数量。默认值是：1，如果一个消费者的吞吐量不足，则指定更多的消费者。消费者的总数不应该超过 topic 中分区的数量，因为每个分区只能分配一个消费者。</li></ol></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> queue <span class="token punctuation">(</span>    <span class="token keyword">timestamp</span> UInt64<span class="token punctuation">,</span>    level String<span class="token punctuation">,</span>    message String <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> Kafka<span class="token punctuation">(</span><span class="token string">'localhost:9092'</span><span class="token punctuation">,</span> <span class="token string">'topic'</span><span class="token punctuation">,</span> <span class="token string">'group1'</span><span class="token punctuation">,</span> <span class="token string">'CSV'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> queue <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> queue2 <span class="token punctuation">(</span>     <span class="token keyword">timestamp</span> UInt64<span class="token punctuation">,</span>    level String<span class="token punctuation">,</span>    message String <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> Kafka SETTINGS kafka_broker_list <span class="token operator">=</span> <span class="token string">'localhost:9092'</span><span class="token punctuation">,</span>                        kafka_topic_list <span class="token operator">=</span> <span class="token string">'topic'</span><span class="token punctuation">,</span>                        kafka_group_name <span class="token operator">=</span> <span class="token string">'group1'</span><span class="token punctuation">,</span>                         kafka_format <span class="token operator">=</span> <span class="token string">'CSV'</span><span class="token punctuation">,</span>                         kafka_num_consumers <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4、JDBC"><a href="#6-4、JDBC" class="headerlink" title="6.4、JDBC"></a>6.4、<code>JDBC</code></h4><p>略！！！</p><h3 id="7、副本和分片"><a href="#7、副本和分片" class="headerlink" title="7、副本和分片"></a>7、副本和分片</h3><hr><h4 id="7-1、副本"><a href="#7-1、副本" class="headerlink" title="7.1、副本"></a>7.1、副本</h4><h5 id="7-1-1、副本的特点"><a href="#7-1-1、副本的特点" class="headerlink" title="7.1.1、副本的特点"></a>7.1.1、副本的特点</h5><ol><li>依赖<code>ZooKeeper</code>：在执行<code>INSERT</code>和<code>ALTER</code>查询的时候，<code>ReplicatedMergeTree</code>需要借助<code>ZooKeeper</code>的分布式协同能力，以实现多个副本之间的同步。但是在查询副本的时候，并不需要使用ZooKeeper。</li><li>表级别的副本：副本是在表级别定义的，所以每张表的副本配置都可以按照它的实际需求进行个性化定义，包括副本的数量，以及副本在集群内的分布位置等。</li><li>多主架构（<code>Multi Master</code>）：可以在任意一个副本上执行<code>INSERT</code>和<code>ALTER</code>查询，它们的效果是相同的。这些操作会借助<code>ZooKeeper</code>的协同能力被分发至每个副本以本地形式执行。</li><li><code>Block</code>数据块：在执行<code>INSERT</code>命令写入数据时，会依据<code>max_insert_block_size</code>的大小（默认1048576行）将数据切分成若干个Block数据块。所以Block数据块是数据写入的基本单元，并且具有写入的原子性和唯一性。</li><li>原子性：在数据写入时，一个<code>Block</code>块内的数据要么全部写入成功，要么全部失败。</li><li>唯一性：在写入一个<code>Block</code>数据块的时候，会按照当前<code>Block</code>数据块的数据顺序、数据行和数据大小等指标，计算<code>Hash</code>信息摘要并记录在案。在此之后，如果某个待写入的<code>Block</code>数据块与先前已被写入的<code>Block</code>数据块拥有相同的<code>Hash</code>摘要（<code>Block</code>数据块内数据顺序、数据大小和数据行均相同），则该<code>Block</code>数据块会被忽略。这项设计可以预防由异常原因引起的<code>Block</code>数据块重复写入的问题。</li></ol><h5 id="7-1-2、ZK的配置方式"><a href="#7-1-2、ZK的配置方式" class="headerlink" title="7.1.2、ZK的配置方式"></a>7.1.2、<code>ZK</code>的配置方式</h5><blockquote><p>新建配置文件 <code>/etc/clickhouse-server/confifig.d/metrika.xml</code></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改配置文件<code>/etc/clickhouse-server/confifig.xml</code></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include_from</span><span class="token punctuation">></span></span>/etc/clickhouse-server/config.d/metrika.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include_from</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper-servers<span class="token punctuation">"</span></span> <span class="token attr-name">optional</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="7-1-3副本的定义形式"><a href="#7-1-3副本的定义形式" class="headerlink" title="7.1.3副本的定义形式"></a>7.1.3副本的定义形式</h5><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-2、ReplicatedMergeTree原理"><a href="#7-2、ReplicatedMergeTree原理" class="headerlink" title="7.2、ReplicatedMergeTree原理"></a>7.2、<code>ReplicatedMergeTree</code>原理</h4><h5 id="7-2-1数据结构"><a href="#7-2-1数据结构" class="headerlink" title="7.2.1数据结构"></a>7.2.1数据结构</h5><blockquote><p>ZK 查询节点</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 6<span class="token punctuation">]</span> <span class="token function">ls</span> /clickhouse/tables/01/replicated_sales_5 <span class="token punctuation">[</span>metadata, temp, mutations, log, leader_election, columns, blocks, nonincrement_block_numbers, replicas, quorum, block_numbers<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>元数据</p><ol><li><code>metadata</code>：元数信息： 主键、采样表达式、分区键</li><li><code>columns</code>：列的字段的数据类型、字段名</li><li><code>replicats</code>：副本的名称</li></ol><p>标志：</p><ol><li><code>leder_election</code>：主副本的选举路径</li><li><code>blocks</code>：<code>hash</code>值（复制数据重复插入）、<code>partition_id</code></li><li><code>max_insert_block_size</code>: 1048576行</li><li><code>block_numbers</code>：在同一分区下block的顺序</li><li><code>quorum</code>：副本的数据量</li></ol><p>操作类：</p><ol><li><p><code>log</code> ：<code> log-000000</code> 常规操作，常规操作<code>insert</code> <code>merge</code>记录日志</p></li><li><p><code>mutations</code>： <code>delete</code> <code>update</code>记录日志</p></li><li><p><code>replicas</code>：副本记录</p></li><li><p><code>Entry</code>：</p><ol><li><p><code>LogEntry</code>和<code>MutationEntry</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">format</span> version: 4create_time: 2020-10-31 20:24:25 <span class="token function">source</span> replica: hdp-1 block_id: 202008_780388339403124112_11960209063776297222get 202008_0_0_0 <span class="token keyword">:</span> 分区信息，告诉hdp-2你要获取哪一个分区的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></blockquote><h5 id="7-2-2、副本协同的核心流程"><a href="#7-2-2、副本协同的核心流程" class="headerlink" title="7.2.2、副本协同的核心流程"></a>7.2.2、副本协同的核心流程</h5><p>7.2.2.1、<code>INSERT</code></p><blockquote><p>在<code>hdp-1</code>机器上创建一个副本实例：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token number">a1</span><span class="token punctuation">(</span>     id String<span class="token punctuation">,</span>     price Float64<span class="token punctuation">,</span>     create_time <span class="token keyword">DateTime</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>ReplicatedMergeTree<span class="token punctuation">(</span><span class="token string">'/clickhouse/tables/01/a1'</span><span class="token punctuation">,</span><span class="token string">'hdp-1'</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>内部流程：</p><ol><li>根据<code>zk_path</code>初始化所有的<code>zk</code>节点</li><li>在<code>replicas</code>节点下注册自己的副本实例<code>hdp-1</code></li><li>启动监听任务，监听<code>/log</code>日志节点</li><li>参与副本选举，选出主副本。选举的方式是向<code>leader_election/</code>插入子节点，第一个插入成功的副本就是主副本</li></ol></blockquote><blockquote><p>创建第二个副本实例：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token number">a1</span><span class="token punctuation">(</span>     id String<span class="token punctuation">,</span>     price Float64<span class="token punctuation">,</span>     create_time <span class="token keyword">DateTime</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>ReplicatedMergeTree<span class="token punctuation">(</span><span class="token string">'/clickhouse/tables/01/a1'</span><span class="token punctuation">,</span><span class="token string">'hdp-2'</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>hdp-2</code>参与副本选举，<code>hdp-1</code>副本成为主副本</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---向第一个副本实例插入数据：</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token number">a1</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'A001'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'2020-08-20 08:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>插入命令执行后，在本地完成分区目录的写入，接着向<code>block</code>写入该分区的<code>block_id</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> /clickhouse/tables/01/a1/blocks <span class="token punctuation">[</span>202008_780388339403124112_11960209063776297222<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果设置了<code>inser_quorum</code>参数，且<code>insert_quorum&gt;=2</code>,则<code>hdp-2</code>会进一步监控已完成写入操作的副本个数，直到写入副本个数<code>&gt;= insert_quorum</code>的时候，整个写入操作才算完成。</p></blockquote><blockquote><p>接下来，<code>hdp-1</code>副本发起向log日志推送操作日志<code>log-0000000000</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 11<span class="token punctuation">]</span> <span class="token function">ls</span> /clickhouse/tables/01/a1/log <span class="token punctuation">[</span>log-0000000000<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>操作日式的内容为：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 12<span class="token punctuation">]</span> get /clickhouse/tables/01/a1/log/log-0000000000 <span class="token function">format</span> version: 4 create_time: 2020-08-24 18:26:22 <span class="token function">source</span> replica: hdp-1 block_id: 202008_780388339403124112_11960209063776297222 get 202008_0_0_0 cZxid <span class="token operator">=</span> 0x5000002a0 ctime <span class="token operator">=</span> Mon Aug 24 18:26:22 CST 2020 mZxid <span class="token operator">=</span> 0x5000002a0mtime <span class="token operator">=</span> Mon Aug 24 18:26:22 CST 2020 pZxid <span class="token operator">=</span> 0x5000002a0 cversion <span class="token operator">=</span> 0 dataVersion <span class="token operator">=</span> 0 aclVersion <span class="token operator">=</span> 0 ephemeralOwner <span class="token operator">=</span> 0x0 dataLength <span class="token operator">=</span> 150 numChildren <span class="token operator">=</span> 0 <span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 13<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接下来：第二个副本实例拉取<code>Log</code>日志：</p><p>​<code>hdp-2</code>会一直监听<code>/log</code>节点变化，当<code>hdp-1</code>推送了<code>/log/log-0000000000</code>之后，<code>hdp-2</code>便会触发日志的拉取任务，并更新l<code>og_pointer</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 15<span class="token punctuation">]</span> get /clickhouse/tables/01/a1/replicas/hdp-2/log_pointer 1cZxid <span class="token operator">=</span> 0x500000291 ctime <span class="token operator">=</span> Mon Aug 24 18:25:32 CST 2020 mZxid <span class="token operator">=</span> 0x5000002a2 mtime <span class="token operator">=</span> Mon Aug 24 18:26:22 CST 2020 pZxid <span class="token operator">=</span> 0x500000291 cversion <span class="token operator">=</span> 0 dataVersion <span class="token operator">=</span> 2 aclVersion <span class="token operator">=</span> 0 ephemeralOwner <span class="token operator">=</span> 0x0 dataLength <span class="token operator">=</span> 1 numChildren <span class="token operator">=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在拉取<code>LogEntry</code>之后，它并不会立即执行，而是将其转成任务对象放入队列</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 8<span class="token punctuation">]</span> <span class="token function">ls</span> /clickhouse/tables/01/a1/replicas/hdp-2/queue <span class="token punctuation">[</span>queue-0000000000<span class="token punctuation">]</span><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 9<span class="token punctuation">]</span> get /clickhouse/tables/01/a1/replicas/hdp-2/queue/queue- 0000000000 <span class="token function">format</span> version: 4 create_time: 2020-08-24 18:26:22 <span class="token function">source</span> replica:hdp-1block_id: 202008_780388339403124112_11960209063776297222 get 202008_0_0_0 cZxid <span class="token operator">=</span> 0x5000002a2 ctime <span class="token operator">=</span> Mon Aug 24 18:26:22 CST 2020 mZxid <span class="token operator">=</span> 0x5000002a2 mtime <span class="token operator">=</span> Mon Aug 24 18:26:22 CST 2020 pZxid <span class="token operator">=</span> 0x5000002a2 cversion <span class="token operator">=</span> 0 dataVersion <span class="token operator">=</span> 0 aclVersion <span class="token operator">=</span> 0 ephemeralOwner <span class="token operator">=</span> 0x0 dataLength <span class="token operator">=</span> 150 numChildren <span class="token operator">=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3、分片"><a href="#7-3、分片" class="headerlink" title="7.3、分片"></a>7.3、分片</h4><blockquote><p>配置文件</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>perftest_3shards_1replicas</span><span class="token punctuation">></span></span> --- 集群的名字             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>perftest_3shards_1replicas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>hdp-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>  --分片信息        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>hdp-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_compression</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size_ratio</span><span class="token punctuation">></span></span>0.01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size_ratio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span><span class="token punctuation">></span></span>lz4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_compression</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--案例</span><span class="token keyword">create</span> <span class="token keyword">table</span> clutable <span class="token keyword">on</span> cluster perftest_3shards_1replicas<span class="token punctuation">(</span>    id UInt64<span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> ReplicatedMergeTree<span class="token punctuation">(</span><span class="token string">'/clickhouse/tables/{shard}/clutable'</span><span class="token punctuation">,</span><span class="token string">'{replica}'</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4、Distributed用法"><a href="#7-4、Distributed用法" class="headerlink" title="7.4、Distributed用法"></a>7.4、<code>Distributed</code>用法</h4><blockquote><p><code>Distributed</code>表引擎：</p><ol><li><code>all</code> ： 全局查询的</li><li><code>local</code>：真正的保存数据的表</li></ol></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--建立 all 引擎的表</span><span class="token keyword">create</span> <span class="token keyword">table</span>  distributed_all <span class="token keyword">on</span> cluster perftest_3sharrds_1replicas<span class="token punctuation">(</span>    id Uint32<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">Distributed</span><span class="token punctuation">(</span>                    perftest_3sharrds_1replicas<span class="token punctuation">,</span><span class="token comment" spellcheck="true">--集群名字</span>                    <span class="token string">'default'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--用户</span>                    distributed_local<span class="token punctuation">,</span><span class="token comment" spellcheck="true">--保存数据的表</span>                    rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--分片</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--建立 local 引擎的表  一台机机器建立即可 ，所有机器都会有</span><span class="token keyword">create</span> <span class="token keyword">table</span>  distributed_local <span class="token keyword">on</span> cluster perftest_3sharrds_1replicas<span class="token punctuation">(</span>    id Uint32<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span>MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span><span class="token keyword">partition</span> <span class="token keyword">by</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--all 插入数据   数据只存在某一台机器的local 表中</span><span class="token keyword">insert</span> <span class="token keyword">into</span> distributed_all <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr><h2 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a><code>SQL</code>语法</h2><blockquote><p>创建数据库   </p><p>执行完成以后，会在<code>clickhouse</code>的安装路径后生成<code>mydatabase</code>的文件目录：</p><p>​<code>cd /var/lib/clickhouse/data</code></p><p>在<code>/var/lib/clickhouse/metadata</code>路径下，会生成用于恢复数据库的<code>.sql</code>文件</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">databases</span> mydatabase<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>创建表</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--方式一</span><span class="token keyword">create</span> <span class="token keyword">table</span> my_table <span class="token punctuation">(</span> Title String<span class="token punctuation">,</span> URL String <span class="token punctuation">,</span>EventTime <span class="token keyword">DateTime</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>Memory <span class="token comment" spellcheck="true">--方式二</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> new_db<span class="token punctuation">.</span>hits_v1 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">.</span>hits_v1 <span class="token keyword">engine</span><span class="token operator">=</span>TinyLog <span class="token comment" spellcheck="true">--方式三</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> hits_v1_1 <span class="token keyword">engine</span><span class="token operator">=</span>Memory <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> hits_v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建临时表</p><p>特点：</p><ol><li>如临时表和正常表名字相同，临时表优先</li><li>临时表的表引擎只能是Memory，数据是临时的，断电即无的数据。</li><li>更多的是应用在clickhouse内部，是数据在集群间传播的载体</li></ol></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> tmp_v1 <span class="token punctuation">(</span>createtime <span class="token keyword">Datetime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>创建分区表</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> partition_v1 <span class="token punctuation">(</span>     <span class="token punctuation">`</span>ID<span class="token punctuation">`</span> String<span class="token punctuation">,</span>    <span class="token punctuation">`</span>URL<span class="token punctuation">`</span> String<span class="token punctuation">,</span>     <span class="token punctuation">`</span>EventTime<span class="token punctuation">`</span> <span class="token keyword">Date</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMM<span class="token punctuation">(</span>EventTime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查询表结构</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">desc</span> tableName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除表</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> tableName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>视图：</p><p>普通视图和物化视图</p><ol><li>普通视图：不保存数据，只是一层单纯的select查询映射，起着简化查询、明晰语义的作用。</li><li>物化视图：保存数据，如果源表被写入新数据，物化视图也会同步更新。</li><li>POPULATE修饰符：决定在创建物化视图的过程中是否将源表的数据同步到物化视图里。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse 的使用教程（一）</title>
      <link href="/2022/07/18/clickhouse-yi/"/>
      <url>/2022/07/18/clickhouse-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本篇文章仅供参考</p></blockquote><hr><h2 id="一、-ClickHouse-概述"><a href="#一、-ClickHouse-概述" class="headerlink" title="一、 ClickHouse 概述"></a>一、 <code>ClickHouse</code> 概述</h2><blockquote><p><code>ClickHouse</code> 是一个快速开源的**<code>OLAP</code>数据库管理系统<strong>，它是</strong>面向列的**，允许使用<code>SQL</code>查询实时生成分析报告</p></blockquote><h3 id="1、-ClickHouse-的特点"><a href="#1、-ClickHouse-的特点" class="headerlink" title="1、 ClickHouse 的特点"></a>1、 <code>ClickHouse</code> 的特点</h3><ul><li><p>真正的面向列的<code>DBMS</code></p><p>① 减少数据扫描</p><p>② 减少数据传输大小</p></li><li><p>数据高校压缩</p></li><li><p>磁盘存储的数据</p></li><li><p>多核并行处理</p></li><li><p>在多个服务器上分布式处理</p></li><li><p><code>SQL</code> 语法支持</p><blockquote><p>支持的查询包括<code>GROUP BY</code>, <code>ORDER BY</code>;</p><p>子查询在<code>FROM</code>，<code>IN</code>，<code>JOIN</code>子句中被支持;</p><p>标量子查询支持;</p><p>关联子查询不支持;</p><p>真是因为<code>ClickHouse</code>提供了标准协议的<code>SQL</code>查询接口，使得现有可视化分析系统能够轻松与他集成对接;</p></blockquote></li><li><p>向量化引擎</p></li><li><p>实时数据更新</p></li><li><p>索引</p></li><li><p>适合在线查询</p></li><li><p>支持近似预估计算</p></li><li><p>支持嵌套的数据结构</p></li><li><p>支持数组作为数据类型</p></li><li><p>支持限制查询复杂性一斤配额</p></li><li><p>复制数据和对数据完整性的支持</p></li></ul><h3 id="2、-ClickHouse-应用场景"><a href="#2、-ClickHouse-应用场景" class="headerlink" title="2、 ClickHouse 应用场景"></a>2、 <code>ClickHouse</code> 应用场景</h3><ul><li><p>电信行业用于存储数据和统计数据使用。</p></li><li><p>新浪微博用于用户行为数据记录和分析工作。</p></li><li><p>.用于广告网络和<code>RTB</code>,电子商务的用户行为分析。</p></li><li><p>信息安全里面的日志分析。</p></li><li><p>检测和遥感信息的挖掘。</p></li><li><p>商业智能。</p></li><li><p>.网络游戏以及物联网的数据处理和价值数据分析。</p></li><li><p>最大的应用来自于<code>Yandex</code>的统计分析服务<code>Yandex.Metrica</code>，类似于谷歌<code>Analytics</code>(GA)，或友盟统计，小米统计，帮助网站或移动应用进行数据分析和精细化运营工具，据称<code>Yandex.Metrica</code>为世界上第二大的网站分析平台。</p><p><code>ClickHouse</code>在这个应用中，部署了近四百台机器，每天支持200亿的事件和历史总记录超过13万亿条记录，这些记录都存有原始数据（非聚合数据），随时可以使用<code>SQL</code>查询和分析，生成用户报告。</p></li></ul><h2 id="二、ClickHouse-安装"><a href="#二、ClickHouse-安装" class="headerlink" title="二、ClickHouse 安装"></a>二、<code>ClickHouse</code> 安装</h2><hr><blockquote><p>官网：<a href="https://clickhouse.yandex/">https://clickhouse.yandex/</a></p><p>下载地址：<a href="http://repo.red-soft.biz/repos/clickhouse/stable/el6/">http://repo.red-soft.biz/repos/clickhouse/stable/el6/</a></p></blockquote><h3 id="1、-单机模式安装"><a href="#1、-单机模式安装" class="headerlink" title="1、 单机模式安装"></a>1、 单机模式安装</h3><p>1.1、上传4个文件到<code>/root/apps/software/clickhouse_rpm</code></p><pre class="line-numbers language-bash"><code class="language-bash">-rw-r--r--. 1 root root 6376 Aug 25 11:19 clickhouse-client-20.5.4.40-1.el7.x86_64.rpm -rw-r--r--. 1 root root 57490408 Aug 25 11:19 clickhouse-common-static-20.5.4.40-1.el7.x86_64.rpm -rw-r--r--. 1 root root 35102796 Aug 25 11:19 clickhouse-server-20.5.4.40-.el7.x86_64.rpm -rw-r--r--. 1 root root 12988 Aug 25 11:19 clickhouse-server-common-20.5.4.40-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.2、分别安装这4个<code>rpm</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh ./*.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3、启动<code>ClickServer</code></p><p>1.3.1、前台启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse- server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3.2、后台启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nohup sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse- server/config.xml >null 2>&amp;1 &amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.4、 使用<code>client</code>连接<code>server</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># clickhouse-client -m </span>ClickHouse client version 20.5.4.40. Connecting to localhost:9000 as user default. onnected to ClickHouse server version 20.5.4 revision 54435. hdp-1 :<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、-分布式集群安装"><a href="#2、-分布式集群安装" class="headerlink" title="2、 分布式集群安装"></a>2、 分布式集群安装</h3><p>2.1、在其他机器上面执行单机安装的所有步骤</p><p>2.2、分发配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>include_from<span class="token operator">></span>/etc/clickhouse-server/config.d/metrika.xml<span class="token operator">&lt;</span>/include_from<span class="token operator">></span><span class="token comment" spellcheck="true">##：zookeeper上面添加之后分发</span><span class="token punctuation">[</span>root@hdp-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rsync-script /etc/clickhouse-server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.3、在三台机器的<code>/etc/clickhouse-server/confifig.d</code>目录下新建<code>metrika.xml</code>文件</p><blockquote><p>注意：标签中的内容对应自己的主机名，需要根据机器名字不同去修改 hdp-1</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>yandex<span class="token operator">></span>    <span class="token operator">&lt;</span>clickhouse_remote_servers<span class="token operator">></span>        <span class="token operator">&lt;</span>perftest_3shards_1replicas<span class="token operator">></span>            <span class="token operator">&lt;</span>shard<span class="token operator">></span>                <span class="token operator">&lt;</span>internal_replication<span class="token operator">></span>true<span class="token operator">&lt;</span>/internal_replication<span class="token operator">></span>                <span class="token operator">&lt;</span>replica<span class="token operator">></span>                    <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-1<span class="token operator">&lt;</span>/host<span class="token operator">></span>                    <span class="token operator">&lt;</span>port<span class="token operator">></span>9000<span class="token operator">&lt;</span>/port<span class="token operator">></span>                <span class="token operator">&lt;</span>/replica<span class="token operator">></span>            <span class="token operator">&lt;</span>/shard<span class="token operator">></span>            <span class="token operator">&lt;</span>shard<span class="token operator">></span>                <span class="token operator">&lt;</span>replica<span class="token operator">></span>                    <span class="token operator">&lt;</span>internal_replication<span class="token operator">></span>true<span class="token operator">&lt;</span>/internal_replication<span class="token operator">></span>                    <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-2<span class="token operator">&lt;</span>/host<span class="token operator">></span>                    <span class="token operator">&lt;</span>port<span class="token operator">></span>9000<span class="token operator">&lt;</span>/port<span class="token operator">></span>                <span class="token operator">&lt;</span>/replica<span class="token operator">></span>            <span class="token operator">&lt;</span>/shard<span class="token operator">></span>            <span class="token operator">&lt;</span>shard<span class="token operator">></span>                <span class="token operator">&lt;</span>internal_replication<span class="token operator">></span>true<span class="token operator">&lt;</span>/internal_replication<span class="token operator">></span>                <span class="token operator">&lt;</span>replica<span class="token operator">></span>                    <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-3<span class="token operator">&lt;</span>/host<span class="token operator">></span>                    <span class="token operator">&lt;</span>port<span class="token operator">></span>9000<span class="token operator">&lt;</span>/port<span class="token operator">></span>                <span class="token operator">&lt;</span>/replica<span class="token operator">></span>            <span class="token operator">&lt;</span>/shard<span class="token operator">></span>        <span class="token operator">&lt;</span>/perftest_3shards_1replicas<span class="token operator">></span>    <span class="token operator">&lt;</span>/clickhouse_remote_servers<span class="token operator">></span>    <span class="token operator">&lt;</span>zookeeper-servers<span class="token operator">></span>        <span class="token operator">&lt;</span>node index<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-1<span class="token operator">&lt;</span>/host<span class="token operator">></span>            <span class="token operator">&lt;</span>port<span class="token operator">></span>2181<span class="token operator">&lt;</span>/port<span class="token operator">></span>        <span class="token operator">&lt;</span>/node<span class="token operator">></span>        <span class="token operator">&lt;</span>node index<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-2<span class="token operator">&lt;</span>/host<span class="token operator">></span>            <span class="token operator">&lt;</span>port<span class="token operator">></span>2181<span class="token operator">&lt;</span>/port<span class="token operator">></span>        <span class="token operator">&lt;</span>/node<span class="token operator">></span>        <span class="token operator">&lt;</span>node index<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>host<span class="token operator">></span>hdp-3<span class="token operator">&lt;</span>/host<span class="token operator">></span>            <span class="token operator">&lt;</span>port<span class="token operator">></span>2181<span class="token operator">&lt;</span>/port<span class="token operator">></span>        <span class="token operator">&lt;</span>/node<span class="token operator">></span>    <span class="token operator">&lt;</span>/zookeeper-servers<span class="token operator">></span>    <span class="token operator">&lt;</span>macros<span class="token operator">></span>        <span class="token operator">&lt;</span>shard<span class="token operator">></span>01<span class="token operator">&lt;</span>/shard<span class="token operator">></span>        <span class="token operator">&lt;</span>replica<span class="token operator">></span>hdp-1<span class="token operator">&lt;</span>/replica<span class="token operator">></span>    <span class="token operator">&lt;</span>/macros<span class="token operator">></span>    <span class="token operator">&lt;</span>networks<span class="token operator">></span>        <span class="token operator">&lt;</span>ip<span class="token operator">></span>::/0<span class="token operator">&lt;</span>/ip<span class="token operator">></span>    <span class="token operator">&lt;</span>/networks<span class="token operator">></span>    <span class="token operator">&lt;</span>clickhouse_compression<span class="token operator">></span>        <span class="token operator">&lt;</span>case<span class="token operator">></span>            <span class="token operator">&lt;</span>min_part_size<span class="token operator">></span>10000000000<span class="token operator">&lt;</span>/min_part_size<span class="token operator">></span>            <span class="token operator">&lt;</span>min_part_size_ratio<span class="token operator">></span>0.01<span class="token operator">&lt;</span>/min_part_size_ratio<span class="token operator">></span>            <span class="token operator">&lt;</span>method<span class="token operator">></span>lz4<span class="token operator">&lt;</span>/method<span class="token operator">></span>        <span class="token operator">&lt;</span>/case<span class="token operator">></span>    <span class="token operator">&lt;</span>/clickhouse_compression<span class="token operator">></span><span class="token operator">&lt;</span>/yandex<span class="token operator">></span><span class="token operator">&lt;</span>macros<span class="token operator">></span>    <span class="token operator">&lt;</span>replica<span class="token operator">></span>hdp-1<span class="token operator">&lt;</span>/replica<span class="token operator">></span><span class="token operator">&lt;</span>/macros<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.3.4、三台机器启动<code>ClickServer</code></p><blockquote><p>注意：此方式为<code>clickhouse</code>官方提供的前台启动方式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdp-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>另外也可以：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> clickhouse-server start或者systemctl start clickhouse-server方式启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（三）</title>
      <link href="/2022/06/28/redis-san/"/>
      <url>/2022/06/28/redis-san/</url>
      
        <content type="html"><![CDATA[<h1 id="三、Redis-核心原理"><a href="#三、Redis-核心原理" class="headerlink" title="三、Redis 核心原理"></a>三、<code>Redis</code> 核心原理</h1><hr><h2 id="1、Redis-持久化机制"><a href="#1、Redis-持久化机制" class="headerlink" title="1、Redis 持久化机制"></a>1、<code>Redis</code> 持久化机制</h2><hr><blockquote><p>为什么要<strong>持久化</strong>？</p><ul><li>为了快速恢复数据，而不是为了存储数据</li><li><code>Redis</code>持久化不保证数据的完整性,所以不用来存储数据</li></ul><p>通过<code>info</code>命令可以查看持久化信息</p></blockquote><h3 id="①RDB"><a href="#①RDB" class="headerlink" title="①RDB"></a>①<code>RDB</code></h3><blockquote><p><code>RDB</code>（<code>Redis DataBase</code>），是<code>redis</code>默认的存储方式，<code>RDB</code>方式是通过<strong>快照</strong>（ <code>snapshotting</code> ）完成</p><p>的。</p></blockquote><h4 id="a-触发快照的方式"><a href="#a-触发快照的方式" class="headerlink" title="a. 触发快照的方式"></a>a. 触发快照的方式</h4><ul><li>符合自定义配置的快照规则 </li><li>执行<code>save</code>或者<code>bgsave</code>命令</li><li>执行<code>flushall</code>命令</li><li>执行主从复制操作 (第一次)</li></ul><h4 id="b-配置参数定期执行"><a href="#b-配置参数定期执行" class="headerlink" title="b. 配置参数定期执行"></a>b. 配置参数定期执行</h4><blockquote><p>在<code>redis.conf</code>中配置：<code>save</code> 多少秒内 数据变了多少</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">save <span class="token string">""</span> <span class="token comment" spellcheck="true"># 不使用RDB存储 不能主从 </span>save 900 1 <span class="token comment" spellcheck="true"># 表示15分钟（900秒钟）内至少1个键被更改则进行快照。 </span>save 300 10 <span class="token comment" spellcheck="true"># 表示5分钟（300秒）内至少10个键被更改则进行快照。</span>save 60 10000 <span class="token comment" spellcheck="true"># 表示1分钟内至少10000个键被更改则进行快照。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>漏斗设计 提供性能</p></blockquote><h4 id="c-命令显示触发"><a href="#c-命令显示触发" class="headerlink" title="c. 命令显示触发"></a>c. 命令显示触发</h4><blockquote><p>在客户端输入<code>bgsave</code>命令。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> bgsave Background saving started<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="②RDB执行流程（原理）"><a href="#②RDB执行流程（原理）" class="headerlink" title="②RDB执行流程（原理）"></a>②<code>RDB</code>执行流程（原理）</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%B8%89%EF%BC%89/image-20220705141345979.png"></p><ul><li><p><code>Redis</code>父进程首先判断：当前是否在执行<code>save</code>，或<code>bgsave/bgrewriteaof</code>（<code>aof</code>文件重写命令）的子进程，如果在执行则<code>bgsave</code>命令直接返回。</p></li><li><p>父进程执行**<code>fork</code>**（调用OS函数复制主进程）操作创建子进程，这个复制过程中父进程是阻塞的，<code>Redis</code>不能执行来自客户端的任何命令。</p></li><li><p>父进程<code>fork</code>后，<code>bgsave</code>命令返回”<code>Background saving started</code>”信息并不再阻塞父进程，并可以响应其他命令。</p></li><li><p>子进程创建<code>RDB</code>文件，根据父进程内存快照生成临时快照文件，完成后对原有文件进行原子替换。</p><p>（<code>RDB</code>始终完整）</p></li><li><p>子进程发送信号给父进程表示完成，父进程更新统计信息。</p></li><li><p>父进程<code>fork</code>子进程后，继续工作。</p></li></ul><h3 id="③RDB文件结构"><a href="#③RDB文件结构" class="headerlink" title="③RDB文件结构"></a>③<code>RDB</code>文件结构</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%B8%89%EF%BC%89/image-20220705141839232.png"></p><ul><li><p>头部5字节固定为“<code>REDIS</code>”字符串</p></li><li><p>4字节“<code>RDB</code>”版本号（不是<code>Redis</code>版本号），当前为9，填充后为0009</p></li><li><p>辅助字段，以<code>key-value</code>的形式</p></li><li><p>存储数据库号码</p></li><li><p>字典大小</p></li><li><p>过期key </p></li><li><p>主要数据，以key-value的形式存储</p></li><li><p>结束标志</p></li><li><p>校验和，就是看文件是否损坏，或者是否被修改。</p></li><li><blockquote><p>可以用winhex打开dump.rdb文件查看。</p></blockquote></li></ul><h3 id="④RDB的优缺点"><a href="#④RDB的优缺点" class="headerlink" title="④RDB的优缺点"></a>④<code>RDB</code>的优缺点</h3><ul><li>优点：<code>RDB</code>是二进制压缩文件，占用空间小，便于传输（传给<code>slaver</code>）主进程<code>fork</code>子进程，可以最大化<code>Redis</code>性能，主进程不能太大，<code>Redis</code>的数据量不能太大，复制过程中主进程阻塞</li><li>不保证数据完整性，会丢失最后一次快照以后更改的所有数据</li></ul><h3 id="⑤AOF"><a href="#⑤AOF" class="headerlink" title="⑤AOF"></a>⑤<code>AOF</code></h3><blockquote><p><code>AOF</code>（<code>append only fifile</code>）是<code>Redis</code>的另一种持久化方式。<code>Redis</code>默认情况下是不开启的。开启<code>AOF</code>持久化后<code>Redis</code> 将所有对数据库进行过<strong>写入的命令（及其参数）</strong>（<code>RESP</code>）记录到 <code>AOF</code> 文件，以此达到记录数据库状态的目的，这样当<code>Redis</code>重启后只要按顺序回放这些命令就会恢复到原始状态了。</p><p><code>AOF</code>会记录过程，<code>RDB</code>只管结果</p></blockquote><h3 id="⑥AOF持久化实现"><a href="#⑥AOF持久化实现" class="headerlink" title="⑥AOF持久化实现"></a>⑥<code>AOF</code>持久化实现</h3><blockquote><p>配置 <code>redis.conf</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以通过修改redis.conf配置文件中的appendonly参数开启 </span>appendonly <span class="token function">yes</span> <span class="token comment" spellcheck="true"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的。</span><span class="token function">dir</span> ./ <span class="token comment" spellcheck="true"># 默认的文件名是appendonly.aof，可以通过appendfilename参数修改 </span>appendfilename appendonly.aof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑦AOF原理"><a href="#⑦AOF原理" class="headerlink" title="⑦AOF原理"></a>⑦<code>AOF</code>原理</h3><blockquote><p><code>AOF</code>文件中存储的是<code>redis</code>的命令，同步命令到 <code>AOF</code> 文件的整个过程可以分为三个阶段：</p><ol><li>命令传播：<code>Redis</code> 将执行完的命令、命令的参数、命令的参数个数等信息发送到 <code>AOF</code> 程序中。</li><li>缓存追加：<code>AOF</code> 程序根据接收到的命令数据，将命令转换为网络通讯协议的格式，然后将协议内容追加到服务器的 <code>AOF</code> 缓存中。</li><li>文件写入和保存：<code>AOF </code>缓存中的内容被写入到 <code>AOF </code>文件末尾，如果设定的 <code>AOF</code> 保存条件被满足的话，<code>fsync</code> 函数或者 f<code>datasync</code> 函数会被调用，将写入的内容真正地保存到磁盘中。</li></ol></blockquote><h4 id="a-命令传播"><a href="#a-命令传播" class="headerlink" title="a. 命令传播"></a>a. <strong>命令传播</strong></h4><blockquote><p>当一个 <code>Redis </code>客户端需要执行命令时， 它通过网络连接， 将协议文本发送给<code> Redis</code> 服务器。服务器在接到客户端的请求之后， 它会根据协议文本的内容， 选择适当的命令函数，并将各个参数从字符串文本转换为 <code>Redis </code>字符串对象（ <code>StringObject</code> ）。每当命令函数成功执行之后， 命令参数都会被传播到<code>AOF</code> 程序。</p></blockquote><h4 id="b-缓存追加"><a href="#b-缓存追加" class="headerlink" title="b. 缓存追加"></a>b. <strong>缓存追加</strong></h4><blockquote><p>当命令被传播到 <code>AOF </code>程序之后， 程序会根据命令以及命令的参数， 将命令从字符串对象转换回原来的协议文本。协议文本生成之后， 它会被追加到 <code>redis.h/redisServer</code> 结构的 <code>aof_buf </code>末尾。<code>redisServer</code> 结构维持着 <code>Redis </code>服务器的状态<code>aof_buf </code>域则保存着所有等待写入到 <code>AOF </code>文件的协议文本（<code>RESP</code>）。</p></blockquote><h4 id="c-文件写入和保存"><a href="#c-文件写入和保存" class="headerlink" title="c. 文件写入和保存"></a>c. <strong>文件写入和保存</strong></h4><blockquote><p>每当服务器常规任务函数被执行、 或者事件处理器被执行时， <code>aof.c/flflushAppendOnlyFile </code>函数都会被调用， 这个函数执行以下两个工作：</p><ul><li><code>WRITE</code>：根据条件，将 <code>aof_buf </code>中的缓存写入到 AOF 文件。</li><li><code>SAVE</code>：根据条件，调用 <code>fsync</code> 或 <code>fdatasync </code>函数，将 <code>AOF</code> 文件保存到磁盘中。</li></ul></blockquote><h4 id="d-AOF保存模式"><a href="#d-AOF保存模式" class="headerlink" title="d.AOF保存模式"></a>d.<code>AOF</code>保存模式</h4><ul><li><p><code>AOF_FSYNC_NO </code>：不保存。</p></li><li><p><code>AOF_FSYNC_EVERYSEC</code> ：每一秒钟保存一次。（默认）</p></li><li><p><code>AOF_FSYNC_ALWAYS</code> ：每执行一个命令保存一次。（不推荐）</p><p>对于三种 <code>AOF </code>保存模式， 它们对服务器主进程的阻塞情况如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%B8%89%EF%BC%89/image-20220705143858464.png"></p></li></ul><h3 id="⑧AOF重写、触发方式、混合持久化"><a href="#⑧AOF重写、触发方式、混合持久化" class="headerlink" title="⑧AOF重写、触发方式、混合持久化"></a>⑧<code>AOF</code>重写、触发方式、混合持久化</h3><h4 id="a-重写"><a href="#a-重写" class="headerlink" title="a.重写"></a>a.重写</h4><blockquote><p><code>AOF</code>记录数据的变化过程，越来越大，需要重写“瘦身”</p><p><code>Redis</code>可以在 <code>AOF</code>体积变得过大时，自动地在后台（<code>Fork</code>子进程）对 <code>AOF</code>进行重写。重写后的新 <code>AOF</code>文件包含了恢复当前数据集所需的最小命令集合。 所谓的“重写”其实是一个有歧义的词语， 实际上，<code>AOF</code> 重写并不需要对原有的 <code>AOF</code> 文件进行任何写入和读取， 它针对的是数据库中键的当前值。</p></blockquote><blockquote><p><code>Redis</code> 不希望<code>AOF</code>重写造成服务器无法处理请求， 所以 <code>Redis</code> 决定将 <code>AOF</code> 重写程序放到（后台）子进</p><p>程里执行， 这样处理的最大好处是：</p><ol><li>子进程进行 AOF 重写期间，主进程可以继续处理命令请求。</li><li>子进程带有主进程的数据副本，使用子进程而不是线程，可以在避免锁的情况下，保证数据的安全性。</li><li><code>Redis </code>增加了一个<code>AOF</code>重写缓存， 这个缓存在 <code>fork</code> 出子进程之后开始启用，<code>Redis </code>主进程在接到新的写命令之后， 除了会将这个写命令的协议内容追加到现有的 <code>AOF</code> 文件之外，还会追加到这个缓存中。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%B8%89%EF%BC%89/image-20220705150426874.png"></p></blockquote><h4 id="b-触发"><a href="#b-触发" class="headerlink" title="b. 触发"></a>b. 触发</h4><ul><li><p>配置方式  在<code>redis.conf</code>中配置</p><p>```bash</p></li></ul><h1 id="表示当前aof文件大小超过上一次aof文件大小的百分之多少的时候会进行重写。如果之前没有重写过，-以启动时aof文件大小为准"><a href="#表示当前aof文件大小超过上一次aof文件大小的百分之多少的时候会进行重写。如果之前没有重写过，-以启动时aof文件大小为准" class="headerlink" title="表示当前aof文件大小超过上一次aof文件大小的百分之多少的时候会进行重写。如果之前没有重写过， 以启动时aof文件大小为准"></a>表示当前aof文件大小超过上一次aof文件大小的百分之多少的时候会进行重写。如果之前没有重写过， 以启动时aof文件大小为准</h1><p>  auto-aof-rewrite-percentage 100</p><h1 id="限制允许重写最小aof文件大小，也就是文件大小小于64mb的时候，不需要进行优化"><a href="#限制允许重写最小aof文件大小，也就是文件大小小于64mb的时候，不需要进行优化" class="headerlink" title="限制允许重写最小aof文件大小，也就是文件大小小于64mb的时候，不需要进行优化"></a>限制允许重写最小aof文件大小，也就是文件大小小于64mb的时候，不需要进行优化</h1><p>  auto-aof-rewrite-min-size 64mb</p><pre><code>- 执行`bgrewriteaof`命令```bash127.0.0.1:6379&gt; bgrewriteaof Background append only file rewriting started</code></pre><h4 id="c-混合持久化"><a href="#c-混合持久化" class="headerlink" title="c. 混合持久化"></a>c. 混合持久化</h4><blockquote><p><code>RDB</code>和<code>AOF</code>各有优缺点，<code>Redis 4.0</code> 开始支持<code>rdb</code>和<code>aof</code>的混合持久化。如果把混合持久化打开，<code>aof</code></p><p><code>rewrite </code>的时候就直接把<code> rdb</code> 的内容写到 <code>aof</code> 文件开头。</p><p><code>RDB</code>的头+<code>AOF</code>的身体—-&gt;<code>appendonly.aof</code></p></blockquote><blockquote><p>开启混合持久化   <code>redis.conf</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">aof-use-rdb-preamble <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="⑨AOF文件的载入与数据的还原"><a href="#⑨AOF文件的载入与数据的还原" class="headerlink" title="⑨AOF文件的载入与数据的还原"></a>⑨<code>AOF</code>文件的载入与数据的还原</h3><blockquote><p>因为<code>AOF</code>文件里面包含了重建数据库状态所需的所有写命令，所以服务器只要读入并重新执行一遍<code>AOF</code>文件里面保存的写命令，就可以还原服务器关闭之前的数据库状态</p><p><code>Redis</code>读取<code>AOF</code>文件并还原数据库状态的详细步骤如下：</p><ol><li>创建一个不带网络连接的伪客户端（<code>fake client</code>）：因为<code>Redis</code>的命令只能在客户端上下文中执行，而载入<code>AOF</code>文件时所使用的命令直接来源于<code>AOF</code>文件而不是网络连接，所以服 务器使用了一个没有网络连接的伪客户端来执行<code>AOF</code>文件保存的写命令，伪客户端执行命令 的效果和带网络连接的客户端执行命令的效果完全一样</li><li>从<code>AOF</code>文件中分析并读取出一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%B8%89%EF%BC%89/image-20220705160011542.png"></p><h3 id="⑩AOF与RDB的对比"><a href="#⑩AOF与RDB的对比" class="headerlink" title="⑩AOF与RDB的对比"></a>⑩<code>AOF</code>与<code>RDB</code>的对比</h3><ul><li><p><code>RDB</code>存某个时刻的数据快照，采用二进制压缩存储，<code>AOF</code>存操作命令，采用文本存储(混合) </p></li><li><p><code>RDB</code>性能高、<code>AOF</code>性能较低</p></li><li><p><code>RDB</code>在配置触发状态会丢失最后一次快照以后更改的所有数据，<code>AOF</code>设置为每秒保存一次，则最多</p><p>丢2秒的数据</p></li><li><p><code>Redis</code>以主服务器模式运行，<code>RDB</code>不会保存过期键值对数据，<code>Redis</code>以从服务器模式运行，<code>RDB</code>会保</p><p>存过期键值对，当主服务器向从服务器同步时，再清空过期键值对。</p><p><code>AOF</code>写入文件时，对过期的<code>key</code>会追加一条<code>del</code>命令，当执行<code>AOF</code>重写时，会忽略过期<code>key</code>和<code>del</code>命令。</p></li></ul><h2 id="2、底层数据结构"><a href="#2、底层数据结构" class="headerlink" title="2、底层数据结构"></a>2、底层数据结构</h2><hr><h2 id="3、通讯协议及事件处理机制"><a href="#3、通讯协议及事件处理机制" class="headerlink" title="3、通讯协议及事件处理机制"></a>3、通讯协议及事件处理机制</h2><hr><h1 id="四、Redis-企业实战"><a href="#四、Redis-企业实战" class="headerlink" title="四、Redis 企业实战"></a>四、<code>Redis</code> 企业实战</h1><hr><h2 id="1、架构设计"><a href="#1、架构设计" class="headerlink" title="1、架构设计"></a>1、架构设计</h2><hr><h2 id="2、缓存过期-x2F-淘汰策略"><a href="#2、缓存过期-x2F-淘汰策略" class="headerlink" title="2、缓存过期/淘汰策略"></a>2、缓存过期/淘汰策略</h2><hr><h2 id="3、缓存与数据库一致性"><a href="#3、缓存与数据库一致性" class="headerlink" title="3、缓存与数据库一致性"></a>3、缓存与数据库一致性</h2><hr><h2 id="4、缓存问题"><a href="#4、缓存问题" class="headerlink" title="4、缓存问题"></a>4、缓存问题</h2><hr><h2 id="5、分布式锁"><a href="#5、分布式锁" class="headerlink" title="5、分布式锁"></a>5、分布式锁</h2><hr><h2 id="6、分布式集群架构中的session-分离"><a href="#6、分布式集群架构中的session-分离" class="headerlink" title="6、分布式集群架构中的session 分离"></a>6、分布式集群架构中的<code>session</code> 分离</h2><hr><h2 id="7、阿里Redis使用手册"><a href="#7、阿里Redis使用手册" class="headerlink" title="7、阿里Redis使用手册"></a>7、阿里<code>Redis</code>使用手册</h2><hr><h1 id="五、Redis-高可用方案"><a href="#五、Redis-高可用方案" class="headerlink" title="五、Redis 高可用方案"></a>五、<code>Redis</code> 高可用方案</h1><hr><h2 id="1、主从复制"><a href="#1、主从复制" class="headerlink" title="1、主从复制"></a>1、主从复制</h2><hr><h2 id="2、Sentinel"><a href="#2、Sentinel" class="headerlink" title="2、Sentinel"></a>2、<code>Sentinel</code></h2><hr><h2 id="3、集群与分区"><a href="#3、集群与分区" class="headerlink" title="3、集群与分区"></a>3、集群与分区</h2><hr>]]></content>
      
      
      <categories>
          
          <category> Redis 核心原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（二）</title>
      <link href="/2022/06/28/redis-er/"/>
      <url>/2022/06/28/redis-er/</url>
      
        <content type="html"><![CDATA[<h1 id="二、扩展功能"><a href="#二、扩展功能" class="headerlink" title="二、扩展功能"></a>二、扩展功能</h1><hr><h2 id="1、发布于订阅"><a href="#1、发布于订阅" class="headerlink" title="1、发布于订阅"></a>1、发布于订阅</h2><hr><blockquote><p><code>Redis</code>提供了发布订阅功能，可以用于消息的传输</p><p><code>Redis</code>的发布订阅机制包括三个部分：<code>publisher</code>，<code>subscriber</code>和<code>Channel</code></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220704192942360.png"></p><p>发布者和订阅者都是<code>Redis</code>客户端，<code>Channel</code>则为<code>Redis</code>服务器端。</p><p>发布者将消息发送到某个的频道，订阅了这个频道的订阅者就能接收到这条消息。</p></blockquote><h4 id="①频道-x2F-模式的订阅与退订"><a href="#①频道-x2F-模式的订阅与退订" class="headerlink" title="①频道/模式的订阅与退订"></a>①频道/模式的订阅与退订</h4><h5 id="a-订阅"><a href="#a-订阅" class="headerlink" title="a. 订阅"></a>a. 订阅</h5><blockquote><p><strong><code>subscribe</code></strong>:订阅 <code>subscribe channel1 channel2 ..</code></p><p><code>Redis</code>客户端1订阅频道1和频道2</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> subscribe ch1 ch2Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span> 2<span class="token punctuation">)</span> <span class="token string">"ch1"</span> 3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1 1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span> 2<span class="token punctuation">)</span> <span class="token string">"ch2"</span> 3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-发布"><a href="#b-发布" class="headerlink" title="b. 发布"></a>b. 发布</h5><blockquote><p><strong><code>publish</code></strong>:发布消息 <code>publish channel message</code></p><p><code>Redis</code>客户端2将消息发布在频道1和频道2上</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> publish ch1 hello <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1 127.0.0.1:6379<span class="token operator">></span> publish ch2 world <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-接收"><a href="#c-接收" class="headerlink" title="c. 接收"></a>c. 接收</h5><blockquote><p><code>Redis</code>客户端1接收到频道1和频道2的消息</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token punctuation">)</span> <span class="token string">"message"</span> 2<span class="token punctuation">)</span> <span class="token string">"ch1"</span> 3<span class="token punctuation">)</span> <span class="token string">"hello"</span>1<span class="token punctuation">)</span> <span class="token string">"message"</span> 2<span class="token punctuation">)</span> <span class="token string">"ch2"</span> 3<span class="token punctuation">)</span> <span class="token string">"world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-退订"><a href="#d-退订" class="headerlink" title="d. 退订"></a>d. 退订</h5><blockquote><p><code>Redis</code>客户端1退订频道1</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> unsubscribe ch11<span class="token punctuation">)</span> <span class="token string">"unsubscribe"</span> 2<span class="token punctuation">)</span> <span class="token string">"ch1"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-psubscribe-：模式匹配-psubscribe-模式"><a href="#e-psubscribe-：模式匹配-psubscribe-模式" class="headerlink" title="e. psubscribe ：模式匹配 psubscribe +模式"></a>e. <strong><code>psubscribe</code></strong> ：模式匹配 psubscribe +模式</h5><blockquote><p><code>Redis</code>客户端1订阅所有以ch开头的频道</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> psubscribe ch* Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"ch*"</span> 3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-punsubscribe-退订模式"><a href="#f-punsubscribe-退订模式" class="headerlink" title="f. punsubscribe 退订模式"></a>f. <strong><code>punsubscribe</code></strong> 退订模式</h5><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> punsubscribe ch* 1<span class="token punctuation">)</span> <span class="token string">"punsubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"ch*"</span> 3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②发布订阅的机制"><a href="#②发布订阅的机制" class="headerlink" title="②发布订阅的机制"></a>②发布订阅的机制</h4><blockquote><p>订阅某个频道或模式：</p><p>客户端（<code>client</code>）：</p><ul><li>​属性为<code>pubsub_channels</code>，该属性表明了该客户端订阅的所有频道</li><li>​属性为<code>pubsub_patterns</code>，该属性表示该客户端订阅的所有模式</li></ul><p>服务器端（<code>RedisServer</code>）：</p><ul><li>​属性为<code>pubsub_channels</code>，该服务器端中的所有频道以及订阅了这个频道的客户端</li><li>​属性为<code>pubsub_patterns</code>，该服务器端中的所有模式和订阅了这些模式的客户端</li></ul></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisClient <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dict <span class="token operator">*</span>pubsub_channels<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//该client订阅的channels，以channel为key用dict的方式组织 </span>    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//该client订阅的pattern，以list的方式组织 </span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> redisClient<span class="token punctuation">;</span><span class="token keyword">struct</span> redisServer <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     dict <span class="token operator">*</span>pubsub_channels<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//redis server进程中维护的channel dict，它以channel 为key，订 阅channel的client list为value </span>    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//redis server进程中维护的pattern list </span>    <span class="token keyword">int</span> notify_keyspace_events<span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当客户端向某个频道发送消息时，<code>Redis</code>首先在<code>redisServer</code>中的<code>pubsub_channels</code>中找出键为该频道的</p><p>结点，遍历该结点的值，即遍历订阅了该频道的所有客户端，将消息发送给这些客户端。</p><p>然后，遍历结构体<code>redisServer</code>中的<code>pubsub_patterns</code>，找出包含该频道的模式的结点，将消息发送给订</p><p>阅了该模式的客户端。</p></blockquote><h4 id="③使用场景-哨兵模式，Redisson框架使用"><a href="#③使用场景-哨兵模式，Redisson框架使用" class="headerlink" title="③使用场景:哨兵模式，Redisson框架使用"></a>③使用场景:哨兵模式，<code>Redisson</code>框架使用</h4><blockquote><p>在<code>Redis</code>哨兵模式中，哨兵通过发布与订阅的方式与<code>Redis</code>主服务器和<code>Redis</code>从服务器进行通信。这个我</p><p>们将在后面的章节中详细讲解。</p><p><code>Redisson</code>是一个分布式锁框架，在<code>Redisson</code>分布式锁释放的时候，是使用发布与订阅的方式通知的，</p><p>这个我们将在后面的章节中详细讲解。</p></blockquote><h3 id="2、事务"><a href="#2、事务" class="headerlink" title="2、事务"></a>2、事务</h3><hr><blockquote><p>所谓事务(<code>Transaction</code>) ，是指作为单个逻辑工作单元执行的一系列操作</p></blockquote><h4 id="①-ACID-回顾"><a href="#①-ACID-回顾" class="headerlink" title="①. ACID 回顾"></a>①. ACID 回顾</h4><ul><li><p><code>Atomicity</code>（原子性）：构成事务的的所有操作必须是一个逻辑单元，要么全部执行，要么全部不</p><p>执行。   <code>Redis</code>:一个队列中的命令 执行或不执行 </p></li><li><p><code>Consistency</code>（一致性）：数据库在事务执行前后状态都必须是稳定的或者是一致的。  <code>Redis</code>: 集群中不能保证时时的一致性，只能是最终一致性</p></li><li><p><code>Isolation</code>（隔离性）：事务之间不会相互影响。  <code>Redis</code>: 命令是顺序执行的，在一个事务中，有可能被执行其他客户端的命令的</p></li><li><p><code>Durability</code>（持久性）：事务执行成功后必须全部写入磁盘。 <code> Redis</code>有持久化但不保证 数据的完整性</p></li></ul><h4 id="②-Redis-事务"><a href="#②-Redis-事务" class="headerlink" title="②. **Redis**事务"></a>②. **<code>Redis</code>**事务</h4><ul><li><code>Redis</code>的事务是通过<code>multi</code>、<code>exec</code>、<code>discard</code>和<code>watch</code>这四个命令来完成的。</li><li><code>Redis</code>的单个命令都是原子性的，所以这里需要确保事务性的对象是命令集合。</li><li><code>Redis</code>将命令集合序列化并确保处于同一事务的命令集合连续且不被打断的执行</li><li><code>Redis</code>不支持回滚操作</li></ul><h4 id="③-事务命令"><a href="#③-事务命令" class="headerlink" title="③. 事务命令"></a>③. <strong>事务命令</strong></h4><ul><li><p><code>multi</code>：用于标记<strong>事务块</strong>的开始,<code>Redis</code>会将后续的命令逐个放入队列中，然后使用<code>exec</code>原子化地执行这个命令队列</p></li><li><p><code>exec</code>：执行命令队列</p></li><li><p><code>discard</code> ：清除命令队列</p></li><li><p><code>Watch</code>：监视key</p></li><li><p><code>unwathc</code>：清除监视key</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220704200011034.png"></p></li></ul><h4 id="④-事务机制"><a href="#④-事务机制" class="headerlink" title="④. 事务机制"></a>④. <strong>事务机制</strong></h4><h5 id="a-事务的执行"><a href="#a-事务的执行" class="headerlink" title="a. 事务的执行"></a>a. 事务的执行</h5><ul><li><p>事务开始</p><blockquote><p>在<code>RedisClient</code>中，有属性<code>flags</code>，用来表示是否在事务中</p><p><code>flags</code>=<code>REDIS_MULTI</code></p></blockquote></li><li><p>命令入队</p><blockquote><p><code>RedisClient</code>将命令存放在事务队列中</p><p>（<code>EXEC,DISCARD,WATCH,MULTI</code>除外）</p></blockquote></li><li><p>事务队列</p><blockquote><p><code>multiCmd *commands</code> 用于存放命令</p></blockquote></li><li><p>执行事务</p><blockquote><p><code>RedisClient</code>向服务器端发送<code>exec</code>命令，<code>RedisServer</code>会遍历事务队列,执行队列中的命令,最后将执行的结果一次性返回给客户端。</p></blockquote></li></ul><blockquote><p>如果某条命令在入队过程中发生错误，<code>redisClient</code>将<code>flags</code>置为<code>REDIS_DIRTY_EXEC</code>，<code>EXEC</code>命令将会失败</p><p>返回。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220704204243625.png"></p><h5 id="b-Watch的执行"><a href="#b-Watch的执行" class="headerlink" title="b. Watch的执行"></a>b. <code>Watch</code>的执行</h5><blockquote><p>使用<code>WATCH</code>命令监视数据库键</p><p><code>redisDb</code>有一个<code>watched_keys</code>字典,<code>key</code>是某个被监视的数据的<code>key</code>,值是一个链表.记录了所有监视这个数据的客户端。</p></blockquote><blockquote><p>监视机制的触发</p><p>当修改数据后，监视这个数据的客户端的<code>flags</code>置为<code>REDIS_DIRTY_CAS</code></p></blockquote><blockquote><p>事务执行</p><p><code>RedisClient</code>向服务器端发送<code>exec</code>命令，服务器判断<code>RedisClient</code>的<code>flags</code>，如果为<code>REDIS_DIRTY_CAS</code>，则清空事务队列。</p></blockquote><h5 id="c-Redis的弱事务性"><a href="#c-Redis的弱事务性" class="headerlink" title="c. Redis的弱事务性"></a>c. <code>Redis</code>的弱事务性</h5><ul><li><code>Redis</code> 的弱事务性</li><li><code>Redis</code>运行错误</li><li><code>Redis</code>不支持事务回滚（为什么呢）<ul><li>大多数事务失败是因为<strong>语法错误或者类型错误</strong>，这两种错误，在开发阶段都是可以预见的</li><li><code>Redis</code>为了<strong>性能方面</strong>就忽略了事务回滚。 （回滚记录历史版本）</li></ul></li></ul><h3 id="3、Lua-脚本"><a href="#3、Lua-脚本" class="headerlink" title="3、Lua 脚本"></a>3、<code>Lua</code> 脚本</h3><hr><blockquote><p><code>lua</code>是一种轻量小巧的<strong>脚本语言</strong>，用标准<strong>C****语言</strong>编写并以源代码形式开放， </p><p>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><code>Lua</code>应用场景：游戏开发、独立应用脚本、Web应用脚本、扩展和数据库插件。</p><p><code>nginx</code>上使用<code>lua</code> 实现高并发</p><p><code>OpenRestry</code>：一个可伸缩的基于<code>Nginx</code>的<code>Web</code>平台，是在<code>nginx</code>之上集成了<code>lua</code>模块的第三方服务器</p><p><code>OpenRestry</code>是一个通过<code>Lua</code>扩展<code>Nginx</code>实现的可伸缩的<code>Web</code>平台，内部集成了大量精良的<code>Lua</code>库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发（日活千万级别）、扩展性极高的动态Web应用、Web服务和动态网关。功能和<code>nginx</code>类似，就是由于支持<code>lua</code>动态脚本，所以更加灵活。<code>OpenRestry</code>通过<code>Lua</code>脚本扩展<code>nginx</code>功能，可提供负载均衡、请求路由、安全认证、服务鉴权、流量控制与日志监控等服务。</p><p>类似的还有<code>Kong</code>（<code>Api Gateway</code>）、<code>tengine</code>（阿里）</p></blockquote><h4 id="①创建并修改Lua环境"><a href="#①创建并修改Lua环境" class="headerlink" title="①创建并修改Lua环境"></a>①创建并修改<code>Lua</code>环境</h4><h5 id="a-下载"><a href="#a-下载" class="headerlink" title="a. 下载"></a>a. 下载</h5><p>地址：<a href="http://www.lua.org/download.html">http://www.lua.org/download.html</a></p><p>可以本地下载上传到linux，也可以使用curl命令在linux系统中进行在线下载</p><pre class="line-numbers language-bash"><code class="language-bash">curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-安装"><a href="#b-安装" class="headerlink" title="b. 安装"></a>b. 安装</h5><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> readline-devel ncurses-devel<span class="token function">tar</span> -zxvf lua-5.3.5.tar.gz <span class="token comment" spellcheck="true">#在src目录下 </span><span class="token function">make</span> linux或make <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果报错，说找不到<code>readline/readline.h</code>, 可以通过<code>yum</code>命令安装</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> readline-devel ncurses-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装完之后再</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> linux / <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>最后，直接输入 <code>lua</code>命令即可进入<code>lua</code>的控制台</p></blockquote><h4 id="②Lua环境协作组件"><a href="#②Lua环境协作组件" class="headerlink" title="②Lua环境协作组件"></a>②<code>Lua</code>环境协作组件</h4><blockquote><p>从Redis2.6.0版本开始，通过<strong>内置的</strong><code>lua</code><strong>编译</strong>/<strong>解释器</strong>，可以使用<code>EVAL</code>命令对<code>lua</code>脚本进行求值。</p><p>脚本的命令是原子的，<code>RedisServer</code>在执行脚本命令中，不允许插入新的命令</p><p>脚本的命令可以复制，<code>RedisServer</code>在获得脚本后不执行，生成标识返回，<code>Client</code>根据标识就可以随时执行</p></blockquote><h4 id="③EVAL-EVALSHA命令实现"><a href="#③EVAL-EVALSHA命令实现" class="headerlink" title="③EVAL/EVALSHA命令实现"></a>③<code>EVAL/EVALSHA</code>命令实现</h4><h5 id="a-EVAL命令"><a href="#a-EVAL命令" class="headerlink" title="a. EVAL命令"></a>a. <code>EVAL</code>命令</h5><blockquote><p>通过执行<code>redis</code>的<code>eval</code>命令，可以运行一段<code>lua</code>脚本。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">EVAL script numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令说明</p><ul><li><p><code>script</code><strong>参数：</strong>是一段<code>Lua</code>脚本程序，它会被运行在<code>Redis</code>服务器上下文中，这段脚本不必(也不应该)定义为一个<code>Lua</code>函数。</p></li><li><p><code>numkeys</code><strong>参数：</strong>用于指定键名参数的个数。</p></li><li><p><code>key [key ...]</code><strong>参数：</strong> </p><p>从<code>EVAL</code>的第三个参数开始算起，使用了<code>numkeys</code>个键（<code>key</code>），表示在脚本中所用到的那些<code>Redis</code>键(<code>key</code>)，这些键名参数可以在<code>Lua</code>中通过全局变量**<code>KEYS</code>**数组，用1为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</p></li><li><p><code>arg [arg ...]</code><strong>参数：</strong>可以在<code>Lua</code>中通过全局变量**<code>ARGV</code>**数组访问，访问的形式和<code>KEYS</code>变量类似(</p><p><code>ARGV[1]</code> 、 <code>ARGV[2]</code> ，诸如此类)。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}"</span> 2 key1 key2 first second<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><h5 id="b-EVALSHA命令"><a href="#b-EVALSHA命令" class="headerlink" title="b. EVALSHA命令"></a>b. <code>EVALSHA</code>命令</h5><blockquote><p><code>EVAL</code> 命令要求你在每次执行脚本的时候都发送一次脚本主体(<code>script body</code>)。</p><p><code>Redis</code> 有一个内部的缓存机制，因此它不会每次都重新编译脚本，不过在很多场合，付出无谓的带宽来</p><p>传送脚本主体并不是最佳选择。为了减少带宽的消耗， <code>Redis</code> 实现了 <code>EVALSHA</code> 命令，它的作用和 <code>EVAL</code> 一样，都用于对脚本求值，但它接受的第一个参数不是脚本，而是脚本的 <code>SHA1</code> 校验和(<code>sum</code>)</p><p><code>SCRIPT</code> 命令</p><ul><li><p><strong>SCRIPT FLUSH</strong> <strong>：</strong>清除所有脚本缓存</p></li><li><p><strong>SCRIPT EXISTS</strong> <strong>：</strong>根据给定的脚本校验和，检查指定的脚本是否存在于脚本缓存</p></li><li><p><strong>SCRIPT LOAD</strong> <strong>：</strong>将一个脚本装入脚本缓存，<strong>返回</strong><code>SHA1</code><strong>摘要</strong>，但并不立即运行它</p><pre class="line-numbers language-bash"><code class="language-bash">192.168.24.131:6380<span class="token operator">></span> script load <span class="token string">"return redis.call('set',KEYS[1],ARGV[1])"</span> <span class="token string">"c686f316aaf1eb01d5a4de1b0b63cd233010e63d"</span> 192.168.24.131:6380<span class="token operator">></span> evalsha c686f316aaf1eb01d5a4de1b0b63cd233010e63d 1 n2 zhangfei OK192.168.24.131:6380<span class="token operator">></span> get n2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>SCRIPT KILL</strong> <strong>：</strong>杀死当前正在运行的脚本</p></li></ul></blockquote><h4 id="⑥脚本管理命令实现"><a href="#⑥脚本管理命令实现" class="headerlink" title="⑥脚本管理命令实现"></a>⑥脚本管理命令实现</h4><pre class="line-numbers language-lua"><code class="language-lua"><span class="token operator">#</span>test<span class="token punctuation">.</span>lua<span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>h <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>p <span class="token number">6379</span> <span class="token comment" spellcheck="true">--eval test.lua name:6 , caocao #，两边有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-lua"><code class="language-lua"><span class="token operator">#</span>list<span class="token punctuation">.</span>lua<span class="token keyword">local</span> key<span class="token operator">=</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">local</span> list<span class="token operator">=</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"lrange"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token comment" spellcheck="true">--eval list.lua list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>利用<code>Redis</code>整合<code>Lua</code>，主要是为了性能以及事务的原子性。因为<code>redis</code>帮我们提供的事务功能太差。</p></blockquote><h4 id="⑦脚本复制"><a href="#⑦脚本复制" class="headerlink" title="⑦脚本复制"></a>⑦脚本复制</h4><blockquote><p><code>Redis </code>传播 <code>Lua</code> 脚本，在使用主从模式和开启<code>AOF</code>持久化的前提下：</p><p>当执行<code>lua</code>脚本时，<code>Redis</code> 服务器有两种模式：脚本传播模式和命令传播模式。</p></blockquote><h5 id="a-脚本传播模式"><a href="#a-脚本传播模式" class="headerlink" title="a. 脚本传播模式"></a>a. 脚本传播模式</h5><blockquote><p>脚本传播模式是 <code>Redis</code> 复制脚本时默认使用的模式</p><p><code>Redis</code>会将被执行的脚本及其参数复制到 <code>AOF</code> 文件以及从服务器里面。</p><p>执行以下命令：</p><pre class="line-numbers language-lua"><code class="language-lua">eval <span class="token string">"redis.call('set',KEYS[1],ARGV[1]);redis.call('set',KEYS[2],ARGV[2])"</span> <span class="token number">2</span> n1 n2zhaoyun1 zhaoyun2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么主服务器将向从服务器发送完全相同的 <code>eval </code>命令：</p><pre class="line-numbers language-lua"><code class="language-lua">eval <span class="token string">"redis.call('set',KEYS[1],ARGV[1]);redis.call('set',KEYS[2],ARGV[2])"</span> <span class="token number">2</span> n1 n2zhaoyun1 zhaoyun2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：在这一模式下执行的脚本不能有时间、内部状态、随机函数(<code>spop</code>)等。执行相同的脚本以及参数</p><p>必须产生相同的效果。在<code>Redis5</code>，也是处于同一个事务中。</p></blockquote><h5 id="b-命令传播模式"><a href="#b-命令传播模式" class="headerlink" title="b. 命令传播模式"></a>b. 命令传播模式</h5><blockquote><p>处于命令传播模式的主服务器会将执行脚本产生的所有写命令用事务包裹起来，然后将事务复制到 AOF</p><p>文件以及从服务器里面。</p><p>因为命令传播模式复制的是写命令而不是脚本本身，所以即使脚本本身包含时间、内部状态、随机函数</p><p>等，主服务器给所有从服务器复制的写命令仍然是相同的。</p><p>为了开启命令传播模式，用户在使用脚本执行任何写操作之前，需要先在脚本里面调用以下函数：</p><pre class="line-numbers language-lua"><code class="language-lua">redis<span class="token punctuation">.</span><span class="token function">replicate_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>redis.replicate_commands()</code> 只对调用该函数的脚本有效：在使用命令传播模式执行完当前脚本之后，服务器将自动切换回默认的脚本传播模式。</p><p>如果我们在主服务器执行以下命令：</p><pre class="line-numbers language-lua"><code class="language-lua">eval <span class="token string">"redis.replicate_commands();redis.call('set',KEYS[1],ARGV[1]);redis.call('set',K EYS[2],ARGV[2])"</span> <span class="token number">2</span> n1 n2 zhaoyun11 zhaoyun22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么主服务器将向从服务器复制以下命令：</p><pre class="line-numbers language-aof"><code class="language-aof">EXEC *1$5MULTI*3$3set$2n1$9zhaoyun11*3$3set $2n2$9zhaoyun22*1$4EXEC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="4、慢查询日志"><a href="#4、慢查询日志" class="headerlink" title="4、慢查询日志"></a>4、慢查询日志</h2><hr><blockquote><p>我们都知道<code>MySQL</code>有慢查询日志</p><p><code>Redis</code>也有慢查询日志，可用于监视和优化查询</p></blockquote><h4 id="①慢查询设置"><a href="#①慢查询设置" class="headerlink" title="①慢查询设置"></a>①慢查询设置</h4><blockquote><p>在<code>redis.conf</code>中可以配置和慢查询日志相关的选项：</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#执行时间超过多少微秒的命令请求会被记录到日志上 0 :全记录 &lt;0 不记录 </span><span class="token attr-name">slowlog-log-slower-than</span> <span class="token attr-value">10000 </span><span class="token comment" spellcheck="true">#slowlog-max-len 存储慢查询日志条数 </span><span class="token attr-name">slowlog-max-len</span> <span class="token attr-value">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Redis</code>使用列表存储慢查询日志，采用队列方式（FIFO） </p><p><code>confifig set</code>的方式可以<strong>临时设置</strong>，<code>redis</code>重启后就无效</p><p><code>confifig set slowlog-log-slower-than </code>微秒</p><p><code>confifig set slowlog-max-len</code> 条数</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看日志：</span>slowlog get <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="②慢查询记录的保存"><a href="#②慢查询记录的保存" class="headerlink" title="②慢查询记录的保存"></a>②慢查询记录的保存</h4><blockquote><p>在<code>redisServer</code>中保存和慢查询日志相关的信息</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token comment" spellcheck="true">// 下一条慢查询日志的 ID </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> slowlog_entry_id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存了所有慢查询日志的链表 FIFO </span>    list <span class="token operator">*</span>slowlog<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 服务器配置 slowlog-log-slower-than 选项的值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> slowlog_log_slower_than<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 服务器配置 slowlog-max-len 选项的值 </span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> slowlog_max_len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... </span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>lowlog</code> 链表保存了服务器中的所有慢查询日志， </p><p>链表中的每个节点都保存了一个 <code>slowlogEntry </code>结构，</p><p>每个<code>slowlogEntry</code>结构代表一条慢查询日志。</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slowlogEntry <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 唯一标识符 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 命令执行时的时间，格式为 UNIX 时间戳</span>    time_t time<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 执行命令消耗的时间，以微秒为单位 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> duration<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 命令与命令参数 </span>    robj <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 命令与命令参数的数量</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span> <span class="token punctuation">}</span> slowlogEntry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③慢查询日志的阅览-amp-删除"><a href="#③慢查询日志的阅览-amp-删除" class="headerlink" title="③慢查询日志的阅览&amp;删除"></a>③慢查询日志的阅览&amp;删除</h4><blockquote><p>初始化日志列表</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">slowlogInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span>slowlog <span class="token operator">=</span> <span class="token function">listCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 创建一个list列表 */</span>    server<span class="token punctuation">.</span>slowlog_entry_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 日志ID从0开始 */</span>     <span class="token function">listSetFreeMethod</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog<span class="token punctuation">,</span>slowlogFreeEntry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 指定慢查询日志list空间 的释放方法 */</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获得慢查询日志记录  <code>slowlog get [n]</code></p></blockquote><pre class="line-numbers language-c"><code class="language-c">def <span class="token function">SLOWLOG_GET</span><span class="token punctuation">(</span>number<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    # 用户没有给定 number 参数    # 那么打印服务器包含的全部慢查询日志    <span class="token keyword">if</span> number is None<span class="token punctuation">:</span>         number <span class="token operator">=</span> <span class="token function">SLOWLOG_LEN</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                # 遍历服务器中的慢查询日志    <span class="token keyword">for</span> log in redisServer<span class="token punctuation">.</span>slowlog<span class="token punctuation">:</span>         <span class="token keyword">if</span> number <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>             # 打印的日志数量已经足够，跳出循环            <span class="token keyword">break</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>            # 继续打印，将计数器的值减一             number <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>          # 打印日志          <span class="token function">printLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看日志数量的 <code>slowlog len</code></p></blockquote><pre class="line-numbers language-c"><code class="language-c">def <span class="token function">SLOWLOG_LEN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token macro property"># slowlog 链表的长度就是慢查询日志的条目数量 </span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>redisServer<span class="token punctuation">.</span>slowlog<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>清除日志 <code>slowlog reset</code></p></blockquote><pre class="line-numbers language-c"><code class="language-c">def <span class="token function">SLOWLOG_RESET</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     # 遍历服务器中的所有慢查询日志     <span class="token keyword">for</span> log in redisServer<span class="token punctuation">.</span>slowlog<span class="token punctuation">:</span>        # 删除日志         <span class="token function">deleteLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④添加日志实现"><a href="#④添加日志实现" class="headerlink" title="④添加日志实现"></a>④添加日志实现</h4><blockquote><p>在每次执行命令的之前和之后， 程序都会记录微秒格式的当前 UNIX 时间戳， </p><p>这两个时间戳之间的差就是服务器执行命令所耗费的时长， </p><p>服务器会将这个时长作为参数之一传给<code>slowlogPushEntryIfNeeded</code> 函数， </p><p>而 <code>slowlogPushEntryIfNeeded </code>函数则负责检查是否需要为这次执行的命令创建慢查询日志</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 记录执行命令前的时间 </span>before <span class="token operator">=</span> <span class="token function">unixtime_now_in_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//执行命令 </span><span class="token function">execute_command</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> client<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//记录执行命令后的时间</span>after <span class="token operator">=</span> <span class="token function">unixtime_now_in_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 检查是否需要创建新的慢查询日志 </span><span class="token function">slowlogPushEntryIfNeeded</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> before<span class="token operator">-</span>after<span class="token punctuation">)</span>     <span class="token keyword">void</span> <span class="token function">slowlogPushEntryIfNeeded</span><span class="token punctuation">(</span>robj <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog_log_slower_than <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Slowlog disabled */</span> <span class="token comment" spellcheck="true">/* 负 数表示禁用 */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>duration <span class="token operator">>=</span> server<span class="token punctuation">.</span>slowlog_log_slower_than<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 如果执行时间 > 指定阈值*/</span>         <span class="token function">listAddNodeHead</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog<span class="token punctuation">,</span><span class="token function">slowlogCreateEntry</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span>argc<span class="token punctuation">,</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 创建一个slowlogEntry对象,添加到列表首部*/</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">listLength</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog<span class="token punctuation">)</span> <span class="token operator">></span> server<span class="token punctuation">.</span>slowlog_max_len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 如果列表长度 > 指定长度 */</span>        <span class="token function">listDelNode</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog<span class="token punctuation">,</span><span class="token function">listLast</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>slowlog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 移除列表尾部元素 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>slowlogPushEntryIfNeeded</code> 函数的作用有两个：</p><ul><li>检查命令的执行时长是否超过 <code>slowlog-log-slower-than</code> 选项所设置的时间， 如果是的话， 就为命令创建一个新的日志， 并将新日志添加到 <code>slowlog</code> 链表的表头。</li><li>检查慢查询日志的长度是否超过 <code>slowlog-max-len</code> 选项所设置的长度，如果是的话，那么将多出来的日志从 <code>slowlog </code>链表中删除掉。</li></ul></blockquote><h4 id="⑤慢查询定位-amp-查询"><a href="#⑤慢查询定位-amp-查询" class="headerlink" title="⑤慢查询定位&amp;查询"></a>⑤慢查询定位&amp;查询</h4><blockquote><p>使用<code>slowlog get </code>可以获得执行较慢的<code>redis</code>命令，针对该命令可以进行优化：</p><ul><li>尽量使用短的<code>key</code>，对于<code>value</code>有些也可精简，能使用int就int。 </li><li>避免使用<code>keys *</code>、<code>hgetall</code>等全量操作。</li><li>减少大<code>key</code>的存取，打散为小<code>key</code> <code>100K</code>以上</li><li>将<code>rdb</code>改为<code>aof</code>模式  <code>rdb fork </code>子进程 数据量过大 主进程阻塞 <code>redis</code>性能大幅下降  关闭持久化 ， （适合于数据量较小，有固定数据源）</li><li>想要一次添加多条数据的时候可以使用管道</li><li>尽可能地使用哈希存储</li><li>尽量限制下<code>redis</code>使用的内存大小，这样可以避免<code>redis</code>使用<code>swap</code>分区或者出现<code>OOM</code>错误内存与硬盘的<code>swap</code></li></ul></blockquote><h2 id="5、监视器"><a href="#5、监视器" class="headerlink" title="5、监视器"></a>5、监视器</h2><hr><blockquote><p>Redis客户端通过执行MONITOR命令可以将自己变为一个监视器，实时地接受并打印出服务器当前处理</p><p>的命令请求的相关信息。</p><p>此时，当其他客户端向服务器发送一条命令请求时，服务器除了会处理这条命令请求之外，还会将这条</p><p>命令请求的信息发送给所有监视器。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220705105700127.png"></p><h4 id="①实现监视器"><a href="#①实现监视器" class="headerlink" title="①实现监视器"></a>①实现监视器</h4><blockquote><p><code>redisServer</code> 维护一个 <code>monitors </code>的链表，记录自己的监视器，每次收到 <code>MONITOR </code>命令之后，将客户端追加到链表尾。</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">monitorCommand</span><span class="token punctuation">(</span>redisClient <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ignore MONITOR if already slave or in monitor mode */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>flags <span class="token operator">&amp;</span> REDIS_SLAVE<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        c<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>REDIS_SLAVE<span class="token operator">|</span>REDIS_MONITOR<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">listAddNodeTail</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>monitors<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">addReply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>shared<span class="token punctuation">.</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回复OK </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②向监视器发送命令信息"><a href="#②向监视器发送命令信息" class="headerlink" title="②向监视器发送命令信息"></a>②向监视器发送命令信息</h4><blockquote><p>利用<code>call</code>函数实现向监视器发送命令</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// call() 函数是执行命令的核心函数，这里只看监视器部分 </span><span class="token comment" spellcheck="true">/*src/redis.c/call*/</span> <span class="token comment" spellcheck="true">/* Call() is the core of Redis execution of a command */</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>redisClient <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">long</span> <span class="token keyword">long</span> dirty<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token function">ustime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">;</span>    <span class="token keyword">int</span> client_old_flags <span class="token operator">=</span> c<span class="token operator">-></span>flags<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Sent the command to clients in MONITOR mode, only if the commands are * not generated from reading an AOF. */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listLength</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>monitors<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token operator">!</span>server<span class="token punctuation">.</span>loading <span class="token operator">&amp;&amp;</span>             <span class="token operator">!</span><span class="token punctuation">(</span>c<span class="token operator">-></span>cmd<span class="token operator">-></span>flags <span class="token operator">&amp;</span> REDIS_CMD_SKIP_MONITOR<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token function">replicationFeedMonitors</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>server<span class="token punctuation">.</span>monitors<span class="token punctuation">,</span>c<span class="token operator">-></span>db<span class="token operator">-></span>id<span class="token punctuation">,</span>c<span class="token operator">-></span>argv<span class="token punctuation">,</span>c<span class="token operator">-></span>argc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>call </code>主要调用了<code> replicationFeedMonitors</code> ，这个函数的作用就是将命令打包为协议，发送给监视</p><p>器。</p></blockquote><h4 id="③Redis监控平台"><a href="#③Redis监控平台" class="headerlink" title="③Redis监控平台"></a>③<code>Redis</code>监控平台</h4><blockquote><p><code>grafana</code>、<code>prometheus</code>以及<code>redis_exporter</code>。</p><p><code>Grafana</code> 是一个开箱即用的可视化工具，具有功能齐全的度量仪表盘和图形编辑器，有灵活丰富的图形</p><p>化选项，可以混合多种风格，支持多个数据源特点。</p><p><code>Prometheus</code>是一个开源的服务监控系统，它通过HTTP协议从远程的机器收集数据并存储在本地的时序</p><p>数据库上。</p><p><code>redis_exporter</code>为<code>Prometheus</code>提供了<code>redis</code>指标的导出，配合<code>Prometheus</code>以及<code>grafana</code>进行可视化及监</p><p>控。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/06/28/redis-yi/"/>
      <url>/2022/06/28/redis-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h1><blockquote><p>本文仅供参考</p></blockquote><h1 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a><code>Redis</code> 介绍</h1><blockquote><p><code>REmote DIctionary Server(Redis)</code> 是一个由 <code>Salvatore Sanfilippo</code> 写的 <code>key-value</code> 存储系统，是跨平台的非关系型数据库。<code>Redis</code> 是一个开源的使用 <code>ANSI C</code> 语言编写、遵守 <code>BSD</code> 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 <code>API</code>。<code>Redis</code> 通常被称为数据结构服务器，因为值（<code>value</code>）可以是字符串(<code>String</code>)、哈希(<code>Hash</code>)、列表(<code>list</code>)、集合(<code>sets</code>)和有序集合(<code>sorted sets</code>)等类型。</p></blockquote><h1 id="一、Redis快速实战"><a href="#一、Redis快速实战" class="headerlink" title="一、Redis快速实战"></a>一、<code>Redis</code>快速实战</h1><hr><h2 id="1、缓存原理与设计"><a href="#1、缓存原理与设计" class="headerlink" title="1、缓存原理与设计"></a>1、缓存原理与设计</h2><hr><h3 id="①-缓存的基本思想"><a href="#①-缓存的基本思想" class="headerlink" title="① 缓存的基本思想"></a>① 缓存的基本思想</h3><hr><h4 id="a-缓存的使用场景"><a href="#a-缓存的使用场景" class="headerlink" title="a. 缓存的使用场景"></a>a. 缓存的使用场景</h4><ul><li><h5 id="DB-缓存，减轻服务器压力"><a href="#DB-缓存，减轻服务器压力" class="headerlink" title="DB 缓存，减轻服务器压力"></a><code>DB</code> 缓存，减轻服务器压力</h5></li></ul><blockquote><p>一般情况下数据存在数据库中，应用程序直接操作数据库。</p><p>当访问量上万，数据库压力增大，可以采取的方案有：</p><ul><li><p>读写分离，分库分表</p></li><li><p>当访问量达到10万、百万，需要引入缓存。将已经访问过的内容或数据存储起来，当再次访问时先找缓存，缓存命中返回数据。不命中再找数据库，并回填缓存。</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628091305840.png"></p><ul><li><h5 id="提高系统响应"><a href="#提高系统响应" class="headerlink" title="提高系统响应"></a>提高系统响应</h5></li></ul><blockquote><p>数据库的数据是存在文件里，也就是硬盘。与内存做交换（<code>swap</code>）,在大量瞬间访问时（高并发）<code>MySQL</code>单机会因为频繁<code>IO</code>而造成无法响应。<code>MySQL</code>的<code>InnoDB</code>是有行锁 , 将数据缓存在<code>Redis</code>中，也就是存在了内存中。内存天然支持高并发访问，可以瞬间处理大量请求，<code>qps</code>到达11万/S读请求 8万写/S。</p></blockquote><ul><li><h5 id="做session-分离"><a href="#做session-分离" class="headerlink" title="做session 分离"></a>做<code>session</code> 分离</h5></li></ul><blockquote><p>传统的<code>session</code>是由<code>tomcat</code>自己进行维护和管理。集群或分布式环境，不同的<code>tomcat</code>管理各自的<code>session</code>。只能在各个<code>tomcat</code>之间，通过网络和<code>Io</code>进行<code>session</code>的复制，极大的影响了系统的性能。</p><ul><li><p>各个Tomcat间复制session，性能损耗</p></li><li><p>不能保证各个Tomcat的Session数据同步</p></li></ul></blockquote><blockquote><p><code>session</code>分离，将登录成功之后的<code>Session</code>信息存放在<code>Redis</code>，做临时存储，这样多个服务器（<code>Tomcat</code>）可以共享<code>Session</code>信息。 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628092007328.png" alt="image-20220628092007328"></p><ul><li><h5 id="做分布式锁"><a href="#做分布式锁" class="headerlink" title="做分布式锁"></a>做分布式锁</h5></li></ul><blockquote><p>一般讲锁是多线程的锁，是在一个进程中的,多个进程（<code>JVM</code>）在并发时也会产生问题，也要控制时序性</p><p>可以采用分布式锁。使用<code>Redis</code>实现 <code>setNX</code></p></blockquote><ul><li><h5 id="做乐观锁"><a href="#做乐观锁" class="headerlink" title="做乐观锁"></a>做乐观锁</h5></li></ul><blockquote><p>同步锁和数据库中的行锁、表锁都是悲观锁，悲观锁的性能是比较低的，响应性比较差。</p><p>高性能、高响应（秒杀）采用乐观锁 <code>Redis</code>可以实现乐观锁 <code>watch + incr</code></p></blockquote><h4 id="b-什么是缓存"><a href="#b-什么是缓存" class="headerlink" title="b. 什么是缓存"></a>b. 什么是缓存</h4><hr><blockquote><p>缓存原指<code>CPU</code>上的一种高速存储器，它先于内存与<code>CPU</code>交换数据，速度很快</p><p>现在泛指存储在计算机上的原始数据的复制集，便于快速访问。</p><p>在互联网技术中，缓存是系统快速响应的关键技术之一</p><p>以空间换时间的一种技术（艺术）</p></blockquote><h4 id="c-大型网站中缓存的使用"><a href="#c-大型网站中缓存的使用" class="headerlink" title="c. 大型网站中缓存的使用"></a>c. 大型网站中缓存的使用</h4><hr><blockquote><p>单机架构<code>LAMP</code>（<code>Linux</code>+<code>apache</code>+<code>MySQL</code>+<code>PHP</code>）、<code>JavaEE</code>（<code>SSM</code>）</p><p>访问量越大，响应力越差，用户体验越差</p><p>引入缓存、示意图如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628093117833.png" alt="image-20220628093117833"></p><blockquote><p>在大型网站中从浏览器到网络，再到应用服务器，再到数据库，通过在各个层面应用缓存技术，大大提</p><p>升了系统性能和用户体验。</p></blockquote><h3 id="②-常见缓存的分类"><a href="#②-常见缓存的分类" class="headerlink" title="② 常见缓存的分类"></a>② 常见缓存的分类</h3><hr><h4 id="a-客户端缓存"><a href="#a-客户端缓存" class="headerlink" title="a.客户端缓存"></a>a.客户端缓存</h4><blockquote><p>传统互联网：页面缓存和浏览器缓存</p><p>移动互联网：<code>APP</code> 缓存</p></blockquote><ul><li><h5 id="页面缓存-了解"><a href="#页面缓存-了解" class="headerlink" title="页面缓存(了解)"></a>页面缓存(了解)</h5></li></ul><blockquote><p>页面缓存：页面自身对某些元素或全部元素进行存储，并保存成文件。</p><p><code>html5</code>：<code>Cookie</code>、<code>WebStorage</code>（S<code>essionStorage</code>和<code>LocalStorage</code>）、<code>WebSql</code>、<code>indexDB</code>、<code>Application</code>、<code>Cache</code>等。</p></blockquote><p>开启步骤：</p><ol><li><p>设置manifest描述文件</p><pre class="line-numbers language-javascript"><code class="language-javascript">CACHE MANIFEST#comment js<span class="token operator">/</span>index<span class="token punctuation">.</span>jsimg<span class="token operator">/</span>bg<span class="token punctuation">.</span>png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>html关联manifest属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo.appcache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例（<code>LocalSorage</code>）</p><pre class="line-numbers language-java"><code class="language-java">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"张飞"</span><span class="token punctuation">)</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><h5 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h5></li></ul><blockquote><p>当客户端向服务器请求资源时，会先抵达<u>浏览器缓存</u>，如果浏览器有“要请求资源”的副本，就可以直接</p><p>从浏览器缓存中提取而不是从原始服务器中提取这个资源。</p><p>浏览器缓存可分为<u>强制缓存</u>和<u>协商缓存</u>。</p><p><u>强制缓存</u>：直接使用浏览器的缓存数据</p><p>条件：<code>Cache-Control</code>的<code>max-age</code>没有过期或者<code>Expires</code>的缓存时间没有过期</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>max-age<span class="token punctuation">=</span>7200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mon, 20 Aug 2010 23:00:00 GMT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>协商缓存：服务器资源未修改，使用浏览器的缓存（304）；反之，使用服务器资源（200）。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cache-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h5 id="APP-缓存"><a href="#APP-缓存" class="headerlink" title="APP 缓存"></a><code>APP</code> 缓存</h5></li></ul><blockquote><p>原生<code>APP</code>中把数据缓存在内存、文件或本地数据库（<code>SQLite</code>）中。比如图片文件。</p></blockquote><h4 id="b-网络端缓存"><a href="#b-网络端缓存" class="headerlink" title="b. 网络端缓存"></a>b. 网络端缓存</h4><blockquote><p>通过代理的方式响应客户端请求，对重复的请求返回缓存中的数据资源。</p></blockquote><ul><li><h5 id="Web代理缓存"><a href="#Web代理缓存" class="headerlink" title="Web代理缓存"></a><code>Web</code>代理缓存</h5></li></ul><blockquote><p>可以缓存原生服务器的静态资源，比如样式、图片等。</p><p>常见的反向代理服务器比如大名鼎鼎的<code>Nginx</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628095637112.png" alt="image-20220628095637112"></p><ul><li><h5 id="边缘缓存"><a href="#边缘缓存" class="headerlink" title="边缘缓存"></a>边缘缓存</h5></li></ul><blockquote><p>边缘缓存中典型的商业化服务就是<code>CDN</code>了。</p><p><code>CDN</code>的全称是<code>Content Delivery Network</code>，即内容分发网络。</p><p>CDN通过部署在各地的边缘服务器，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度</p><p>和命中率。</p><p>CDN的关键技术主要有内容存储和分发技术。现在一般的公有云服务商都提供CDN服务。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628095729898.png" alt="image-20220628095729898"></p><h4 id="c-服务端缓存"><a href="#c-服务端缓存" class="headerlink" title="c. 服务端缓存"></a>c. 服务端缓存</h4><blockquote><p>服务器端缓存是整个缓存体系的核心。包括数据库级缓存、平台级缓存和应用级缓存。</p></blockquote><ul><li><h5 id="数据库级缓存"><a href="#数据库级缓存" class="headerlink" title="数据库级缓存"></a>数据库级缓存</h5></li></ul><blockquote><p>数据库是用来存储和管理数据的。</p><p><code>MySQL</code>在<code>Server</code>层使用查询缓存机制。将查询后的数据缓存起来。</p><p><code>K-V</code>结构，<code>Key</code>：<code>select</code>语句的<code>hash</code>值，<code>Value</code>：查询结果</p><p><code>InnoDB</code>存储引擎中的<code>buffffer-pool</code>用于缓存<code>InnoDB</code>索引及数据块。</p></blockquote><ul><li><h5 id="平台级缓存"><a href="#平台级缓存" class="headerlink" title="平台级缓存"></a>平台级缓存</h5></li></ul><blockquote><p>平台级缓存指的是带有缓存特性的应用框架。</p><p>比如：<code>GuavaCache </code>、<code>EhCache</code>（二级缓存，硬盘）、<code>OSCache</code>（页面缓存）等。</p><p>部署在应用服务器上，也称为服务器本地缓存。</p></blockquote><ul><li><h5 id="应用级缓存（重点）"><a href="#应用级缓存（重点）" class="headerlink" title="应用级缓存（重点）"></a>应用级缓存（重点）</h5></li></ul><blockquote><p>具有缓存功能的中间件：<code>Redis</code>、<code>Memcached</code>、<code>EVCache（AWS）</code>、<code>Tair</code>（阿里 、美团）等。</p><p>采用<code>K-V</code>形式存储。</p><p>利用集群支持高可用、高性能、高并发、高扩展。</p><p>分布式缓存</p></blockquote><h3 id="③-缓存的优势与代价"><a href="#③-缓存的优势与代价" class="headerlink" title="③ 缓存的优势与代价"></a>③ 缓存的优势与代价</h3><hr><h4 id="a-使用缓存的优势"><a href="#a-使用缓存的优势" class="headerlink" title="a. 使用缓存的优势"></a>a. 使用缓存的优势</h4><ul><li><h5 id="提升用户体验"><a href="#提升用户体验" class="headerlink" title="提升用户体验"></a>提升用户体验</h5></li></ul><blockquote><p>用户体验（<code>User Experience</code>）：用户在使用产品过程中建立起来的一种纯主观感受。</p><p>缓存的使用可以提升系统的响应能力，大大提升了用户体验。</p></blockquote><ul><li><h5 id="减轻服务器压力"><a href="#减轻服务器压力" class="headerlink" title="减轻服务器压力"></a>减轻服务器压力</h5></li></ul><blockquote><p>客户端缓存、网络端缓存减轻应用服务器压力。</p><p>服务端缓存减轻数据库服务器的压力。</p></blockquote><ul><li><h6 id="提升系统性能"><a href="#提升系统性能" class="headerlink" title="提升系统性能"></a>提升系统性能</h6></li></ul><blockquote><p>系统性能指标：响应时间、延迟时间、吞吐量、并发用户数和资源利用率等。</p><p>缓存技术可以：</p><ol><li>缩短系统的响应时间</li><li>减少网络传输时间和应用延迟时间</li><li>提高系统的吞吐量</li><li>增加系统的并发用户数</li><li>提高了数据库资源的利用率</li></ol></blockquote><h4 id="b-使用缓存的代价"><a href="#b-使用缓存的代价" class="headerlink" title="b. 使用缓存的代价"></a>b. 使用缓存的代价</h4><ul><li><h5 id="额外的硬件支付"><a href="#额外的硬件支付" class="headerlink" title="额外的硬件支付"></a>额外的硬件支付</h5></li></ul><blockquote><p>缓存是一种软件系统中以空间换时间的技术，需要额外的磁盘空间和内存空间来存储数据，搭建缓存服务器集群需要额外的服务器。</p><p>采用云服务器的缓存服务就不用额外的服务器了。阿里云（<code>Tair</code>、<code>Redis</code>），百度云（<code>Redis</code>），提供缓存服务，<code>AWS</code>亚马逊云服务：<code>EVCache</code></p></blockquote><ul><li><h5 id="高并发缓存失效"><a href="#高并发缓存失效" class="headerlink" title="高并发缓存失效"></a>高并发缓存失效</h5></li></ul><blockquote><p>在高并发场景下会出现缓存失效（缓存穿透、缓存雪崩、缓存击穿）,造成瞬间数据库访问量增大，甚至崩溃</p></blockquote><ul><li><h5 id="缓存与数据库同步"><a href="#缓存与数据库同步" class="headerlink" title="缓存与数据库同步"></a>缓存与数据库同步</h5></li></ul><blockquote><p>缓存与数据库无法做到数据的时时同步</p><p><code>Redis</code>无法做到主从时时数据同步</p></blockquote><ul><li>缓存并发竞争</li></ul><blockquote><p>多个<code>redis</code>的客户端同时对一个key进行set值得时候由于执行顺序引起的并发问题</p></blockquote><h3 id="④-缓存的读写模式"><a href="#④-缓存的读写模式" class="headerlink" title="④ 缓存的读写模式"></a>④ 缓存的读写模式</h3><hr><blockquote><p>缓存有三种读写模式</p><ol><li><code>Cache Aside Pattern</code>（<strong>常用</strong>）</li><li><code>Read/Write Through Pattern</code></li><li><code>Write Behind Caching Pattern</code></li></ol></blockquote><ul><li><p><code>Cache Aside Pattern</code>（<strong>常用</strong>）</p><blockquote><p><code>Cache Aside Pattern</code>（旁路缓存），是最经典的缓存+数据库读写模式。</p><p>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628105149034.png"></p></blockquote><blockquote><p>更新的时候，先更新数据库，然后再删除缓存。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220628105257599.png" alt="image-20220628105257599"></p><p>为什么是删除缓存，而不是更新缓存呢？</p><ol><li>缓存的值是一个结构：hash、list，更新数据需要遍历，先遍历（耗时）后修改</li><li>、懒加载，使用的时候才更新缓存，使用的时候才从DB中加载</li></ol></blockquote></li><li><p><code>Read/Write Through Pattern</code></p><blockquote><p>应用程序只操作缓存，缓存操作数据库。</p><p>Read-Through（穿透读模式/直读模式）：应用程序读缓存，缓存没有，由缓存回源到数据库，并写入</p><p>缓存。（guavacache） </p><p>Write-Through（穿透写模式/直写模式）：应用程序写缓存，缓存写数据库。</p><p>该种模式需要提供数据库的handler，开发较为复杂。</p></blockquote></li><li><p><code>Write Behind Caching Pattern</code></p><blockquote><p>应用程序只更新缓存。</p><p>缓存通过异步的方式将数据批量或合并后更新到DB中</p><p>不能时时同步，甚至会丢数据</p></blockquote></li></ul><h3 id="⑤-缓存的架构与思路"><a href="#⑤-缓存的架构与思路" class="headerlink" title="⑤ 缓存的架构与思路"></a>⑤ 缓存的架构与思路</h3><h4 id="a-多层次"><a href="#a-多层次" class="headerlink" title="a. 多层次"></a>a. 多层次</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704100825331.png"></p><h4 id="b-数据类型"><a href="#b-数据类型" class="headerlink" title="b. 数据类型"></a>b. 数据类型</h4><ul><li>​简单数据类型：<code>Value</code>是字符串或整数或二进制 ，<code>Value</code>的值比较大（大于100K）并且只进行<code>setter</code>和<code>getter</code>，可采用<code>Memcached</code>。<code>Memcached</code>纯内存缓存，多线程 K-V</li><li><code>Value</code>是<code>hash</code>、<code>set</code>、<code>list</code>、<code>zset</code>，需要存储关系，聚合，计算，可采用<code>Redis</code></li></ul><h4 id="c-要做集群"><a href="#c-要做集群" class="headerlink" title="c. 要做集群"></a>c. 要做集群</h4><hr><h2 id="2、Redis-的简介与安装"><a href="#2、Redis-的简介与安装" class="headerlink" title="2、Redis 的简介与安装"></a>2、<code>Redis</code> 的简介与安装</h2><hr><h3 id="①什么是Redis"><a href="#①什么是Redis" class="headerlink" title="①什么是Redis"></a>①什么是<code>Redis</code></h3><p>​a、<code>Redis</code> （<code>Remote Dictionary Server</code>）远程字典服务器，是用<strong>C****语言</strong>开发的一个<strong>开源</strong>的高性能<strong>键值*对</strong>（<code> key-value</code> ）**内存数据库</p><p>​b、它提供了<strong>五种数据类型</strong>来存储值：字符串类型、散列类型、列表类型、集合类型、有序集合类型</p><p>​c、它是一种 NoSQL 数据存储。</p><h3 id="②Redis单机版安装和使用"><a href="#②Redis单机版安装和使用" class="headerlink" title="②Redis单机版安装和使用"></a>②<code>Redis</code>单机版安装和使用</h3><h4 id="a-Redis-下载"><a href="#a-Redis-下载" class="headerlink" title="a. Redis 下载"></a>a. <code>Redis</code> 下载</h4><ul><li>官网地址：<a href="http://redis.io/">http://redis.io/</a></li><li>中文官网地址：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>下载地址：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704105214586.png"></p><h4 id="b-安装环境"><a href="#b-安装环境" class="headerlink" title="b. 安装环境"></a>b. 安装环境</h4><blockquote><p><code>Redis</code> 没有官方的 <code>Windows</code> 版本，所以建议在 Linux 系统上安装运行。</p><p>我们使用 CentOS 7 作为安装环境。</p></blockquote><h4 id="c-安装"><a href="#c-安装" class="headerlink" title="c. 安装"></a>c. 安装</h4><ul><li><p>第一步：安装 <code>C</code> 语言需要的 <code>GCC</code> 环境</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y gcc-c++ yum install -y wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第二步：下载并解压缩 <code>Redis</code> 源码压缩包</p><pre class="line-numbers language-shell"><code class="language-shell">wget http://download.redis.io/releases/redis-5.0.5.tar.gz tar -zxf redis-5.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第三步：编译 <code>Redis</code> 源码，进入 <code>redis-5.0.5</code> 目录，执行编译命令</p><pre class="line-numbers language-shell"><code class="language-shell">cd redis-5.0.5/src make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第四步：安装 <code>Redis</code> ，需要通过 PREFIX 指定安装路径</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir /usr/redis -p make install PREFIX=/usr/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="③Redis启动"><a href="#③Redis启动" class="headerlink" title="③Redis启动"></a>③<code>Redis</code>启动</h3><h4 id="a-前端启动"><a href="#a-前端启动" class="headerlink" title="a. 前端启动"></a>a. 前端启动</h4><ul><li><p>启动命令： redis**-**server ，直接运行 <code>bin/redis-server</code> 将以前端模式启动</p><pre class="line-numbers language-shell"><code class="language-shell">./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭命令： ctrl+c</p></li><li><p>启动缺点：客户端窗口关闭则 redis-server 程序结束，不推荐使用此方法</p></li></ul><h4 id="b-后端启动（守护进程启动）"><a href="#b-后端启动（守护进程启动）" class="headerlink" title="b. 后端启动（守护进程启动）"></a>b. 后端启动（守护进程启动）</h4><ul><li><p>第一步：拷贝 <code>redis-5.0.5/redis.conf</code> 配置文件到 Redis 安装目录的 bin 目录</p><pre class="line-numbers language-shell"><code class="language-shell">cp redis.conf /usr/redis/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二步：修改 <code>redis.conf</code></p><pre class="line-numbers language-bash"><code class="language-bash">vim redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将`daemonize`由`no`改为`yes` </span>daemonize <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 默认绑定的是回环地址，默认不能被其他机器访问 </span><span class="token comment" spellcheck="true"># bind 127.0.0.1 </span><span class="token comment" spellcheck="true"># 是否开启保护模式，由yes该为no </span>protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>第三步：启动服务</p><pre class="line-numbers language-shell"><code class="language-shell">./redis-server redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭服务：<strong>后端启动的关闭方式</strong></p><pre class="line-numbers language-shell"><code class="language-shell">./redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="c-命令说明"><a href="#c-命令说明" class="headerlink" title="c. 命令说明"></a>c. 命令说明</h4><ul><li><code>redis-server·</code>：启动 <code>redis</code> 服务</li><li><code>redis-cli </code>：进入 <code>redis </code>命令客户端</li><li><code>redis-benchmark </code>：性能测试的工具</li><li><code>redis-check-aof </code>：<code>aof </code>文件进行检查的工具</li><li><code>redis-check-dump</code> ：<code>rdb</code>文件进行检查的工具</li><li><code>redis-sentinel </code>： 启动哨兵监控服务</li></ul><h3 id="④Redis命令行客户端"><a href="#④Redis命令行客户端" class="headerlink" title="④Redis命令行客户端"></a>④<code>Redis</code><strong>命令行客户端</strong></h3><h4 id="a-命令格式"><a href="#a-命令格式" class="headerlink" title="a. 命令格式"></a>a. 命令格式</h4><pre class="line-numbers language-bash"><code class="language-bash">/redis-cli -h 127.0.0.1 -p 6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-参数说明"><a href="#b-参数说明" class="headerlink" title="b. 参数说明"></a>b. 参数说明</h4><pre class="line-numbers language-bash"><code class="language-bash">-h：redis服务器的ip地址 -p：redis实例的端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="c-默认方式"><a href="#c-默认方式" class="headerlink" title="c. 默认方式"></a>c. 默认方式</h4><blockquote><p><strong>如果不指定主机和端口也可以</strong></p><p>默认主机地址是127.0.0.1</p><p>默认端口是6379</p></blockquote><h2 id="3、Redis-客户端访问"><a href="#3、Redis-客户端访问" class="headerlink" title="3、Redis 客户端访问"></a>3、<code>Redis</code> 客户端访问</h2><hr><h4 id="①Java程序访问Redis"><a href="#①Java程序访问Redis" class="headerlink" title="①Java程序访问Redis"></a>①<code>Java</code><strong>程序访问</strong><code>Redis</code></h4><blockquote><p> 采用<code>jedis API</code>进行访问即可</p></blockquote><h5 id="a-关闭RedisServer端的防火墙"><a href="#a-关闭RedisServer端的防火墙" class="headerlink" title="a. 关闭RedisServer端的防火墙"></a>a. 关闭<code>RedisServer</code>端的防火墙</h5><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalld（默认） systemctl disable firewalld.service（设置开启不启动）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="b-新建maven项目后导入Jedis包"><a href="#b-新建maven项目后导入Jedis包" class="headerlink" title="b. 新建maven项目后导入Jedis包"></a>b. 新建<code>maven</code>项目后导入<code>Jedis</code>包</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pom<span class="token punctuation">.</span>xml<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>redis<span class="token punctuation">.</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>         <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jedis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>         <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-写程序"><a href="#c-写程序" class="headerlink" title="c. 写程序"></a>c. 写程序</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//与Redis建立连接 IP+port </span>    Jedis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.127.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在Redis中写字符串 key value </span>    redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangfei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得Redis中字符串的值 </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在Redis中写list</span>    redis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获得list的长度 </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②Spring访问Redis"><a href="#②Spring访问Redis" class="headerlink" title="②Spring访问Redis"></a>②<code>Spring</code><strong>访问</strong><code>Redis</code></h4><ul><li><p>新建<code>Maven</code>项目</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704134753396.png"></p></li><li><p>添加<code>Spring</code> 依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加<code>Redis</code>依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加<code>Spring</code>配置文件( <strong>添加redis.xml</strong> )</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>propertyConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.factory.config.PropertyPlaceholderConfigur er<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>locations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath:redis.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- redis config --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxActive}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxIdle}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxWait}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.testOnBorrow}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.connection.jedis.JedisConnectionFactor y<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.server}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.port}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.timeout}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redisTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.core.RedisTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>KeySerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ValueSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加<code>properties</code>文件( <strong>添加redis.properties</strong> )</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">redis.pool.maxActive</span><span class="token punctuation">=</span><span class="token attr-value">100 </span><span class="token attr-name">redis.pool.maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">50 </span><span class="token attr-name">redis.pool.maxWait</span><span class="token punctuation">=</span><span class="token attr-value">1000 </span><span class="token attr-name">redis.pool.testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">50000 </span><span class="token attr-name">redis.server</span><span class="token punctuation">=</span><span class="token attr-value">192.168.72.128 </span><span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试用例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>AbstractJUnit4SpringContextTests<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span> <span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"classpath:redis.xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractJUnit4SpringContextTests</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Serializable<span class="token operator">></span> rt<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         rt<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangfei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rt<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="③SpringBoot访问Redis"><a href="#③SpringBoot访问Redis" class="headerlink" title="③SpringBoot访问Redis"></a>③<code>SpringBoot</code><strong>访问</strong><code>Redis</code></h4><ul><li><p>新建<code>Springboot</code>项目</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704140545009.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704140602356.png"></p></li><li><p>添加<code>redis</code>依赖包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加配置文件<code>application.yml</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">redis</span><span class="token punctuation">:</span>         <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.72.128         <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379 </span>        <span class="token key atrule">jedis</span><span class="token punctuation">:</span>             <span class="token key atrule">pool</span><span class="token punctuation">:</span> <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0 </span>            <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8 </span>            <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">80 </span>            <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">30000 </span>            <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加配置类<code>RedisConfifig</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>sbr<span class="token punctuation">.</span>cache<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> RedisConnectionFactory factory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加<code>RedisController</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>sbr<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span> <span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/redis"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/put"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">put</span><span class="token punctuation">(</span>  <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  String key<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//设置过期时间为20秒 </span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改<code>Application</code>并运行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>sbr<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span> <span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableCaching</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootRedisApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootRedisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4、Redis-数据类型选择-x2F-应用场景"><a href="#4、Redis-数据类型选择-x2F-应用场景" class="headerlink" title="4、Redis 数据类型选择/应用场景"></a>4、<code>Redis</code> 数据类型选择/应用场景</h2><hr><blockquote><ul><li><code>Redis</code>是一个<code>Key-Value</code>的存储系统，使用ANSI C语言编写。</li><li><code>key</code>的类型是字符串。</li><li><code>value</code>的数据类型有：常用的：<code>string</code>字符串类型、<code>list</code>列表类型、<code>set</code>集合类型、<code>sortedset</code>（<code>zset</code>）有序集合类型、<code>hash</code>类型。不常见的：<code>bitmap</code>位图类型、<code>geo</code>地理位置类型。<code>Redis5.0</code>新增一种：<code>stream</code>类型.注意：<code>Redis</code>中命令是忽略大小写，（<code>set SET</code>），<code>key</code>是不忽略大小写的 （<code>NAME</code> <code>name</code>）</li></ul></blockquote><h4 id="①Redis的Key的设计"><a href="#①Redis的Key的设计" class="headerlink" title="①Redis的Key的设计"></a>①<code>Redis</code>的<code>Key</code>的设计</h4><ul><li>用:分割</li><li>把表名转换为key前缀, 比如: user:</li><li>第二段放置主键值</li><li>第三段放置列名</li></ul><h4 id="②String字符串数据类型"><a href="#②String字符串数据类型" class="headerlink" title="②String字符串数据类型"></a>②<code>String</code>字符串数据类型</h4><blockquote><p> Redis的String能表达3种值的类型：字符串、整数、浮点数 100.01 是个六位的串</p></blockquote><table><thead><tr><th><strong>命令名称</strong></th><th align="left">desc</th><th><strong>命令描述</strong></th></tr></thead><tbody><tr><td>set</td><td align="left">set key value</td><td>赋值</td></tr><tr><td>get</td><td align="left">get key</td><td>取值</td></tr><tr><td>getset</td><td align="left">getset key value</td><td>取值并赋值</td></tr><tr><td>setnx</td><td align="left">setnx key value</td><td>当key不存在时才用赋值<br>set key value NX PX 3000 原子操作，px 设置毫秒数</td></tr><tr><td>append</td><td align="left">append key value</td><td>向尾部追加值</td></tr><tr><td>strlen</td><td align="left">strlen key</td><td>获取字符串长度</td></tr><tr><td>incr</td><td align="left">incr key</td><td>递增数字</td></tr><tr><td>incrby</td><td align="left">incrby key increment</td><td>增加指定的整数</td></tr><tr><td>decr</td><td align="left">decr key</td><td>递减数字</td></tr><tr><td>decrby</td><td align="left">decrby key decrement</td><td>减少指定的整数</td></tr></tbody></table><blockquote><p>应用场景;</p><ol><li>key和命令是字符串</li><li>普通的赋值</li><li>incr用于乐观锁    –&gt;   incr：递增数字，可用于实现乐观锁 watch(事务) </li><li>setnx用于分布式锁 –&gt;   当value不存在时采用赋值，可用于实现分布式锁</li></ol></blockquote><h4 id="③List列表数据类型"><a href="#③List列表数据类型" class="headerlink" title="③List列表数据类型"></a>③<code>List</code>列表数据类型</h4><blockquote><p>list列表类型可以存储有序、可重复的元素</p><p>获取头部或尾部附近的记录是极快的</p><p>list的元素个数最多为2^32-1个（40亿）</p><p>常见操作命令如下表：</p></blockquote><table><thead><tr><th><strong>命令名称</strong></th><th align="left"><strong>命令格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>lpush</td><td align="left">lpush key v1v2 v3 …</td><td>从左侧插入列表</td></tr><tr><td>lpop</td><td align="left">lpop key</td><td>从列表左侧取出</td></tr><tr><td>rpush</td><td align="left">rpush key v1v2 v3 …</td><td>从右侧插入列表</td></tr><tr><td>rpop</td><td align="left">rpop key</td><td>从列表右侧取出</td></tr><tr><td>lpushx</td><td align="left">lpushx key value</td><td>将值插入到列表头部</td></tr><tr><td>rpushx</td><td align="left">rpushx key value</td><td>将值插入到列表尾部</td></tr><tr><td>blpop</td><td align="left">blpop key  timeout</td><td>从列表左侧取出，当列表为空时阻塞，可以设置最大阻塞时间，单位为秒</td></tr><tr><td>brpop</td><td align="left">blpop key timeout</td><td>从列表右侧取出，当列表为空时阻塞，可以设置最大阻塞时间，单位为秒</td></tr><tr><td>llen</td><td align="left">llen key</td><td>获得列表中元素个数</td></tr><tr><td>lindex</td><td align="left">lindex key index</td><td>获得列表中下标为index的元素 index从0开始</td></tr><tr><td>lrange</td><td align="left">lrange key start end</td><td>返回列表中指定区间的元素，区间通过start和end指定</td></tr><tr><td>lrem</td><td align="left">lrem key count value</td><td>删除列表中与value相等的元素当count&gt;0时， lrem会从列表左边开始删除;当count&lt;0时，lrem会从列表后边开始删除;当count=0时， lrem删除所有值为value的元素</td></tr><tr><td>lset</td><td align="left">lset key index value</td><td>将列表index位置的元素设置成value的值</td></tr><tr><td>ltrim</td><td align="left">ltrim key start end</td><td>对列表进行修剪，只保留start到end区间</td></tr><tr><td>rpoplpush</td><td align="left">rpoplpush key1 key2</td><td>从key1列表右侧弹出并插入到key2列表左侧</td></tr><tr><td>brpoplpush</td><td align="left">brpoplpush</td><td>从key1列表右侧弹出并插入到key2列表左侧，会阻塞</td></tr><tr><td>linsert</td><td align="left">linsert key BEFORE/AFTER pivot value</td><td>将value插入到列表，且位于值pivot之前或之后</td></tr></tbody></table><blockquote><p>应用场景：</p><ol><li>作为栈或队列使用 –&gt; 列表有序可以作为栈和队列使用</li><li>可用于各种列表，比如用户列表、商品列表、评论列表等。</li></ol></blockquote><h4 id="④Set集合类型"><a href="#④Set集合类型" class="headerlink" title="④Set集合类型"></a>④<code>Set</code>集合类型</h4><blockquote><p>Set：无序、唯一元素</p><p>集合中最大的成员数为 2^32 - 1</p><p>常见操作命令如下表：</p></blockquote><table><thead><tr><th><strong>命令名称</strong></th><th><strong>命令格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>sadd</td><td>sadd key mem1 mem2 ….</td><td>为集合添加新成员</td></tr><tr><td>srem</td><td>srem key mem1 mem2 ….</td><td>删除集合中指定成员</td></tr><tr><td>smembers</td><td>smembers key</td><td>获得集合中所有元素</td></tr><tr><td>spop</td><td>spop key</td><td>返回集合中一个随机元素，并将该元素删除</td></tr><tr><td>srandmember</td><td>srandmember key</td><td>返回集合中一个随机元素，不会删除该元素</td></tr><tr><td>scard</td><td>scard key</td><td>获得集合中元素的数量</td></tr><tr><td>sismember</td><td>sismember key member</td><td>判断元素是否在集合内</td></tr><tr><td>sinter</td><td>sinter key1 key2 key3</td><td>求多集合的交集</td></tr><tr><td>sdiffff</td><td>sdiffff key1 key2 key3</td><td>求多集合的差集</td></tr><tr><td>sunion</td><td>sunion key1 key2 key3</td><td>求多集合的并集</td></tr></tbody></table><blockquote><p>应用场景：</p><p>适用于不能重复的且不需要顺序的数据结构</p><p>比如：关注的用户，还可以通过spop进行随机抽奖</p></blockquote><h4 id="⑤-sortedset有序集合类型"><a href="#⑤-sortedset有序集合类型" class="headerlink" title="⑤ sortedset有序集合类型"></a>⑤ <code>sortedset</code>有序集合类型</h4><blockquote><p>SortedSet(ZSet) 有序集合： </p><ol><li>元素本身是无序不重复的</li><li>每个元素关联一个分数(score)</li><li>可按分数排序，分数可重复</li></ol><p>常见操作命令如下表：</p></blockquote><table><thead><tr><th><strong>命令名称</strong></th><th><strong>命令格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>zadd</td><td>zadd key score1 member1 score2 member2 …</td><td>为有序集合添加新成员</td></tr><tr><td>zrem</td><td>zrem key mem1 mem2 ….</td><td>删除有序集合中指定成员</td></tr><tr><td>zcard</td><td>zcard key</td><td>获得有序集合中的元素数量</td></tr><tr><td>zcount</td><td>zcount key min max</td><td>返回集合中score值在[min,max]区间的元素数量</td></tr><tr><td>zincrby</td><td>zincrby key increment member</td><td>在集合的member分值上加increment</td></tr><tr><td>zscore</td><td>zscore key member</td><td>获得集合中member的分值</td></tr><tr><td>zrank</td><td>zrank key member</td><td>获得集合中member的排名（按分值从小到大）</td></tr><tr><td>zrevrank</td><td>zrevrank key member</td><td>获得集合中指定区间成员，按分数递增排序</td></tr><tr><td>zrevrange</td><td>zrevrange key start end</td><td>获得集合中指定区间成员，按分数递减排序</td></tr></tbody></table><blockquote><p> 应用场景：</p><p>由于可以按照分值排序，所以适用于各种排行榜。比如：点击排行榜、销量排行榜、关注排行榜等</p></blockquote><h4 id="⑥hash类型（散列表）"><a href="#⑥hash类型（散列表）" class="headerlink" title="⑥hash类型（散列表）"></a>⑥<code>hash</code>类型（散列表）</h4><blockquote><p>Redis hash 是一个 string 类型的 fifield 和 value 的映射表，它提供了字段和字段值的映射。</p><p>每个 hash 可以存储 2^32 - 1 键值对（40多亿）。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/Redis/image-20220704171029691.png"></p><p>常见操作命令如下表：</p></blockquote><table><thead><tr><th><strong>命令名称</strong></th><th><strong>命令格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>hset</td><td>hset key fifield value</td><td>赋值，不区别新增或修改</td></tr><tr><td>hmset</td><td>hmset key fifield1 value1 fifield2 value2</td><td>批量赋值</td></tr><tr><td>hsetnx</td><td>hsetnx key fifield value</td><td>赋值，如果fifiled存在则不操作</td></tr><tr><td>hexists</td><td>hexists key fifiled</td><td>查看某个fifield是否存在</td></tr><tr><td>hget</td><td>hget key fifield</td><td>获取一个字段值</td></tr><tr><td>hmget</td><td>hmget key fifield1 fifield2 …</td><td>获取多个字段值</td></tr><tr><td>hgetall</td><td>hgetall key</td><td></td></tr><tr><td>hdel</td><td>hdel key fifield1 fifield2…</td><td>删除指定字段</td></tr><tr><td>hincrby</td><td>hincrby key fifield increment</td><td>指定字段自增increment</td></tr><tr><td>hlen</td><td>hlen key</td><td>获得字段数量</td></tr></tbody></table><blockquote><p>应用场景：</p><p>对象的存储 ，表数据的映射</p></blockquote><h4 id="⑦bitmap位图类型"><a href="#⑦bitmap位图类型" class="headerlink" title="⑦bitmap位图类型"></a>⑦<code>bitmap</code>位图类型</h4><blockquote><p>bitmap是进行位操作的</p><p>通过一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。</p><p>bitmap本身会极大的节省储存空间。</p><p>常见操作命令如下表：</p></blockquote><table><thead><tr><th><strong>命令名</strong>称</th><th><strong>命令格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>setbit</td><td>setbit key offffset value</td><td>设置key在offffset处的bit值(只能是0或者1)</td></tr><tr><td>getbit</td><td>getbit key offffset</td><td>获得key在offffset处的bit值</td></tr><tr><td>bitcount</td><td>bitcount key</td><td>获得key的bit位为1的个数</td></tr><tr><td>bitpos</td><td>bitpos key value</td><td>返回第一个被设置为bit值的索引值</td></tr><tr><td>bitop</td><td>bitop and[or/xor/not] destkey key [key …]</td><td>对多个key 进行逻辑运算后存入destkey 中</td></tr></tbody></table><blockquote><p>应用场景：</p><ol><li>用户每月签到，用户id为key ，日期作为偏移量 1表示签到</li><li>统计活跃用户, 日期为key，用户id为偏移量 1表示活跃</li><li>查询用户在线状态，日期为key，用户id为偏移量 1表示在线</li></ol></blockquote><h4 id="⑧geo地理位置类型"><a href="#⑧geo地理位置类型" class="headerlink" title="⑧geo地理位置类型"></a>⑧<code>geo</code>地理位置类型</h4><p>略。。。</p><h4 id="⑨stream数据流类型"><a href="#⑨stream数据流类型" class="headerlink" title="⑨stream数据流类型"></a>⑨<code>stream</code>数据流类型</h4><p>略。。。</p>]]></content>
      
      
      <categories>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KuDu的使用教程</title>
      <link href="/2022/06/25/kudu/"/>
      <url>/2022/06/25/kudu/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>本片文章仅供参考</p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><hr><h3 id="1-1、背景"><a href="#1-1、背景" class="headerlink" title="1.1、背景"></a>1.1、背景</h3><hr><blockquote><p><code>Apache Kudu</code>是由C<code>loudera</code>开源的存储引擎，可以同时提供<strong>低延迟的随机读写</strong>和<strong>高效的数据分析</strong>能力。<code>Kudu</code><strong>支持水平扩展</strong>，使用Raft协议进行一致性保证，并且与<code>Cloudera Impala</code>和<code>Apache Spark</code>等当前流行的大数据查询和分析工具结合紧密。</p></blockquote><blockquote><p>现在提起大数据存储，我们能想到的技术有很多，比<code>如HDFS</code>，以及在<code>HDFS</code>上的列式存储技术<code>Apache Parquet</code>，<code>Apache ORC</code>，还有以<code>KV</code>形式存储半结构化数据的<code>Apache HBase</code>和<code>Apache Cassandra</code>等等。既然有了如此多的存储技术，<code>Cloudera</code>公司为什么要开发出一款全新的存储引擎Kudu呢？</p><p>基于<code>HDFS</code>的存储技术：</p><p>​数据分析：<code>Parquet</code>，具有高吞吐量连续读取数据的能力</p><p>​实时读写：<code>HBase</code>和<code>Cassandra</code>等技术适用于低延迟的随机读写场景</p><p>在 <code>KUDU</code> 之前，大数据主要以两种方式存储：</p><ul><li><strong>静态数据</strong>：以 <code>HDFS</code> 引擎作为存储引擎，适用于高吞吐量的离线大数据分析场景。这类存储的局限性是数据无法进行随机的读写。</li><li><strong>动态数据</strong>：以 <code>HBase</code>、<code>Cassandra</code> 作为存储引擎，适用于大数据随机读写场景。这类存储的局限性是批量读取吞吐量远不如<code> HDFS</code>，不适用于批量数据分析的场景。</li></ul><p>所以现在的企业中，经常会存储两套数据分别用于实时读写与数据分析，</p><p>先将数据写入<code>HBase</code>中，再定期通过<code>ETL</code>到<code>Parquet</code>进行数据同步。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220727134346021.png"></p><p>但是这样做有很多<strong>缺点</strong>：</p><ul><li>用户需要在两套系统间编写和维护复杂的<code>ETL</code>逻辑。结构复杂，维护成本高。</li><li>时效性较差。因为ETL通常是一个小时、几个小时甚至是一天一次，那么可供分析的数据就需要一个小时至一天的时间后才进入到可用状态，也就是说从数据到达到可被分析之间是会存在一个较为明显的“空档期”的。</li><li>更新需求难以满足。在实际情况中可能会有一些对已经写入的数据的更新需求，这种情况往往需要对历史数据进行更新，而对<code>Parquet</code>这种静态数据集的更新操作，代价是非常昂贵的。</li><li>存储资源浪费。两套存储系统意味着占用的磁盘资源翻倍了，造成了成本的提升。</li></ul><p><strong>由此引出了<code>KuDu</code>,<code>Kudu</code>不但提供了行级的插入、更新、删除<code>API</code>，同时也提供了接近<code>Parquet</code>性能的批量扫描操作。使用同一份存储，既可以进行随机读写，也可以满足数据分析的要求。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220727134903801.png"></p></blockquote><h3 id="1-2、数据模型"><a href="#1-2、数据模型" class="headerlink" title="1.2、数据模型"></a>1.2、数据模型</h3><hr><blockquote><p><code>KUDU</code> 的数据模型与传统的<strong>关系型数据库</strong>类似，一个<code> KUDU</code> 集群由多个<strong>表</strong>组成，每个表由多个<strong>字段</strong>组成，一个表必须指定一个由若干个（&gt;=1）字段组成的<strong>主键</strong>，如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220727135116607.png"></p></blockquote><blockquote><p>从用户角度来看，</p><ul><li><p><code>Kudu</code>是一种存储结构化数据表的存储系统。</p></li><li><p>在一个<code>Kudu</code>集群中可以定义任意数量的<code>table</code>，每个<code>table</code>都需要预先定义好<code>schema</code>。</p></li><li><p>每个<code>table</code>的列数是确定的，每一列都需要有名字和类型，每个表中可以把其中一列或多列定义为主键。</p></li></ul><p>这么看来，<code>Kudu</code>更像关系型数据库，而不是像<code>HBase</code>、<code>Cassandra</code>和<code>MongoDB</code>这些<code>NoSQL</code>数据库。不过<code>Kudu</code>目前还不能像关系型数据一样支持二级索引。<code> Kudu</code>使用确定的列类型，字段是强类型的，而不是类似于<code>NoSQL</code>的<code>everything is byte</code>。这可以带来两点好处：</p><ol><li>确定的列类型使<code>Kudu</code>可以进行类型特有的编码，节省空间。</li><li>可以提供 <code>SQL-like</code> 元数据给其他上层查询工具，比如<code>BI</code>工具。</li><li><code>KUDU</code> 的使用场景是 OLAP 分析，有一个数据类型对下游的分析工具也更加友好。</li></ol></blockquote><blockquote><p>用户可以使用 <code>Insert</code>，<code>Update</code>和<code>Delete API</code>对表进行写操作。不论使用哪种<code>API</code>，都必须指定主键。但批量的删除和更新操作需要依赖更高层次的组件（比如<code>Impala</code>、<code>Spark</code>）。<code>Kudu</code>目前还<strong>不支持多行事务</strong>。 而在读操作方面，<code>Kudu</code>只提供了Scan操作来获取数据。用户可以通过指定过滤条件来获取自己想要读取的数据，<strong>但目前只提供了两种类型的过滤条件：主键范围和列值与常数的比较</strong>。由于<code>Kudu</code>在硬盘中的数据采用列式存储，所以只扫描需要的列将极大地提高读取性能。</p></blockquote><blockquote><p><code>Kudu</code>为用户提供了两种一致性模型。默认的一致性模型是<code>snapshot consistency</code>。这种一致性模型保证用户每次读取出来的都是一个可用的快照，但这种一致性模型只能保证单个<code>client</code>可以看到最新的数据，但不能保证多个<code>client</code>每次取出的都是最新的数据。</p><p>另一种一致性模型<code>external consistency</code>可以在多个client之间保证每次取到的都是最新数据，但是<code>Kudu</code>没有提供默认的实现，需要用户做一些额外工作。为了实现<code>external consistency</code>，<code>Kudu</code>提供了两种方式：</p><ol><li>在<code>client</code>之间传播<code>timestamp token</code>。在一个client完成一次写入后，会得到一个<code>timestamp token</code>，然后这个<code>client</code>把这个<code>token</code>传播到其他<code>client</code>，这样其他<code>client</code>就可以通过<code>token</code>取到最新数据了。不过这个方式的复杂度很高。</li><li>通过<code>commit-wait</code>方式，这有些类似于<code>Google</code>的<code>Spanner</code>。但是目前基于<code>NTP</code>的<code>commit-wait</code>方式延迟实在有点高。不过<code>Kudu</code>相信，随着<code>Spanner</code>的出现，未来几年内基于<code>real-time clock</code>的技术将会逐渐成熟。</li></ol></blockquote><h2 id="二、KuDu的架构"><a href="#二、KuDu的架构" class="headerlink" title="二、KuDu的架构"></a>二、<code>KuDu</code>的架构</h2><hr><blockquote><p>与<code>HDFS</code>和<code>HBase</code>相似，<code>Kudu</code>使用单个的<code>Master</code>节点，用来管理集群的元数据，并且使用任意数量的<code>Tablet Server</code>节点用来存储实际数据。可以部署多个<code>Master</code>节点来提高容错性。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220727160427144.png"></p><h3 id="2-1、Master"><a href="#2-1、Master" class="headerlink" title="2.1、Master"></a>2.1、<code>Master</code></h3><blockquote><p><code>Kudu</code>的<code>master</code>节点负责整个集群的元数据管理和服务协调。它承担着以下功能：</p><ol><li>作为<code>catalog manager</code>，<code>master</code>节点管理着集群中所有<code>table</code>和<code>tablet</code>的<code>schema</code>及一些其他的元数据。</li><li>作为<code>cluster coordinator</code>，<code>master</code>节点追踪着所有<code>server</code>节点是否存活，并且当<code>server</code>节点挂掉后协调数据的重新分布。</li><li>作为<code>tablet directory</code>，<code>master</code>跟踪每个<code>tablet</code>的位置</li></ol></blockquote><pre class="line-numbers language-tex"><code class="language-tex">名词解释Catalog Manager：        Kudu的master节点会持有一个单tablet的table——catalog table，但是用户是不能直接访问的。master将内部的catalog信息写入该tablet，并且将整个catalog的信息缓存到内存中。随着现在商用服务器上的内存越来越大，并且元数据信息占用的空间其实并不大，所以master不容易存在性能瓶颈。catalog table保存了所有table的schema的版本以及table的状态（创建、运行、删除等）。        Cluster Coordination:    Kudu集群中的每个tablet server都需要配置master的主机名列表。当集群启动时，tablet server会向master注册，并发送所有tablet的信息。tablet server第一次向master发送信息时会发送所有tablet的全量信息，后续每次发送则只会发送增量信息，仅包含新创建、删除或修改的tablet的信息。 作为cluster oordination，master只是集群状态的观察者。对于tablet server中tablet的副本位置、Raft配置和schema版本等信息的控制和修改由tablet server自身完成。master只需要下发命令，tablet server执行成功后会自动上报处理的结果。Tablet Directory:        因为master上缓存了集群的元数据，所以client读写数据的时候，肯定是要通过master才能获取到tablet的位置等信息。但是如果每次读写都要通过master节点的话，那master就会变成这个集群的性能瓶颈，所以client会在本地缓存一份它需要访问的tablet的位置信息，这样就不用每次读写都从master中获取。 因为tablet的位置可能也会发生变化（比如某个tablet server节点crash掉了），所以当tablet的位置发生变化的时候，client会收到相应的通知，然后再去master上获取一份新的元数据信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、Table"><a href="#2-2、Table" class="headerlink" title="2.2、Table"></a>2.2、<code>Table</code></h3><blockquote><p>在数据存储方面，Kudu选择完全由自己实现，而没有借助于已有的开源方案。tablet存储主要想要实现的目标为：</p><ul><li>快速的列扫描</li><li>低延迟的随机读写</li><li>一致性的性能</li></ul></blockquote><pre class="line-numbers language-tex"><code class="language-tex">名词解释：RowSets    在Kudu中，tablet被细分为更小的单元，叫做RowSets。一些RowSet仅存在于内存中，被称为MemRowSets，而另一些则同时使用内存和硬盘，被称为DiskRowSets。任何一行未被删除的数据都只能存在于一个RowSet中。 无论任何时候，一个tablet仅有一个MemRowSet用来保存最新插入的数据，并且有一个后台线程会定期把内存中的数据flush到硬盘上。 当一个MemRowSet被flush到硬盘上以后，一个新的MemRowSet会替代它。而原有的MemRowSet会变成一到多个DiskRowSet。flush操作是完全同步进行的，在进行flush时，client同样可以进行读写操作。MemRowSet：    MemRowSets是一个可以被并发访问并进行过锁优化的B-tree，主要是基于MassTree来设计的，但存在几点不同：        1、Kudu并不支持直接删除操作，由于使用了MVCC，所以在Kudu中删除操作其实是插入一条标志着删除的数据，这样就可以推迟删除操作。        2、类似删除操作，Kudu也不支持原地更新操作。        3、将tree的leaf链接起来，就像B+-tree。这一步关键的操作可以明显地提升scan操作的性能。        4、没有实现字典树（trie树），而是只用了单个tree，因为Kudu并不适用于极高的随机读写的场景。        *与Kudu中其他模块中的数据结构不同，MemRowSet中的数据使用行式存储。因为数据都在内存中，所以性能也是可以接受的，而且Kudu对在MemRowSet中的数据结构进行了一定的优化。        DiskRowSet：    当MemRowSet被flush到硬盘上，就变成了DiskRowSet。当MemRowSet被flush到硬盘的时候，每32M就会形成一个新的DiskRowSet，这主要是为了保证每个DiskRowSet不会太大，便于后续的增量compaction操作。Kudu通过将数据分为base data和delta data，来实现数据的更新操作。Kudu会将数据按列存储，数据被切分成多个page，并使用B-tree进行索引。除了用户写入的数据，Kudu还会将主键索引存入一个列中，并且提供布隆过滤器来进行高效查找。Compaction：    为了提高查询性能，Kudu会定期进行compaction操作，合并delta data与base data，对标记了删除的数据进行删除，并且会合并一些DiskRowSet。    分区：    选择分区策略需要理解数据模型和表的预期工作负载:        1、对于写量大的工作负载，重要的是要设计分区，使写分散在各个tablet上，以避免单个tablet超载。        2、对于涉及许多短扫描的工作负载(其中联系远程服务器的开销占主导地位)，如果扫描的所有数据都位于同一块tablet上，则可以提高性能。        *没有默认分区 在创建表时，Kudu不提供默认的分区策略。建议预期具有繁重读写工作负载的新表至少拥有与tablet服务器相同的tablet。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、KuDu的安装和运行"><a href="#三、KuDu的安装和运行" class="headerlink" title="三、KuDu的安装和运行"></a>三、<code>KuDu</code>的安装和运行</h2><hr><h3 id="3-1、安装前提和准备"><a href="#3-1、安装前提和准备" class="headerlink" title="3.1、安装前提和准备"></a>3.1、安装前提和准备</h3><hr><blockquote><p>硬件：</p><ul><li>一台或者多台机器跑<code>kudu-master</code>。建议跑一个<code>master</code>(无容错机制)、三个<code>master</code>(允许一个节点运行出错)或者五个<code>master</code>(允许两个节点出错)。</li><li>一台或者多台机器跑<code>kudu-tserver</code>。当需要使用副本，至少需要三个节点运行<code>kudu-tserver</code>服务。</li></ul><p>操作系统：</p><ul><li><code>RHEL 6</code>, <code>RHEL 7</code>, <code>CentOS 6</code>, <code>CentOS 7</code>, <code>Ubuntu 14.04 (Trusty)</code>, <code>Ubuntu 16.04 (Xenial)</code>,<code> Debian 8 (Jessie)</code>, or<code>SLES 12</code>.</li><li>内核和文件系统支持 hole punching 选项。</li><li>ntp服务。</li><li>xfs or ext4 formatted drives</li></ul><p>存储：</p><ul><li>尽量使用固态存储，将显著提高kudu性能</li><li></li></ul><p>管理：</p><ul><li>​如果你使用的是<code>CDH</code>，需要<code>Cloudera Manager 5.4.3</code>及以上的版本。</li></ul><p>环境说明：</p><ul><li><code>os</code>：<code>CentOS Linux release 7.6.1810</code> (<code>Core</code>)</li><li><code>hdp-1</code> <code>hdp-2</code> <code>hpd-3</code> 三台机器 <code>hdp-1</code>启动<code>Master </code> ,<code>hdp-1</code>,<code>hdp-2</code>,<code>hdp-3</code>启动<code>tserver</code></li></ul></blockquote><h3 id="3-2安装ntp"><a href="#3-2安装ntp" class="headerlink" title="3.2安装ntp"></a>3.2安装<code>ntp</code></h3><blockquote><p>每个节点执行,安装<code>ntp</code>服务，用来做时间同步</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改<code>ntp</code>的配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/ntp.conf<span class="token comment" spellcheck="true">##注释以下内容</span><span class="token comment" spellcheck="true">#server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改<code>hdp-2</code>节点，<code>ntp</code>配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/ntp.confrestrict 192.168.81.0 mask 255.255.255.0 notrap nomodify <span class="token comment" spellcheck="true"># 给192.168.81.0网段，子网掩码 为255.255.255.0的局域网机的机器有同步时间的权限 </span>server 192.168.81.130 prefer <span class="token comment" spellcheck="true"># prefer代表优先使用此ip做同步 </span>server 127.127.1.0 <span class="token comment" spellcheck="true"># 当所有服务器都不能使用时，使用 本机作为同步服务器 </span>fudge 127.127.1.0 stratum 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改<code>hdp-1</code> ,<code>hdp-3</code>,<code>ntp</code>配置文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/ntp.confserver 192.168.81.130 prefer server 127.127.1.0 fudge 127.127.1.0 stratum 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每个节点，启动<code>ntp</code> 服务</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> ntpd start <span class="token function">chkconfig</span> ntpd on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>检查<code>ntp</code>服务是否成功输入：<code>ntpstat</code></p><p>输出如下则启动成功并且同步已完成</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">synchronised to local net at stratum 11<span class="token function">time</span> correct to within 11 ms polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3、配置Yum的Repository"><a href="#3-3、配置Yum的Repository" class="headerlink" title="3.3、配置Yum的Repository"></a>3.3、配置<code>Yum</code>的<code>Repository</code></h3><blockquote><p>在使用 <code>yum</code>来安装<code>kudu</code>的时候，由于<code>kudu</code>不是<code>yum</code>的常规组件，直接安装会找不到<code>kudu</code>，所以第一步需要将<code>kudu</code>的<code>repo</code>文件下载并放置到合适的位置。</p></blockquote><h4 id="3-3-1、下载kudu的repo文件-下载repo文件"><a href="#3-3-1、下载kudu的repo文件-下载repo文件" class="headerlink" title="3.3.1、下载kudu的repo文件 下载repo文件"></a>3.3.1、下载<code>kudu</code>的<code>repo</code>文件 下载<code>repo</code>文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://archive.cloudera.com/kudu/redhat/7/x86_64/kudu/cloudera-kudu.rep<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-2、将下载的repo文件放置到-x2F-etc-x2F-yum-repos-d-x2F-目录下"><a href="#3-3-2、将下载的repo文件放置到-x2F-etc-x2F-yum-repos-d-x2F-目录下" class="headerlink" title="3.3.2、将下载的repo文件放置到/etc/yum.repos.d/目录下"></a>3.3.2、将下载的repo文件放置到/etc/yum.repos.d/目录下</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> cloudera-kudu.repo <span class="token function">mv</span> /etc/yum.repos.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4、安装KuDu"><a href="#3-4、安装KuDu" class="headerlink" title="3.4、安装KuDu"></a>3.4、安装<code>KuDu</code></h3><blockquote><p>部署：</p><ol><li>hdp-1：slaver</li><li>hdp-2：master</li><li>hdp-3：slaver</li></ol></blockquote><blockquote><p>在每个节点上执行，安装完成，在<code>/etc/kudu/conf</code>目录下有两个文件：<code>master.gflflagfifile</code>和<code>tserver.gflflagfifile</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> kudu kudu-master kudu-client0 kudu-client-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-4-1、修改配置文件"><a href="#3-4-1、修改配置文件" class="headerlink" title="3.4.1、修改配置文件"></a>3.4.1、修改配置文件</h4><blockquote><p>修改<code>kudu-master</code>启动配置 <code>hdp-2</code>节点</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/default/kudu-master<span class="token function">export</span> FLAGS_rpc_bind_addresses<span class="token operator">=</span>192.168.81.130:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220728095620896.png"></p><blockquote><p>修改<strong>每个节点</strong>的<code>kudu-tserver</code>启动配置</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/default/kudu-tserver<span class="token function">export</span> FLAGS_rpc_bind_addresses<span class="token operator">=</span>192.168.81.130:7050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220728095727317.png"></p><blockquote><p><code>hdp-2</code>，<code>master.gflflagfifile</code>的配置修改</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">--fromenv<span class="token operator">=</span>rpc_bind_addresses --fromenv<span class="token operator">=</span>log_dir--fs_wal_dir<span class="token operator">=</span>/var/lib/kudu/master --fs_data_dirs<span class="token operator">=</span>/var/lib/kudu/master -unlock_unsafe_flags<span class="token operator">=</span>true -allow_unsafe_replication_factor<span class="token operator">=</span>true -default_num_replicas<span class="token operator">=</span>1 <span class="token comment" spellcheck="true"># 此参数可以调整备份数量，默认为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每个节点，<code>tserver.gflflagfifile</code> 的配置修改</p><p><strong>注意，这里的–<code>tserver_master_addrs</code>指明了集群中<code>master</code>的地址，指向同一个<code>master</code>的tserver形成了一个<code>kudu</code>集群</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Do not modify these two lines. If you wish to change these variables, </span><span class="token comment" spellcheck="true"># modify them in /etc/default/kudu-tserver.</span>--fromenv<span class="token operator">=</span>rpc_bind_addresses --fromenv<span class="token operator">=</span>log_dir --fs_wal_dir<span class="token operator">=</span>/var/lib/kudu/tserver --fs_data_dirs<span class="token operator">=</span>/var/lib/kudu/tserver --tserver_master_addrs<span class="token operator">=</span>hdp-2:7051 -unlock_unsafe_flags<span class="token operator">=</span>true -allow_unsafe_replication_factor<span class="token operator">=</span>true -default_num_replicas<span class="token operator">=</span>1 --tserver_master_addrs<span class="token operator">=</span>192.168.81.130:7051 <span class="token comment" spellcheck="true"># 此参数指定master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每台节点，修改 <code>/etc/security/limits.d/20-nproc.conf </code>文件，解除kudu用户的线程限制,注意：<code>20</code>可能不同，根据自己的来修改</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/security/limits.d/20-nproc.confkudu soft nproc unlimited impala soft nproc unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2、启动kudu"><a href="#3-4-2、启动kudu" class="headerlink" title="3.4.2、启动kudu"></a>3.4.2、启动<code>kudu</code></h4><blockquote><p><code>Master</code>节点</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> kudu-master start <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220728101054390.png"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> kudu-tserver start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/../image/KuDu/image-20220728101037141.png"></p><blockquote><p><code>slaver</code>节点</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> kudu-tserver start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>kudu-master</code>启动失败，查看<code>/var/log/kudu/err</code>，每个节点执行</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">ntpdate -u ntp.api.bz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、KuDu常用Api-java"><a href="#四、KuDu常用Api-java" class="headerlink" title="四、KuDu常用Api(java)"></a>四、<code>KuDu</code>常用<code>Api</code>(<code>java</code>)</h2><hr><h3 id="4-1、创建一个Maven工程，添加依赖"><a href="#4-1、创建一个Maven工程，添加依赖" class="headerlink" title="4.1、创建一个Maven工程，添加依赖"></a>4.1、创建一个<code>Maven</code>工程，添加依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kudu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kudu-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、创建表"><a href="#4-2、创建表" class="headerlink" title="4.2、创建表"></a>4.2、创建表</h3><blockquote><ol><li>指定表连接到的master节点主机名</li><li>定义s<code>chema</code> ，声明的每一个字段必须显式的说明是否是主键 </li><li>指定副本数量、分区策略和数量</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>ColumnSchema<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>Type<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CreateTableOptions<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>KuduClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>KuduException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建KuDu的client </span>    String masterAddresses <span class="token operator">=</span> <span class="token string">"hdp-2"</span><span class="token punctuation">;</span>    KuduClient<span class="token punctuation">.</span>KuduClientBuilder kuduClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span>masterAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>    KuduClient client <span class="token operator">=</span> kuduClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建schema</span>    String tableName <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定每一列的信息 </span>    ArrayList<span class="token operator">&lt;</span>ColumnSchema<span class="token operator">></span> columnSchemas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ColumnSchema<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ColumnSchema id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColumnSchema<span class="token punctuation">.</span>ColumnSchemaBuilder</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>INT32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ColumnSchema name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColumnSchema<span class="token punctuation">.</span>ColumnSchemaBuilder</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    columnSchemas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> columnSchemas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> Schema schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span>columnSchemas<span class="token punctuation">)</span><span class="token punctuation">;</span>        CreateTableOptions options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateTableOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设定当前的副本数量为1 </span>    options<span class="token punctuation">.</span><span class="token function">setNumReplicas</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> colrule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     colrule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     options<span class="token punctuation">.</span><span class="token function">addHashPartitions</span><span class="token punctuation">(</span>colrule<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        client<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span>schema<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、插入数据"><a href="#4-3、插入数据" class="headerlink" title="4.3、插入数据"></a>4.3、插入数据</h3><blockquote><p>1、获取客户端</p><p>2、打开一张表</p><p>3、创建会话</p><p>4、设置刷新模式</p><p>5、获取插入实例</p><p>6、声明带插入数据</p><p>7、刷入数据</p><p>8、应用插入实例</p><p>9、关闭会话</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取客户端</span>    String masterAddr <span class="token operator">=</span> <span class="token string">"hdp-2"</span><span class="token punctuation">;</span> KuduClient<span class="token punctuation">.</span>KuduClientBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span>masterAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设定读取数据超时时间</span>    builder<span class="token punctuation">.</span><span class="token function">defaultSocketReadTimeoutMs</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     KuduClient client <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打开一张表</span>        KuduTable stuTable <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">openTable</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建会话</span>        KuduSession kuduSession <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置刷数据模式</span>        kuduSession<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>SessionConfiguration<span class="token punctuation">.</span>FlushMode<span class="token punctuation">.</span>MANUAL_FLUSH<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取插入实例</span>        Insert insert <span class="token operator">=</span> stuTable<span class="token punctuation">.</span><span class="token function">newInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//声明带插入数据</span>        insert<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         insert<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lucas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//刷入数据</span>        kuduSession<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//应用插入实例</span>        kuduSession<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭会话</span>        kuduSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>KuduException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>插入实例：</p><ol><li><code>AUTO_FLUSH_SYNC</code>：默认刷新模式，自动异步刷新，不可批量刷新</li><li><code>AUTO_FLUSH_BACKGROUND</code>：自动同步刷新方式，可批量刷新</li><li><code>MANUAL_FLUS</code>：同步刷新,常用的刷新方式</li></ol></blockquote><h3 id="4-4、查询数据"><a href="#4-4、查询数据" class="headerlink" title="4.4、查询数据"></a>4.4、查询数据</h3><blockquote><p>1、获取client</p><p>2、获取Scanner</p><p>3、从Scanner中循环遍历数据</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取client</span>    KuduClient<span class="token punctuation">.</span>KuduClientBuilder clientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span><span class="token string">"hdp- 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    KuduClient client <span class="token operator">=</span> clientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Scanner</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        KuduTable stuTable <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">openTable</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         KuduScanner scanner <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newScannerBuilder</span><span class="token punctuation">(</span>stuTable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasMoreRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span>RowResult result <span class="token operator">:</span> scanner<span class="token punctuation">.</span><span class="token function">nextRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span> id <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 String name <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5、更改表数据"><a href="#4-5、更改表数据" class="headerlink" title="4.5、更改表数据"></a>4.5、更改表数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lagou<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">updateDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         KuduClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span><span class="token string">"hdp-2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span> <span class="token punctuation">{</span>            KuduTable stuTable <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">openTable</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KuduSession kuduSession <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         kuduSession<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>SessionConfiguration<span class="token punctuation">.</span>FlushMode<span class="token punctuation">.</span>MANUAL_FLUSH<span class="token punctuation">)</span><span class="token punctuation">;</span>                         Update update <span class="token operator">=</span> stuTable<span class="token punctuation">.</span><span class="token function">newUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             update<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             update<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        kuduSession<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>                         kuduSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6、删除指定行数据"><a href="#4-6、删除指定行数据" class="headerlink" title="4.6、删除指定行数据"></a>4.6、删除指定行数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lagou<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">deleteDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        KuduClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span><span class="token string">"hdp-2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            KuduTable stuTable <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">openTable</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             KuduSession kuduSession <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         kuduSession<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>SessionConfiguration<span class="token punctuation">.</span>FlushMode<span class="token punctuation">.</span>MANUAL_FLUSH<span class="token punctuation">)</span><span class="token punctuation">;</span>            Delete delete <span class="token operator">=</span> stuTable<span class="token punctuation">.</span><span class="token function">newDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        PartialRow row <span class="token operator">=</span> delete<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             row<span class="token punctuation">.</span><span class="token function">addInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         kuduSession<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            kuduSession<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span>             kuduSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7、删除表数据"><a href="#4-7、删除表数据" class="headerlink" title="4.7、删除表数据"></a>4.7、删除表数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> lagou<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>KuduClient<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kudu<span class="token punctuation">.</span>client<span class="token punctuation">.</span>KuduException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">deleteTableDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//master地址 String </span>        masterAddr <span class="token operator">=</span> <span class="token string">"192.168.56.56"</span><span class="token punctuation">;</span>         KuduClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KuduClient<span class="token punctuation">.</span>KuduClientBuilder</span><span class="token punctuation">(</span>masterAddr<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">defaultSocketReadTimeoutMs</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">deleteTable</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KuduException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> KuDu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 的使用教程</title>
      <link href="/2022/06/25/typora/"/>
      <url>/2022/06/25/typora/</url>
      
        <content type="html"><![CDATA[<h1 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h1><hr><blockquote><p>本篇文章仅供参考</p></blockquote><h2 id="Typora的介绍"><a href="#Typora的介绍" class="headerlink" title="Typora的介绍"></a>Typora的介绍</h2><hr><blockquote><p><code>Typora</code> 是一款轻便简洁的<code>Markdown编辑器</code>，支持即时渲染技术，这也是与其他<code>Markdown</code>编辑器最显著的区别。即时渲染使得你写<code>Markdown</code>就想是写<code>Word</code>文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><hr><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><hr><ul><li><p>标题系列</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''第一种方式'''</span>    <span class="token comment" spellcheck="true"># 一级标题  快捷键Ctrl + 1</span>    <span class="token comment" spellcheck="true"># 二级标题  快捷键Ctrl + 2</span>    <span class="token comment" spellcheck="true"># 三级标题  快捷键Ctrl + 3</span>     <span class="token triple-quoted-string string">'''第二种方式'''</span>    <span class="token comment" spellcheck="true">#井号（# 数加空格）# 号数决定标题大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-python"><code class="language-python">无序标题    星号空格配合文本：  <span class="token operator">*</span> <span class="token operator">+</span> 小标题有序标题    数字 <span class="token operator">+</span> <span class="token punctuation">.</span> <span class="token operator">+</span> 空格： <span class="token number">1</span><span class="token punctuation">.</span>  小标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h3><hr><pre class="line-numbers language-python"><code class="language-python">字体加粗    <span class="token operator">**</span>内容<span class="token operator">**</span>字体斜体    <span class="token operator">*</span>内容<span class="token operator">*</span>斜体加粗    <span class="token operator">**</span><span class="token operator">*</span>内容<span class="token operator">**</span><span class="token operator">*</span>删除线    <span class="token operator">~</span><span class="token operator">~</span>内容<span class="token operator">~</span><span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><hr><pre class="line-numbers language-pyhton"><code class="language-pyhton">>+空格 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h3><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''第一种方式'''</span>    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>三个减号<span class="token triple-quoted-string string">'''第二种方式'''</span>    <span class="token operator">+</span><span class="token operator">+</span><span class="token operator">+</span>三个加号<span class="token triple-quoted-string string">'''第三方式'''</span>    <span class="token operator">**</span><span class="token operator">*</span>三个星号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h3><hr><pre class="line-numbers language-python"><code class="language-python">!<span class="token punctuation">[</span>图片备注信息<span class="token punctuation">]</span><span class="token punctuation">(</span>图片路径<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="制图"><a href="#制图" class="headerlink" title="制图"></a>制图</h2><hr><h3 id="一、甘特图"><a href="#一、甘特图" class="headerlink" title="一、甘特图"></a>一、甘特图</h3><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''语法示例'''</span>    gantt    dateForamt YYYY<span class="token operator">-</span>MM<span class="token operator">-</span>DD    title 甘特图           section 开发部    框架<span class="token punctuation">:</span>active<span class="token punctuation">,</span>desc1<span class="token punctuation">,</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span>    开发<span class="token punctuation">:</span>active<span class="token punctuation">,</span>desc1<span class="token punctuation">,</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/">https://shw2018.github.io</a>，博客演示：<a href="https://sunhwee.com/">sunhwee.com</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><p> <strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p><ul><li>修改了原主题的一些很多<code>bug</code>   2019.08.05</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</li><li>增加<code>留言板</code>功能          2019.08.05</li><li>在关于板块,加入<code>简历</code>功能页   2019.08.05</li><li>增加视听[视觉听觉影音]板块       2019.08.10</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</li><li>增加网站运行时间显示  2019.08.10</li><li>增加<code>动漫模型</code>     2019.08.10</li><li>整体替换Banner图片和文章特色图片   2019.08.10</li><li>增加分类<code>相册</code>功能         2019.08.29</li><li>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</li><li>修改了一些控件的参数   2019.09.01</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</li><li>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</li><li>添加页面樱花飘落动效            2019.09.09</li><li>添加鼠标点击烟花爆炸动效   2019.09.09</li><li>加入天气接口控件   2019.09.09</li><li>加入鼠标点击文字特效   2019.09.10</li><li>添加页面雪花飘落动效            2019.09.10</li><li>添加在线聊天插件            2019.09.12</li><li>持续更新…</li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads">Git</a>, 安装<a href="https://nodejs.org/en/">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong><br><escape></escape></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
